var path = require("path");

/**
 * GET /assets/js/mvc/loginpage/main-loginpage.pack.c671060fbf5f48a63eb447b6598635cc.js
 *
 * host: rain.okta1.com:1802
 * connection: keep-alive
 * user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0
 * accept: * / *
 * accept-encoding: gzip
 * accept-language: en-US
 * cookie: DT=DI00gCQTZFlRa2lC9c1_CUR5A; t=default; JSESSIONID=4803575FC985D74993BDB42BD8194D15
 * cache-control: no-cache, no-store
 * pragma: no-cache
 */

module.exports = function (req, res) {
  res.statusCode = 200;

  res.setHeader("server", "Apache-Coyote/1.1");
  res.setHeader("accept-ranges", "bytes");
  res.setHeader("etag", "W/\"1782172-1502281784000\"");
  res.setHeader("last-modified", "Wed, 09 Aug 2017 12:29:44 GMT");
  res.setHeader("content-type", "text/javascript");
  res.setHeader("content-length", "1782172");
  res.setHeader("date", "Thu, 10 Aug 2017 22:13:22 GMT");

  res.setHeader("x-yakbak-tape", path.basename(__filename, ".js"));

  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("hi5f4KS44KWLLl/gpK7gpIIuX+CkrOClgS5f4KSs4KS/Ll/gpLbgpYEuX+Ckti4iLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJB4KSV4KWLIGg6bW0g4KSs4KSc4KWHIixMVFM6IkHgpJXgpYsgaDptbTpzcyDgpKzgpJzgpYciLEw6IkREL01NL1lZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhyIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcifSxwcmVwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLGZ1bmN0aW9uKHQpe3JldHVybiBpW3RdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvXGQvZyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pfSxtZXJpZGllbVBhcnNlOi/gpLDgpL7gpKTgpL984KSs4KS/4KS54KS+4KSofOCkpuCkv+CkieCkgeCkuOCli3zgpLjgpL7gpIHgpJ0vLG1lcmlkaWVtSG91cjpmdW5jdGlvbih0LGUpe3JldHVybiAxMj09PXQmJih0PTApLCLgpLDgpL7gpKTgpL8iPT09ZT90PDQ/dDp0KzEyOiLgpKzgpL/gpLngpL7gpKgiPT09ZT90OiLgpKbgpL/gpIngpIHgpLjgpYsiPT09ZT90Pj0xMD90OnQrMTI6IuCkuOCkvuCkgeCknSI9PT1lP3QrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQ8Mz8i4KSw4KS+4KSk4KS/Ijp0PDEyPyLgpKzgpL/gpLngpL7gpKgiOnQ8MTY/IuCkpuCkv+CkieCkgeCkuOCliyI6dDwyMD8i4KS44KS+4KSB4KSdIjoi4KSw4KS+4KSk4KS/In0sY2FsZW5kYXI6e3NhbWVEYXk6IlvgpIbgpJxdIExUIixuZXh0RGF5OiJb4KSt4KWL4KSy4KS/XSBMVCIsbmV4dFdlZWs6IlvgpIbgpIngpIHgpKbgpYtdIGRkZGRbLF0gTFQiLGxhc3REYXk6IlvgpLngpL/gpJzgpYtdIExUIixsYXN0V2VlazoiW+Ckl+Ckj+CkleCli10gZGRkZFssXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToiJXPgpK7gpL4iLHBhc3Q6IiVzIOCkheCkl+CkvuCkoeCkvyIsczoi4KSV4KWH4KS54KWAIOCkleCljeCkt+CkoyIsbToi4KSP4KSVIOCkruCkv+CkqOClh+CknyIsbW06IiVkIOCkruCkv+CkqOClh+CknyIsaDoi4KSP4KSVIOCkmOCko+CljeCkn+CkviIsaGg6IiVkIOCkmOCko+CljeCkn+CkviIsZDoi4KSP4KSVIOCkpuCkv+CkqCIsZGQ6IiVkIOCkpuCkv+CkqCIsTToi4KSP4KSVIOCkruCkueCkv+CkqOCkviIsTU06IiVkIOCkruCkueCkv+CkqOCkviIseToi4KSP4KSVIOCkrOCksOCljeCktyIseXk6IiVkIOCkrOCksOCljeCktyJ9LHdlZWs6e2RvdzowLGRveTo2fX0pO3JldHVybiBufSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9Imphbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4iLnNwbGl0KCJfIiksaT0iamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMiLnNwbGl0KCJfIiksbj10LmRlZmluZUxvY2FsZSgibmwiLHttb250aHM6ImphbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlciIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDpmdW5jdGlvbih0LG4pe3JldHVybi8tTU1NLS8udGVzdChuKT9pW3QubW9udGgoKV06ZVt0Lm1vbnRoKCldfSx3ZWVrZGF5czoiem9uZGFnX21hYW5kYWdfZGluc2RhZ193b2Vuc2RhZ19kb25kZXJkYWdfdnJpamRhZ196YXRlcmRhZyIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJ6by5fbWEuX2RpLl93by5fZG8uX3ZyLl96YS4iLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IlpvX01hX0RpX1dvX0RvX1ZyX1phIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkRELU1NLVlZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSBISDptbSIsTExMTDoiZGRkZCBEIE1NTU0gWVlZWSBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJbdmFuZGFhZyBvbV0gTFQiLG5leHREYXk6Ilttb3JnZW4gb21dIExUIixuZXh0V2VlazoiZGRkZCBbb21dIExUIixsYXN0RGF5OiJbZ2lzdGVyZW4gb21dIExUIixsYXN0V2VlazoiW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiJvdmVyICVzIixwYXN0OiIlcyBnZWxlZGVuIixzOiJlZW4gcGFhciBzZWNvbmRlbiIsbToiw6nDqW4gbWludXV0IixtbToiJWQgbWludXRlbiIsaDoiw6nDqW4gdXVyIixoaDoiJWQgdXVyIixkOiLDqcOpbiBkYWciLGRkOiIlZCBkYWdlbiIsTToiw6nDqW4gbWFhbmQiLE1NOiIlZCBtYWFuZGVuIix5OiLDqcOpbiBqYWFyIix5eToiJWQgamFhciJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfShzdGV8ZGUpLyxvcmRpbmFsOmZ1bmN0aW9uKHQpe3JldHVybiB0KygxPT09dHx8OD09PXR8fHQ+PTIwPyJzdGUiOiJkZSIpfSx3ZWVrOntkb3c6MSxkb3k6NH19KTtyZXR1cm4gbn0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXQuZGVmaW5lTG9jYWxlKCJubiIse21vbnRoczoiamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlciIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMiLnNwbGl0KCJfIiksd2Vla2RheXM6InN1bmRhZ19tw6VuZGFnX3R5c2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbGF1cmRhZyIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJzdW5fbcOlbl90eXNfb25zX3Rvcl9mcmVfbGF1Ii5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJzdV9tw6VfdHlfb25fdG9fZnJfbMO4Ii5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkRELk1NLllZWVkiLExMOiJELiBNTU1NIFlZWVkiLExMTDoiRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0iLExMTEw6ImRkZGQgRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltJIGRhZyBrbG9ra2FdIExUIixuZXh0RGF5OiJbSSBtb3Jnb24ga2xva2thXSBMVCIsbmV4dFdlZWs6ImRkZGQgW2tsb2trYV0gTFQiLGxhc3REYXk6IltJIGfDpXIga2xva2thXSBMVCIsbGFzdFdlZWs6IltGw7hyZWfDpWFuZGVdIGRkZGQgW2tsb2trYV0gTFQiLHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6Im9tICVzIixwYXN0OiJmb3IgJXMgc2lkYW4iLHM6Im5va3JlIHNla3VuZCIsbToiZWl0IG1pbnV0dCIsbW06IiVkIG1pbnV0dCIsaDoiZWluIHRpbWUiLGhoOiIlZCB0aW1hciIsZDoiZWluIGRhZyIsZGQ6IiVkIGRhZ2FyIixNOiJlaW4gbcOlbmFkIixNTToiJWQgbcOlbmFkZXIiLHk6ImVpdCDDpXIiLHl5OiIlZCDDpXIifSxvcmRpbmFsUGFyc2U6L1xkezEsMn1cLi8sb3JkaW5hbDoiJWQuIix3ZWVrOntkb3c6MSxkb3k6NH19KTtyZXR1cm4gZX0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXsxOiLgqaciLDI6IuCpqCIsMzoi4KmpIiw0OiLgqaoiLDU6IuCpqyIsNjoi4KmsIiw3OiLgqa0iLDg6IuCpriIsOToi4KmvIiwwOiLgqaYifSxpPXsi4KmnIjoiMSIsIuCpqCI6IjIiLCLgqakiOiIzIiwi4KmqIjoiNCIsIuCpqyI6IjUiLCLgqawiOiI2Iiwi4KmtIjoiNyIsIuCpriI6IjgiLCLgqa8iOiI5Iiwi4KmmIjoiMCJ9LG49dC5kZWZpbmVMb2NhbGUoInBhLWluIix7bW9udGhzOiLgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoi4Kic4Kio4Ki14Kiw4KmAX+Coq+CovOCosOCoteCosOCpgF/gqK7gqL7gqLDgqJpf4KiF4Kiq4KmN4Kiw4KmI4KiyX+CoruCoiF/gqJzgqYLgqKhf4Kic4KmB4Kiy4Ki+4KiIX+CoheCol+CouOCopF/gqLjgqKTgqbDgqKzgqLBf4KiF4KiV4Kik4KmC4Kis4KiwX+CoqOCoteCpsOCorOCosF/gqKbgqLjgqbDgqKzgqLAiLnNwbGl0KCJfIiksCgl3ZWVrZGF5czoi4KiQ4Kik4Ki14Ki+4KiwX+CouOCpi+CoruCoteCovuCosF/gqK7gqbDgqJfgqLLgqLXgqL7gqLBf4Kis4KmB4Kin4Ki14Ki+4KiwX+CoteCpgOCosOCoteCovuCosF/gqLjgqLzgqYHgqbHgqJXgqLDgqLXgqL7gqLBf4Ki44Ki84Kio4KmA4Kia4Kiw4Ki14Ki+4KiwIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IuCokOCopF/gqLjgqYvgqK5f4Kiu4Kmw4KiX4KiyX+CorOCpgeCop1/gqLXgqYDgqLBf4Ki44Ki84KmB4KiV4KiwX+CouOCovOCoqOCpgCIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoi4KiQ4KikX+CouOCpi+Corl/gqK7gqbDgqJfgqLJf4Kis4KmB4KinX+CoteCpgOCosF/gqLjgqLzgqYHgqJXgqLBf4Ki44Ki84Kio4KmAIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiQSBoOm1tIOCoteConOCphyIsTFRTOiJBIGg6bW06c3Mg4Ki14Kic4KmHIixMOiJERC9NTS9ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYciLExMTEw6ImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Ki14Kic4KmHIn0sY2FsZW5kYXI6e3NhbWVEYXk6IlvgqIXgqJxdIExUIixuZXh0RGF5OiJb4KiV4KiyXSBMVCIsbmV4dFdlZWs6ImRkZGQsIExUIixsYXN0RGF5OiJb4KiV4KiyXSBMVCIsbGFzdFdlZWs6IlvgqKrgqL/gqJvgqLLgqYddIGRkZGQsIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiIlcyDgqLXgqL/gqbHgqJoiLHBhc3Q6IiVzIOCoquCov+Com+CosuCphyIsczoi4KiV4KmB4KidIOCouOColeCov+CpsOConyIsbToi4KiH4KiVIOCoruCov+CpsOConyIsbW06IiVkIOCoruCov+CpsOConyIsaDoi4KiH4Kmx4KiVIOComOCpsOCon+CoviIsaGg6IiVkIOComOCpsOCon+CphyIsZDoi4KiH4Kmx4KiVIOCopuCov+CoqCIsZGQ6IiVkIOCopuCov+CoqCIsTToi4KiH4Kmx4KiVIOCoruCoueCpgOCoqOCoviIsTU06IiVkIOCoruCoueCpgOCoqOCphyIseToi4KiH4Kmx4KiVIOCouOCovuCosiIseXk6IiVkIOCouOCovuCosiJ9LHByZXBhcnNlOmZ1bmN0aW9uKHQpe3JldHVybiB0LnJlcGxhY2UoL1vgqafgqajgqangqargqavgqazgqa3gqa7gqa/gqaZdL2csZnVuY3Rpb24odCl7cmV0dXJuIGlbdF19KX0scG9zdGZvcm1hdDpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9cZC9nLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfSl9LG1lcmlkaWVtUGFyc2U6L+CosOCovuCopHzgqLjgqLXgqYfgqLB84Kim4KmB4Kiq4Ki54Ki/4KiwfOCouOCovOCovuCori8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDEyPT09dCYmKHQ9MCksIuCosOCovuCopCI9PT1lP3Q8ND90OnQrMTI6IuCouOCoteCph+CosCI9PT1lP3Q6IuCopuCpgeCoquCoueCov+CosCI9PT1lP3Q+PTEwP3Q6dCsxMjoi4Ki44Ki84Ki+4KiuIj09PWU/dCsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdDw0PyLgqLDgqL7gqKQiOnQ8MTA/IuCouOCoteCph+CosCI6dDwxNz8i4Kim4KmB4Kiq4Ki54Ki/4KiwIjp0PDIwPyLgqLjgqLzgqL7gqK4iOiLgqLDgqL7gqKQifSx3ZWVrOntkb3c6MCxkb3k6Nn19KTtyZXR1cm4gbn0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGUodCl7cmV0dXJuIHQlMTA8NSYmdCUxMD4xJiZ+fih0LzEwKSUxMCE9PTF9ZnVuY3Rpb24gaSh0LGksbil7dmFyIHI9dCsiICI7c3dpdGNoKG4pe2Nhc2UibSI6cmV0dXJuIGk/Im1pbnV0YSI6Im1pbnV0xJkiO2Nhc2UibW0iOnJldHVybiByKyhlKHQpPyJtaW51dHkiOiJtaW51dCIpO2Nhc2UiaCI6cmV0dXJuIGk/ImdvZHppbmEiOiJnb2R6aW7EmSI7Y2FzZSJoaCI6cmV0dXJuIHIrKGUodCk/ImdvZHppbnkiOiJnb2R6aW4iKTtjYXNlIk1NIjpyZXR1cm4gcisoZSh0KT8ibWllc2nEhWNlIjoibWllc2nEmWN5Iik7Y2FzZSJ5eSI6cmV0dXJuIHIrKGUodCk/ImxhdGEiOiJsYXQiKX19dmFyIG49InN0eWN6ZcWEX2x1dHlfbWFyemVjX2t3aWVjaWXFhF9tYWpfY3plcndpZWNfbGlwaWVjX3NpZXJwaWXFhF93cnplc2llxYRfcGHFumR6aWVybmlrX2xpc3RvcGFkX2dydWR6aWXFhCIuc3BsaXQoIl8iKSxyPSJzdHljem5pYV9sdXRlZ29fbWFyY2Ffa3dpZXRuaWFfbWFqYV9jemVyd2NhX2xpcGNhX3NpZXJwbmlhX3dyemXFm25pYV9wYcW6ZHppZXJuaWthX2xpc3RvcGFkYV9ncnVkbmlhIi5zcGxpdCgiXyIpLHM9dC5kZWZpbmVMb2NhbGUoInBsIix7bW9udGhzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIiI9PT1lPyIoIityW3QubW9udGgoKV0rInwiK25bdC5tb250aCgpXSsiKSI6L0QgTU1NTS8udGVzdChlKT9yW3QubW9udGgoKV06blt0Lm1vbnRoKCldfSxtb250aHNTaG9ydDoic3R5X2x1dF9tYXJfa3dpX21hal9jemVfbGlwX3NpZV93cnpfcGHFul9saXNfZ3J1Ii5zcGxpdCgiXyIpLHdlZWtkYXlzOiJuaWVkemllbGFfcG9uaWVkemlhxYJla193dG9yZWtfxZtyb2RhX2N6d2FydGVrX3BpxIV0ZWtfc29ib3RhIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6Im5pZV9wb25fd3RfxZtyX2N6d19wdF9zYiIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoiTmRfUG5fV3RfxZpyX0N6X1B0X1NvIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkRELk1NLllZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSBISDptbSIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW0R6acWbIG9dIExUIixuZXh0RGF5OiJbSnV0cm8gb10gTFQiLG5leHRXZWVrOiJbV10gZGRkZCBbb10gTFQiLGxhc3REYXk6IltXY3pvcmFqIG9dIExUIixsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuIltXIHplc3rFgsSFIG5pZWR6aWVsxJkgb10gTFQiO2Nhc2UgMzpyZXR1cm4iW1cgemVzesWCxIUgxZtyb2TEmSBvXSBMVCI7Y2FzZSA2OnJldHVybiJbVyB6ZXN6xYLEhSBzb2JvdMSZIG9dIExUIjtkZWZhdWx0OnJldHVybiJbVyB6ZXN6xYJ5XSBkZGRkIFtvXSBMVCJ9fSxzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiJ6YSAlcyIscGFzdDoiJXMgdGVtdSIsczoia2lsa2Egc2VrdW5kIixtOmksbW06aSxoOmksaGg6aSxkOiIxIGR6aWXFhCIsZGQ6IiVkIGRuaSIsTToibWllc2nEhWMiLE1NOmkseToicm9rIix5eTppfSxvcmRpbmFsUGFyc2U6L1xkezEsMn1cLi8sb3JkaW5hbDoiJWQuIix3ZWVrOntkb3c6MSxkb3k6NH19KTtyZXR1cm4gc30pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXQuZGVmaW5lTG9jYWxlKCJwdCIse21vbnRoczoiSmFuZWlyb19GZXZlcmVpcm9fTWFyw6dvX0FicmlsX01haW9fSnVuaG9fSnVsaG9fQWdvc3RvX1NldGVtYnJvX091dHVicm9fTm92ZW1icm9fRGV6ZW1icm8iLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6Ikphbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Ii5zcGxpdCgiXyIpLHdlZWtkYXlzOiJEb21pbmdvX1NlZ3VuZGEtRmVpcmFfVGVyw6dhLUZlaXJhX1F1YXJ0YS1GZWlyYV9RdWludGEtRmVpcmFfU2V4dGEtRmVpcmFfU8OhYmFkbyIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJEb21fMsKqXzPCql80wqpfNcKqXzbCql9Tw6FiIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkREL01NL1lZWVkiLExMOiJEIFtkZV0gTU1NTSBbZGVdIFlZWVkiLExMTDoiRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tIixMTExMOiJkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW0hvamUgw6BzXSBMVCIsbmV4dERheToiW0FtYW5ow6Mgw6BzXSBMVCIsbmV4dFdlZWs6ImRkZGQgW8Ogc10gTFQiLGxhc3REYXk6IltPbnRlbSDDoHNdIExUIixsYXN0V2VlazpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5kYXkoKXx8Nj09PXRoaXMuZGF5KCk/IlvDmmx0aW1vXSBkZGRkIFvDoHNdIExUIjoiW8OabHRpbWFdIGRkZGQgW8Ogc10gTFQifSxzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiJlbSAlcyIscGFzdDoiaMOhICVzIixzOiJzZWd1bmRvcyIsbToidW0gbWludXRvIixtbToiJWQgbWludXRvcyIsaDoidW1hIGhvcmEiLGhoOiIlZCBob3JhcyIsZDoidW0gZGlhIixkZDoiJWQgZGlhcyIsTToidW0gbcOqcyIsTU06IiVkIG1lc2VzIix5OiJ1bSBhbm8iLHl5OiIlZCBhbm9zIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9wrovLG9yZGluYWw6IiVkwroiLHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInB0LWJyIix7bW9udGhzOiJKYW5laXJvX0ZldmVyZWlyb19NYXLDp29fQWJyaWxfTWFpb19KdW5ob19KdWxob19BZ29zdG9fU2V0ZW1icm9fT3V0dWJyb19Ob3ZlbWJyb19EZXplbWJybyIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiSmFuX0Zldl9NYXJfQWJyX01haV9KdW5fSnVsX0Fnb19TZXRfT3V0X05vdl9EZXoiLnNwbGl0KCJfIiksd2Vla2RheXM6IkRvbWluZ29fU2VndW5kYS1mZWlyYV9UZXLDp2EtZmVpcmFfUXVhcnRhLWZlaXJhX1F1aW50YS1mZWlyYV9TZXh0YS1mZWlyYV9Tw6FiYWRvIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IkRvbV9TZWdfVGVyX1F1YV9RdWlfU2V4X1PDoWIiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IkRvbV8ywqpfM8KqXzTCql81wqpfNsKqX1PDoWIiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJISDptbSIsTFRTOiJISDptbTpzcyIsTDoiREQvTU0vWVlZWSIsTEw6IkQgW2RlXSBNTU1NIFtkZV0gWVlZWSIsTExMOiJEIFtkZV0gTU1NTSBbZGVdIFlZWVkgW8Ogc10gSEg6bW0iLExMTEw6ImRkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJbSG9qZSDDoHNdIExUIixuZXh0RGF5OiJbQW1hbmjDoyDDoHNdIExUIixuZXh0V2VlazoiZGRkZCBbw6BzXSBMVCIsbGFzdERheToiW09udGVtIMOgc10gTFQiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmRheSgpfHw2PT09dGhpcy5kYXkoKT8iW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQiOiJbw5psdGltYV0gZGRkZCBbw6BzXSBMVCJ9LHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6ImVtICVzIixwYXN0OiIlcyBhdHLDoXMiLHM6InBvdWNvcyBzZWd1bmRvcyIsbToidW0gbWludXRvIixtbToiJWQgbWludXRvcyIsaDoidW1hIGhvcmEiLGhoOiIlZCBob3JhcyIsZDoidW0gZGlhIixkZDoiJWQgZGlhcyIsTToidW0gbcOqcyIsTU06IiVkIG1lc2VzIix5OiJ1bSBhbm8iLHl5OiIlZCBhbm9zIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9wrovLG9yZGluYWw6IiVkwroifSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLGkpeyFmdW5jdGlvbih0LGUpe2UoaSgzNikpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKHQsZSxpKXt2YXIgbj17bW06Im1pbnV0ZSIsaGg6Im9yZSIsZGQ6InppbGUiLE1NOiJsdW5pIix5eToiYW5pIn0scj0iICI7cmV0dXJuKHQlMTAwPj0yMHx8dD49MTAwJiZ0JTEwMD09PTApJiYocj0iIGRlICIpLHQrcituW2ldfXZhciBpPXQuZGVmaW5lTG9jYWxlKCJybyIse21vbnRoczoiaWFudWFyaWVfZmVicnVhcmllX21hcnRpZV9hcHJpbGllX21haV9pdW5pZV9pdWxpZV9hdWd1c3Rfc2VwdGVtYnJpZV9vY3RvbWJyaWVfbm9pZW1icmllX2RlY2VtYnJpZSIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiaWFuLl9mZWJyLl9tYXJ0Ll9hcHIuX21haV9pdW4uX2l1bC5fYXVnLl9zZXB0Ll9vY3QuX25vdi5fZGVjLiIuc3BsaXQoIl8iKSx3ZWVrZGF5czoiZHVtaW5pY8SDX2x1bmlfbWFyyJtpX21pZXJjdXJpX2pvaV92aW5lcmlfc8OibWLEg3TEgyIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJEdW1fTHVuX01hcl9NaWVfSm9pX1Zpbl9Tw6JtIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJEdV9MdV9NYV9NaV9Kb19WaV9Tw6IiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJIOm1tIixMVFM6Ikg6bW06c3MiLEw6IkRELk1NLllZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSBIOm1tIixMTExMOiJkZGRkLCBEIE1NTU0gWVlZWSBIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IlthemkgbGFdIExUIixuZXh0RGF5OiJbbcOiaW5lIGxhXSBMVCIsbmV4dFdlZWs6ImRkZGQgW2xhXSBMVCIsbGFzdERheToiW2llcmkgbGFdIExUIixsYXN0V2VlazoiW2Zvc3RhXSBkZGRkIFtsYV0gTFQiLHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6InBlc3RlICVzIixwYXN0OiIlcyDDrm4gdXJtxIMiLHM6ImPDonRldmEgc2VjdW5kZSIsbToidW4gbWludXQiLG1tOmUsaDoibyBvcsSDIixoaDplLGQ6Im8gemkiLGRkOmUsTToibyBsdW7EgyIsTU06ZSx5OiJ1biBhbiIseXk6ZX0sd2Vlazp7ZG93OjEsZG95Ojd9fSk7cmV0dXJuIGl9KX0sZnVuY3Rpb24odCxlLGkpeyFmdW5jdGlvbih0LGUpe2UoaSgzNikpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKHQsZSl7dmFyIGk9dC5zcGxpdCgiXyIpO3JldHVybiBlJTEwPT09MSYmZSUxMDAhPT0xMT9pWzBdOmUlMTA+PTImJmUlMTA8PTQmJihlJTEwMDwxMHx8ZSUxMDA+PTIwKT9pWzFdOmlbMl19ZnVuY3Rpb24gaSh0LGksbil7dmFyIHI9e21tOmk/ItC80LjQvdGD0YLQsF/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgiI6ItC80LjQvdGD0YLRg1/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgiIsaGg6ItGH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyIixkZDoi0LTQtdC90Yxf0LTQvdGPX9C00L3QtdC5IixNTToi0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0LBf0LzQtdGB0Y/RhtC10LIiLHl5OiLQs9C+0LRf0LPQvtC00LBf0LvQtdGCIn07cmV0dXJuIm0iPT09bj9pPyLQvNC40L3Rg9GC0LAiOiLQvNC40L3Rg9GC0YMiOnQrIiAiK2UocltuXSwrdCl9dmFyIG49Wy9e0Y/QvdCyL2ksL17RhNC10LIvaSwvXtC80LDRgC9pLC9e0LDQv9GAL2ksL17QvNCwW9C5fNGPXS9pLC9e0LjRjtC9L2ksL17QuNGO0LsvaSwvXtCw0LLQsy9pLC9e0YHQtdC9L2ksL17QvtC60YIvaSwvXtC90L7Rjy9pLC9e0LTQtdC6L2ldLHI9dC5kZWZpbmVMb2NhbGUoInJ1Iix7bW9udGhzOntmb3JtYXQ6ItGP0L3QstCw0YDRj1/RhNC10LLRgNCw0LvRj1/QvNCw0YDRgtCwX9Cw0L/RgNC10LvRj1/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCz0YPRgdGC0LBf0YHQtdC90YLRj9Cx0YDRj1/QvtC60YLRj9Cx0YDRj1/QvdC+0Y/QsdGA0Y9f0LTQtdC60LDQsdGA0Y8iLnNwbGl0KCJfIiksc3RhbmRhbG9uZToi0Y/QvdCy0LDRgNGMX9GE0LXQstGA0LDQu9GMX9C80LDRgNGCX9Cw0L/RgNC10LvRjF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGA0Yxf0L7QutGC0Y/QsdGA0Yxf0L3QvtGP0LHRgNGMX9C00LXQutCw0LHRgNGMIi5zcGxpdCgiXyIpfSxtb250aHNTaG9ydDp7Zm9ybWF0OiLRj9C90LJf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LoiLnNwbGl0KCJfIiksc3RhbmRhbG9uZToi0Y/QvdCyX9GE0LXQsl/QvNCw0YDRgl/QsNC/0YBf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LoiLnNwbGl0KCJfIil9LHdlZWtkYXlzOntzdGFuZGFsb25lOiLQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbQsF/RgdGD0LHQsdC+0YLQsCIuc3BsaXQoIl8iKSxmb3JtYXQ6ItCy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNGDX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtGDX9GB0YPQsdCx0L7RgtGDIi5zcGxpdCgiXyIpLGlzRm9ybWF0Oi9cWyA/W9CS0LJdID8oPzrQv9GA0L7RiNC70YPRjnzRgdC70LXQtNGD0Y7RidGD0Y580Y3RgtGDKT8gP1xdID9kZGRkL30sd2Vla2RheXNTaG9ydDoi0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsSIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoi0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsSIuc3BsaXQoIl8iKSxtb250aHNQYXJzZTpuLGxvbmdNb250aHNQYXJzZTpuLHNob3J0TW9udGhzUGFyc2U6bixsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJERC5NTS5ZWVlZIixMTDoiRCBNTU1NIFlZWVkg0LMuIixMTEw6IkQgTU1NTSBZWVlZINCzLiwgSEg6bW0iLExMTEw6ImRkZGQsIEQgTU1NTSBZWVlZINCzLiwgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW9Ch0LXQs9C+0LTQvdGPINCyXSBMVCIsbmV4dERheToiW9CX0LDQstGC0YDQsCDQsl0gTFQiLGxhc3REYXk6IlvQktGH0LXRgNCwINCyXSBMVCIsbmV4dFdlZWs6ZnVuY3Rpb24odCl7aWYodC53ZWVrKCk9PT10aGlzLndlZWsoKSlyZXR1cm4gMj09PXRoaXMuZGF5KCk/IlvQktC+XSBkZGRkIFvQsl0gTFQiOiJb0JJdIGRkZGQgW9CyXSBMVCI7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm4iW9CSINGB0LvQtdC00YPRjtGJ0LXQtV0gZGRkZCBb0LJdIExUIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4iW9CSINGB0LvQtdC00YPRjtGJ0LjQuV0gZGRkZCBb0LJdIExUIjtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpyZXR1cm4iW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCBb0LJdIExUIn19LGxhc3RXZWVrOmZ1bmN0aW9uKHQpe2lmKHQud2VlaygpPT09dGhpcy53ZWVrKCkpcmV0dXJuIDI9PT10aGlzLmRheSgpPyJb0JLQvl0gZGRkZCBb0LJdIExUIjoiW9CSXSBkZGRkIFvQsl0gTFQiO3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuIlvQkiDQv9GA0L7RiNC70L7QtV0gZGRkZCBb0LJdIExUIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4iW9CSINC/0YDQvtGI0LvRi9C5XSBkZGRkIFvQsl0gTFQiO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OnJldHVybiJb0JIg0L/RgNC+0YjQu9GD0Y5dIGRkZGQgW9CyXSBMVCJ9fSxzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiLRh9C10YDQtdC3ICVzIixwYXN0OiIlcyDQvdCw0LfQsNC0IixzOiLQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0IixtOmksbW06aSxoOiLRh9Cw0YEiLGhoOmksZDoi0LTQtdC90YwiLGRkOmksTToi0LzQtdGB0Y/RhiIsTU06aSx5OiLQs9C+0LQiLHl5Oml9LG1lcmlkaWVtUGFyc2U6L9C90L7Rh9C4fNGD0YLRgNCwfNC00L3Rj3zQstC10YfQtdGA0LAvaSxpc1BNOmZ1bmN0aW9uKHQpe3JldHVybi9eKNC00L3Rj3zQstC10YfQtdGA0LApJC8udGVzdCh0KX0sbWVyaWRpZW06ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0PDQ/ItC90L7Rh9C4Ijp0PDEyPyLRg9GC0YDQsCI6dDwxNz8i0LTQvdGPIjoi0LLQtdGH0LXRgNCwIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9LSjQuXzQs9C+fNGPKS8sb3JkaW5hbDpmdW5jdGlvbih0LGUpe3N3aXRjaChlKXtjYXNlIk0iOmNhc2UiZCI6Y2FzZSJEREQiOnJldHVybiB0KyIt0LkiO2Nhc2UiRCI6cmV0dXJuIHQrIi3Qs9C+IjtjYXNlInciOmNhc2UiVyI6cmV0dXJuIHQrIi3RjyI7ZGVmYXVsdDpyZXR1cm4gdH19LHdlZWs6e2RvdzoxLGRveTo3fX0pO3JldHVybiByfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInNlIix7bW9udGhzOiJvxJHEkWFqYWdlbcOhbm51X2d1b3Z2YW3DoW5udV9uanVrxI1hbcOhbm51X2N1b8WLb23DoW5udV9taWVzc2Vtw6FubnVfZ2Vhc3NlbcOhbm51X3N1b2lkbmVtw6FubnVfYm9yZ2Vtw6FubnVfxI1ha8SNYW3DoW5udV9nb2xnZ290bcOhbm51X3Nrw6FibWFtw6FubnVfanVvdmxhbcOhbm51Ii5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiJvxJHEkWpfZ3Vvdl9uanVrX2N1b19taWVzX2dlYXNfc3VvaV9ib3JnX8SNYWvEjV9nb2xnX3Nrw6FiX2p1b3YiLnNwbGl0KCJfIiksd2Vla2RheXM6InNvdG5hYmVhaXZpX3Z1b3Nzw6FyZ2FfbWHFi8WLZWLDoXJnYV9nYXNrYXZhaGtrdV9kdW9yYXN0YXRfYmVhcmphZGF0X2zDoXZ2YXJkYXQiLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoic290bl92dW9zX21hxYtfZ2Fza19kdW9yX2JlYXJfbMOhdiIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoic192X21fZ19kX2JfTCIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJERC5NTS5ZWVlZIixMTDoiTU1NTSBELiBbYi5dIFlZWVkiLExMTDoiTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0iLExMTEw6ImRkZGQsIE1NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltvdG5lIHRpXSBMVCIsbmV4dERheToiW2lodHRpbiB0aV0gTFQiLG5leHRXZWVrOiJkZGRkIFt0aV0gTFQiLGxhc3REYXk6Iltpa3RlIHRpXSBMVCIsbGFzdFdlZWs6IltvdmRkaXRdIGRkZGQgW3RpXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToiJXMgZ2Vhxb5lcyIscGFzdDoibWHFi2l0ICVzIixzOiJtb2FkZGUgc2VrdW5kZGF0IixtOiJva3RhIG1pbnVodGEiLG1tOiIlZCBtaW51aHRhdCIsaDoib2t0YSBkaWltbXUiLGhoOiIlZCBkaWltbXV0IixkOiJva3RhIGJlYWl2aSIsZGQ6IiVkIGJlYWl2dml0IixNOiJva3RhIG3DoW5udSIsTU06IiVkIG3DoW51dCIseToib2t0YSBqYWhraSIseXk6IiVkIGphZ2l0In0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9XC4vLG9yZGluYWw6IiVkLiIsd2Vlazp7ZG93OjEsZG95OjR9fSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLGkpeyFmdW5jdGlvbih0LGUpe2UoaSgzNikpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgZT10LmRlZmluZUxvY2FsZSgic2kiLHttb250aHM6IuC2ouC2seC3gOC3j+C2u+C3kl/gtrTgt5ngtrbgtrvgt4Dgt4/gtrvgt5Jf4La44LeP4La74LeK4Lat4LeUX+C2heC2tOC3iuKAjeC2u+C3muC2veC3il/gtrjgt5Dgtrrgt5Jf4Lai4LeW4Lax4LeSX+C2ouC3luC2veC3kl/gtoXgtpzgt53gt4Pgt4rgtq3gt5Rf4LeD4LeQ4La04LeK4Lat4LeQ4La44LeK4La24La74LeKX+C2lOC2muC3iuC2reC3neC2tuC2u+C3il/gtrHgt5zgt4Dgt5Dgtrjgt4rgtrbgtrvgt4pf4Lav4LeZ4LeD4LeQ4La44LeK4La24La74LeKIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiLgtqLgtrFf4La04LeZ4La2X+C2uOC3j+C2u+C3il/gtoXgtrTgt4pf4La44LeQ4La64LeSX+C2ouC3luC2seC3kl/gtqLgt5bgtr3gt5Jf4LaF4Lac4LedX+C3g+C3kOC2tOC3il/gtpTgtprgt4pf4Lax4Lec4LeA4LeQX+C2r+C3meC3g+C3kCIuc3BsaXQoIl8iKSx3ZWVrZGF5czoi4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IuC2ieC2u+C3kl/gt4PgtrPgt5Rf4LaF4LafX+C2tuC2r+C3j1/gtrbgt4rigI3gtrvgt4Rf4LeD4LeS4Laa4LeUX+C3g+C3meC2sSIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoi4LaJX+C3g1/gtoVf4La2X+C2tuC3iuKAjeC2u1/gt4Pgt5Jf4LeD4LeZIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiYSBoOm1tIixMVFM6ImEgaDptbTpzcyIsTDoiWVlZWS9NTS9ERCIsTEw6IllZWVkgTU1NTSBEIixMTEw6IllZWVkgTU1NTSBELCBhIGg6bW0iLExMTEw6IllZWVkgTU1NTSBEIFvgt4Dgt5DgtrHgt5JdIGRkZGQsIGEgaDptbTpzcyJ9LGNhbGVuZGFyOntzYW1lRGF5OiJb4LaF4LavXSBMVFvgtqddIixuZXh0RGF5OiJb4LeE4LeZ4LanXSBMVFvgtqddIixuZXh0V2VlazoiZGRkZCBMVFvgtqddIixsYXN0RGF5OiJb4LaK4La64LeaXSBMVFvgtqddIixsYXN0V2VlazoiW+C2tOC3g+C3lOC2nOC3kuC2ul0gZGRkZCBMVFvgtqddIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiIlc+C2muC3kuC2seC3iiIscGFzdDoiJXPgtprgtqcg4La04LeZ4La7IixzOiLgtq3gtq3gt4rgtrTgtrsg4Laa4LeS4LeE4LeS4La04La6IixtOiLgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5Tgt4AiLG1tOiLgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5QgJWQiLGg6IuC2tOC3kOC2uiIsaGg6IuC2tOC3kOC2uiAlZCIsZDoi4Lav4LeS4Lax4La6IixkZDoi4Lav4LeS4LaxICVkIixNOiLgtrjgt4/gt4PgtroiLE1NOiLgtrjgt4/gt4MgJWQiLHk6IuC3gOC3g+C2uyIseXk6IuC3gOC3g+C2uyAlZCJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfSDgt4Dgt5DgtrHgt5IvLG9yZGluYWw6ZnVuY3Rpb24odCl7cmV0dXJuIHQrIiDgt4Dgt5DgtrHgt5IifSxtZXJpZGllbVBhcnNlOi/gtrTgt5ngtrsg4LeA4La74LeUfOC2tOC3g+C3iiDgt4Dgtrvgt5R84La04LeZLuC3gHzgtrQu4LeALi8saXNQTTpmdW5jdGlvbih0KXtyZXR1cm4i4La0LuC3gC4iPT09dHx8IuC2tOC3g+C3iiDgt4Dgtrvgt5QiPT09dH0sbWVyaWRpZW06ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0PjExP2k/IuC2tC7gt4AuIjoi4La04LeD4LeKIOC3gOC2u+C3lCI6aT8i4La04LeZLuC3gC4iOiLgtrTgt5ngtrsg4LeA4La74LeUIn19KTtyZXR1cm4gZX0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGUodCl7cmV0dXJuIHQ+MSYmdDw1fWZ1bmN0aW9uIGkodCxpLG4scil7dmFyIHM9dCsiICI7c3dpdGNoKG4pe2Nhc2UicyI6cmV0dXJuIGl8fHI/InDDoXIgc2Vrw7puZCI6InDDoXIgc2VrdW5kYW1pIjtjYXNlIm0iOnJldHVybiBpPyJtaW7DunRhIjpyPyJtaW7DunR1IjoibWluw7p0b3UiO2Nhc2UibW0iOnJldHVybiBpfHxyP3MrKGUodCk/Im1pbsO6dHkiOiJtaW7DunQiKTpzKyJtaW7DunRhbWkiO2Nhc2UiaCI6cmV0dXJuIGk/ImhvZGluYSI6cj8iaG9kaW51IjoiaG9kaW5vdSI7Y2FzZSJoaCI6cmV0dXJuIGl8fHI/cysoZSh0KT8iaG9kaW55IjoiaG9kw61uIik6cysiaG9kaW5hbWkiO2Nhc2UiZCI6cmV0dXJuIGl8fHI/ImRlxYgiOiJkxYhvbSI7Y2FzZSJkZCI6cmV0dXJuIGl8fHI/cysoZSh0KT8iZG5pIjoiZG7DrSIpOnMrImTFiGFtaSI7Y2FzZSJNIjpyZXR1cm4gaXx8cj8ibWVzaWFjIjoibWVzaWFjb20iO2Nhc2UiTU0iOnJldHVybiBpfHxyP3MrKGUodCk/Im1lc2lhY2UiOiJtZXNpYWNvdiIpOnMrIm1lc2lhY21pIjtjYXNlInkiOnJldHVybiBpfHxyPyJyb2siOiJyb2tvbSI7Y2FzZSJ5eSI6cmV0dXJuIGl8fHI/cysoZSh0KT8icm9reSI6InJva292Iik6cysicm9rbWkifX12YXIgbj0iamFudcOhcl9mZWJydcOhcl9tYXJlY19hcHLDrWxfbcOhal9qw7puX2rDumxfYXVndXN0X3NlcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlciIuc3BsaXQoIl8iKSxyPSJqYW5fZmViX21hcl9hcHJfbcOhal9qw7puX2rDumxfYXVnX3NlcF9va3Rfbm92X2RlYyIuc3BsaXQoIl8iKSxzPXQuZGVmaW5lTG9jYWxlKCJzayIse21vbnRoczpuLG1vbnRoc1Nob3J0OnIsd2Vla2RheXM6Im5lZGXEvmFfcG9uZGVsb2tfdXRvcm9rX3N0cmVkYV/FoXR2cnRva19waWF0b2tfc29ib3RhIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6Im5lX3BvX3V0X3N0X8WhdF9waV9zbyIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoibmVfcG9fdXRfc3RfxaF0X3BpX3NvIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSDptbSIsTFRTOiJIOm1tOnNzIixMOiJERC5NTS5ZWVlZIixMTDoiRC4gTU1NTSBZWVlZIixMTEw6IkQuIE1NTU0gWVlZWSBIOm1tIixMTExMOiJkZGRkIEQuIE1NTU0gWVlZWSBIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltkbmVzIG9dIExUIixuZXh0RGF5OiJbemFqdHJhIG9dIExUIixuZXh0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuIlt2IG5lZGXEvnUgb10gTFQiO2Nhc2UgMTpjYXNlIDI6cmV0dXJuIlt2XSBkZGRkIFtvXSBMVCI7Y2FzZSAzOnJldHVybiJbdiBzdHJlZHUgb10gTFQiO2Nhc2UgNDpyZXR1cm4iW3ZvIMWhdHZydG9rIG9dIExUIjtjYXNlIDU6cmV0dXJuIlt2IHBpYXRvayBvXSBMVCI7Y2FzZSA2OnJldHVybiJbdiBzb2JvdHUgb10gTFQifX0sbGFzdERheToiW3bEjWVyYSBvXSBMVCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVybiJbbWludWzDuiBuZWRlxL51IG9dIExUIjtjYXNlIDE6Y2FzZSAyOnJldHVybiJbbWludWzDvV0gZGRkZCBbb10gTFQiO2Nhc2UgMzpyZXR1cm4iW21pbnVsw7ogc3RyZWR1IG9dIExUIjtjYXNlIDQ6Y2FzZSA1OnJldHVybiJbbWludWzDvV0gZGRkZCBbb10gTFQiO2Nhc2UgNjpyZXR1cm4iW21pbnVsw7ogc29ib3R1IG9dIExUIn19LHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6InphICVzIixwYXN0OiJwcmVkICVzIixzOmksbTppLG1tOmksaDppLGhoOmksZDppLGRkOmksTTppLE1NOmkseTppLHl5Oml9LG9yZGluYWxQYXJzZTovXGR7MSwyfVwuLyxvcmRpbmFsOiIlZC4iLHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBzfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gZSh0LGUsaSxuKXt2YXIgcj10KyIgIjtzd2l0Y2goaSl7Y2FzZSJzIjpyZXR1cm4gZXx8bj8ibmVrYWogc2VrdW5kIjoibmVrYWogc2VrdW5kYW1pIjtjYXNlIm0iOnJldHVybiBlPyJlbmEgbWludXRhIjoiZW5vIG1pbnV0byI7Y2FzZSJtbSI6cmV0dXJuIHIrPTE9PT10P2U/Im1pbnV0YSI6Im1pbnV0byI6Mj09PXQ/ZXx8bj8ibWludXRpIjoibWludXRhbWEiOnQ8NT9lfHxuPyJtaW51dGUiOiJtaW51dGFtaSI6ZXx8bj8ibWludXQiOiJtaW51dGFtaSI7Y2FzZSJoIjpyZXR1cm4gZT8iZW5hIHVyYSI6ImVubyB1cm8iO2Nhc2UiaGgiOnJldHVybiByKz0xPT09dD9lPyJ1cmEiOiJ1cm8iOjI9PT10P2V8fG4/InVyaSI6InVyYW1hIjp0PDU/ZXx8bj8idXJlIjoidXJhbWkiOmV8fG4/InVyIjoidXJhbWkiO2Nhc2UiZCI6cmV0dXJuIGV8fG4/ImVuIGRhbiI6ImVuaW0gZG5lbSI7Y2FzZSJkZCI6cmV0dXJuIHIrPTE9PT10P2V8fG4/ImRhbiI6ImRuZW0iOjI9PT10P2V8fG4/ImRuaSI6ImRuZXZvbWEiOmV8fG4/ImRuaSI6ImRuZXZpIjtjYXNlIk0iOnJldHVybiBlfHxuPyJlbiBtZXNlYyI6ImVuaW0gbWVzZWNlbSI7Y2FzZSJNTSI6cmV0dXJuIHIrPTE9PT10P2V8fG4/Im1lc2VjIjoibWVzZWNlbSI6Mj09PXQ/ZXx8bj8ibWVzZWNhIjoibWVzZWNlbWEiOnQ8NT9lfHxuPyJtZXNlY2UiOiJtZXNlY2kiOmV8fG4/Im1lc2VjZXYiOiJtZXNlY2kiO2Nhc2UieSI6cmV0dXJuIGV8fG4/ImVubyBsZXRvIjoiZW5pbSBsZXRvbSI7Y2FzZSJ5eSI6cmV0dXJuIHIrPTE9PT10P2V8fG4/ImxldG8iOiJsZXRvbSI6Mj09PXQ/ZXx8bj8ibGV0aSI6ImxldG9tYSI6dDw1P2V8fG4/ImxldGEiOiJsZXRpIjplfHxuPyJsZXQiOiJsZXRpIn19dmFyIGk9dC5kZWZpbmVMb2NhbGUoInNsIix7bW9udGhzOiJqYW51YXJfZmVicnVhcl9tYXJlY19hcHJpbF9tYWpfanVuaWpfanVsaWpfYXZndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiJqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLiIuc3BsaXQoIl8iKSx3ZWVrZGF5czoibmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX8SNZXRydGVrX3BldGVrX3NvYm90YSIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJuZWQuX3Bvbi5fdG9yLl9zcmUuX8SNZXQuX3BldC5fc29iLiIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoibmVfcG9fdG9fc3JfxI1lX3BlX3NvIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSDptbSIsTFRTOiJIOm1tOnNzIixMOiJERC4gTU0uIFlZWVkiLExMOiJELiBNTU1NIFlZWVkiLExMTDoiRC4gTU1NTSBZWVlZIEg6bW0iLExMTEw6ImRkZGQsIEQuIE1NTU0gWVlZWSBIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltkYW5lcyBvYl0gTFQiLG5leHREYXk6IltqdXRyaSBvYl0gTFQiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm4iW3ZdIFtuZWRlbGpvXSBbb2JdIExUIjtjYXNlIDM6cmV0dXJuIlt2XSBbc3JlZG9dIFtvYl0gTFQiO2Nhc2UgNjpyZXR1cm4iW3ZdIFtzb2JvdG9dIFtvYl0gTFQiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm4iW3ZdIGRkZGQgW29iXSBMVCJ9fSxsYXN0RGF5OiJbdsSNZXJhaiBvYl0gTFQiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm4iW3ByZWrFoW5qb10gW25lZGVsam9dIFtvYl0gTFQiO2Nhc2UgMzpyZXR1cm4iW3ByZWrFoW5qb10gW3NyZWRvXSBbb2JdIExUIjtjYXNlIDY6cmV0dXJuIltwcmVqxaFuam9dIFtzb2JvdG9dIFtvYl0gTFQiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm4iW3ByZWrFoW5qaV0gZGRkZCBbb2JdIExUIn19LHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6IsSNZXogJXMiLHBhc3Q6InByZWQgJXMiLHM6ZSxtOmUsbW06ZSxoOmUsaGg6ZSxkOmUsZGQ6ZSxNOmUsTU06ZSx5OmUseXk6ZX0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9XC4vLG9yZGluYWw6IiVkLiIsd2Vlazp7ZG93OjEsZG95Ojd9fSk7cmV0dXJuIGl9KX0sZnVuY3Rpb24odCxlLGkpeyFmdW5jdGlvbih0LGUpe2UoaSgzNikpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgZT10LmRlZmluZUxvY2FsZSgic3EiLHttb250aHM6IkphbmFyX1Noa3VydF9NYXJzX1ByaWxsX01hal9RZXJzaG9yX0tvcnJpa19HdXNodF9TaHRhdG9yX1RldG9yX07Dq250b3JfRGhqZXRvciIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiSmFuX1Noa19NYXJfUHJpX01hal9RZXJfS29yX0d1c19TaHRfVGV0X07Dq25fRGhqIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiJFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6siLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoiRGllX0jDq25fTWFyX03Dq3JfRW5qX1ByZV9TaHQiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IkRfSF9NYV9Nw6tfRV9QX1NoIi5zcGxpdCgiXyIpLG1lcmlkaWVtUGFyc2U6L1BEfE1ELyxpc1BNOmZ1bmN0aW9uKHQpe3JldHVybiJNIj09PXQuY2hhckF0KDApfSxtZXJpZGllbTpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQ8MTI/IlBEIjoiTUQifSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJERC9NTS9ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltTb3QgbsOrXSBMVCIsbmV4dERheToiW05lc8OrciBuw6tdIExUIixuZXh0V2VlazoiZGRkZCBbbsOrXSBMVCIsbGFzdERheToiW0RqZSBuw6tdIExUIixsYXN0V2VlazoiZGRkZCBbZSBrYWx1YXIgbsOrXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToibsOrICVzIixwYXN0OiIlcyBtw6sgcGFyw6siLHM6ImRpc2Egc2Vrb25kYSIsbToibmrDqyBtaW51dMOrIixtbToiJWQgbWludXRhIixoOiJuasOrIG9yw6siLGhoOiIlZCBvcsOrIixkOiJuasOrIGRpdMOrIixkZDoiJWQgZGl0w6siLE06Im5qw6sgbXVhaiIsTU06IiVkIG11YWoiLHk6Im5qw6sgdml0Iix5eToiJWQgdml0ZSJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfVwuLyxvcmRpbmFsOiIlZC4iLHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9e3dvcmRzOnttOlsiamVkYW4gbWludXQiLCJqZWRuZSBtaW51dGUiXSxtbTpbIm1pbnV0IiwibWludXRlIiwibWludXRhIl0saDpbImplZGFuIHNhdCIsImplZG5vZyBzYXRhIl0saGg6WyJzYXQiLCJzYXRhIiwic2F0aSJdLGRkOlsiZGFuIiwiZGFuYSIsImRhbmEiXSxNTTpbIm1lc2VjIiwibWVzZWNhIiwibWVzZWNpIl0seXk6WyJnb2RpbmEiLCJnb2RpbmUiLCJnb2RpbmEiXX0sY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTpmdW5jdGlvbih0LGUpe3JldHVybiAxPT09dD9lWzBdOnQ+PTImJnQ8PTQ/ZVsxXTplWzJdfSx0cmFuc2xhdGU6ZnVuY3Rpb24odCxpLG4pe3ZhciByPWUud29yZHNbbl07cmV0dXJuIDE9PT1uLmxlbmd0aD9pP3JbMF06clsxXTp0KyIgIitlLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UodCxyKX19LGk9dC5kZWZpbmVMb2NhbGUoInNyIix7bW9udGhzOlsiamFudWFyIiwiZmVicnVhciIsIm1hcnQiLCJhcHJpbCIsIm1haiIsImp1biIsImp1bCIsImF2Z3VzdCIsInNlcHRlbWJhciIsIm9rdG9iYXIiLCJub3ZlbWJhciIsImRlY2VtYmFyIl0sbW9udGhzU2hvcnQ6WyJqYW4uIiwiZmViLiIsIm1hci4iLCJhcHIuIiwibWFqIiwianVuIiwianVsIiwiYXZnLiIsInNlcC4iLCJva3QuIiwibm92LiIsImRlYy4iXSx3ZWVrZGF5czpbIm5lZGVsamEiLCJwb25lZGVsamFrIiwidXRvcmFrIiwic3JlZGEiLCLEjWV0dnJ0YWsiLCJwZXRhayIsInN1Ym90YSJdLHdlZWtkYXlzU2hvcnQ6WyJuZWQuIiwicG9uLiIsInV0by4iLCJzcmUuIiwixI1ldC4iLCJwZXQuIiwic3ViLiJdLHdlZWtkYXlzTWluOlsibmUiLCJwbyIsInV0Iiwic3IiLCLEjWUiLCJwZSIsInN1Il0sbG9uZ0RhdGVGb3JtYXQ6e0xUOiJIOm1tIixMVFM6Ikg6bW06c3MiLEw6IkRELiBNTS4gWVlZWSIsTEw6IkQuIE1NTU0gWVlZWSIsTExMOiJELiBNTU1NIFlZWVkgSDptbSIsTExMTDoiZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW2RhbmFzIHVdIExUIixuZXh0RGF5OiJbc3V0cmEgdV0gTFQiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm4iW3VdIFtuZWRlbGp1XSBbdV0gTFQiO2Nhc2UgMzpyZXR1cm4iW3VdIFtzcmVkdV0gW3VdIExUIjtjYXNlIDY6cmV0dXJuIlt1XSBbc3Vib3R1XSBbdV0gTFQiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm4iW3VdIGRkZGQgW3VdIExUIn19LGxhc3REYXk6IltqdcSNZSB1XSBMVCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXt2YXIgdD1bIltwcm/FoWxlXSBbbmVkZWxqZV0gW3VdIExUIiwiW3Byb8WhbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUIiwiW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQiLCJbcHJvxaFsZV0gW3NyZWRlXSBbdV0gTFQiLCJbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCIsIltwcm/FoWxvZ10gW3BldGthXSBbdV0gTFQiLCJbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUIl07cmV0dXJuIHRbdGhpcy5kYXkoKV19LHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6InphICVzIixwYXN0OiJwcmUgJXMiLHM6Im5la29saWtvIHNla3VuZGkiLG06ZS50cmFuc2xhdGUsbW06ZS50cmFuc2xhdGUsaDplLnRyYW5zbGF0ZSxoaDplLnRyYW5zbGF0ZSxkOiJkYW4iLGRkOmUudHJhbnNsYXRlLE06Im1lc2VjIixNTTplLnRyYW5zbGF0ZSx5OiJnb2RpbnUiLHl5OmUudHJhbnNsYXRlfSxvcmRpbmFsUGFyc2U6L1xkezEsMn1cLi8sb3JkaW5hbDoiJWQuIix3ZWVrOntkb3c6MSxkb3k6N319KTtyZXR1cm4gaX0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXt3b3Jkczp7bTpbItGY0LXQtNCw0L0g0LzQuNC90YPRgiIsItGY0LXQtNC90LUg0LzQuNC90YPRgtC1Il0sbW06WyLQvNC40L3Rg9GCIiwi0LzQuNC90YPRgtC1Iiwi0LzQuNC90YPRgtCwIl0saDpbItGY0LXQtNCw0L0g0YHQsNGCIiwi0ZjQtdC00L3QvtCzINGB0LDRgtCwIl0saGg6WyLRgdCw0YIiLCLRgdCw0YLQsCIsItGB0LDRgtC4Il0sZGQ6WyLQtNCw0L0iLCLQtNCw0L3QsCIsItC00LDQvdCwIl0sTU06WyLQvNC10YHQtdGGIiwi0LzQtdGB0LXRhtCwIiwi0LzQtdGB0LXRhtC4Il0seXk6WyLQs9C+0LTQuNC90LAiLCLQs9C+0LTQuNC90LUiLCLQs9C+0LTQuNC90LAiXX0sY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTpmdW5jdGlvbih0LGUpe3JldHVybiAxPT09dD9lWzBdOnQ+PTImJnQ8PTQ/ZVsxXTplWzJdfSx0cmFuc2xhdGU6ZnVuY3Rpb24odCxpLG4pe3ZhciByPWUud29yZHNbbl07cmV0dXJuIDE9PT1uLmxlbmd0aD9pP3JbMF06clsxXTp0KyIgIitlLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UodCxyKX19LGk9dC5kZWZpbmVMb2NhbGUoInNyLWN5cmwiLHttb250aHM6WyLRmNCw0L3Rg9Cw0YAiLCLRhNC10LHRgNGD0LDRgCIsItC80LDRgNGCIiwi0LDQv9GA0LjQuyIsItC80LDRmCIsItGY0YPQvSIsItGY0YPQuyIsItCw0LLQs9GD0YHRgiIsItGB0LXQv9GC0LXQvNCx0LDRgCIsItC+0LrRgtC+0LHQsNGAIiwi0L3QvtCy0LXQvNCx0LDRgCIsItC00LXRhtC10LzQsdCw0YAiXSxtb250aHNTaG9ydDpbItGY0LDQvS4iLCLRhNC10LEuIiwi0LzQsNGALiIsItCw0L/RgC4iLCLQvNCw0ZgiLCLRmNGD0L0iLCLRmNGD0LsiLCLQsNCy0LMuIiwi0YHQtdC/LiIsItC+0LrRgi4iLCLQvdC+0LIuIiwi0LTQtdGGLiJdLHdlZWtkYXlzOlsi0L3QtdC00LXRmdCwIiwi0L/QvtC90LXQtNC10ZnQsNC6Iiwi0YPRgtC+0YDQsNC6Iiwi0YHRgNC10LTQsCIsItGH0LXRgtCy0YDRgtCw0LoiLCLQv9C10YLQsNC6Iiwi0YHRg9Cx0L7RgtCwIl0sd2Vla2RheXNTaG9ydDpbItC90LXQtC4iLCLQv9C+0L0uIiwi0YPRgtC+LiIsItGB0YDQtS4iLCLRh9C10YIuIiwi0L/QtdGCLiIsItGB0YPQsS4iXSx3ZWVrZGF5c01pbjpbItC90LUiLCLQv9C+Iiwi0YPRgiIsItGB0YAiLCLRh9C1Iiwi0L/QtSIsItGB0YMiXSxsb25nRGF0ZUZvcm1hdDp7TFQ6Ikg6bW0iLExUUzoiSDptbTpzcyIsTDoiREQuIE1NLiBZWVlZIixMTDoiRC4gTU1NTSBZWVlZIixMTEw6IkQuIE1NTU0gWVlZWSBIOm1tIixMTExMOiJkZGRkLCBELiBNTU1NIFlZWVkgSDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJb0LTQsNC90LDRgSDRg10gTFQiLG5leHREYXk6IlvRgdGD0YLRgNCwINGDXSBMVCIsbmV4dFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVybiJb0YNdIFvQvdC10LTQtdGZ0YNdIFvRg10gTFQiO2Nhc2UgMzpyZXR1cm4iW9GDXSBb0YHRgNC10LTRg10gW9GDXSBMVCI7Y2FzZSA2OnJldHVybiJb0YNdIFvRgdGD0LHQvtGC0YNdIFvRg10gTFQiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm4iW9GDXSBkZGRkIFvRg10gTFQifX0sbGFzdERheToiW9GY0YPRh9C1INGDXSBMVCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXt2YXIgdD1bIlvQv9GA0L7RiNC70LVdIFvQvdC10LTQtdGZ0LVdIFvRg10gTFQiLCJb0L/RgNC+0YjQu9C+0LNdIFvQv9C+0L3QtdC00LXRmdC60LBdIFvRg10gTFQiLCJb0L/RgNC+0YjQu9C+0LNdIFvRg9GC0L7RgNC60LBdIFvRg10gTFQiLCJb0L/RgNC+0YjQu9C1XSBb0YHRgNC10LTQtV0gW9GDXSBMVCIsIlvQv9GA0L7RiNC70L7Qs10gW9GH0LXRgtCy0YDRgtC60LBdIFvRg10gTFQiLCJb0L/RgNC+0YjQu9C+0LNdIFvQv9C10YLQutCwXSBb0YNdIExUIiwiW9C/0YDQvtGI0LvQtV0gW9GB0YPQsdC+0YLQtV0gW9GDXSBMVCJdO3JldHVybiB0W3RoaXMuZGF5KCldfSxzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiLQt9CwICVzIixwYXN0OiLQv9GA0LUgJXMiLHM6ItC90LXQutC+0LvQuNC60L4g0YHQtdC60YPQvdC00LgiLG06ZS50cmFuc2xhdGUsbW06ZS50cmFuc2xhdGUsaDplLnRyYW5zbGF0ZSxoaDplLnRyYW5zbGF0ZSxkOiLQtNCw0L0iLGRkOmUudHJhbnNsYXRlLE06ItC80LXRgdC10YYiLE1NOmUudHJhbnNsYXRlLHk6ItCz0L7QtNC40L3RgyIseXk6ZS50cmFuc2xhdGV9LG9yZGluYWxQYXJzZTovXGR7MSwyfVwuLyxvcmRpbmFsOiIlZC4iLHdlZWs6e2RvdzoxLGRveTo3fX0pO3JldHVybiBpfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInN2Iix7bW9udGhzOiJqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiJqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYyIuc3BsaXQoIl8iKSx3ZWVrZGF5czoic8O2bmRhZ19tw6VuZGFnX3Rpc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO2cmRhZyIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnIiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46InPDtl9tw6VfdGlfb25fdG9fZnJfbMO2Ii5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IllZWVktTU0tREQiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSBISDptbSIsTExMTDoiZGRkZCBEIE1NTU0gWVlZWSBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJbSWRhZ10gTFQiLG5leHREYXk6IltJbW9yZ29uXSBMVCIsbGFzdERheToiW0lnw6VyXSBMVCIsbmV4dFdlZWs6IltQw6VdIGRkZGQgTFQiLGxhc3RXZWVrOiJbSV0gZGRkZFtzXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToib20gJXMiLHBhc3Q6ImbDtnIgJXMgc2VkYW4iLHM6Im7DpWdyYSBzZWt1bmRlciIsbToiZW4gbWludXQiLG1tOiIlZCBtaW51dGVyIixoOiJlbiB0aW1tZSIsaGg6IiVkIHRpbW1hciIsZDoiZW4gZGFnIixkZDoiJWQgZGFnYXIiLE06ImVuIG3DpW5hZCIsTU06IiVkIG3DpW5hZGVyIix5OiJldHQgw6VyIix5eToiJWQgw6VyIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9KGV8YSkvLG9yZGluYWw6ZnVuY3Rpb24odCl7dmFyIGU9dCUxMCxpPTE9PT1+fih0JTEwMC8xMCk/ImUiOjE9PT1lPyJhIjoyPT09ZT8iYSI6ImUiO3JldHVybiB0K2l9LHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInN3Iix7bW9udGhzOiJKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYSIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX0Fnb19TZXBfT2t0X05vdl9EZXMiLnNwbGl0KCJfIiksd2Vla2RheXM6Ikp1bWFwaWxpX0p1bWF0YXR1X0p1bWFubmVfSnVtYXRhbm9fQWxoYW1pc2lfSWp1bWFhX0p1bWFtb3NpIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IkpwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3MiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IkoyX0ozX0o0X0o1X0FsX0lqX0oxIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkRELk1NLllZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSBISDptbSIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW2xlbyBzYWFdIExUIixuZXh0RGF5OiJba2VzaG8gc2FhXSBMVCIsbmV4dFdlZWs6Ilt3aWtpIGlqYXlvXSBkZGRkIFtzYWF0XSBMVCIsbGFzdERheToiW2phbmFdIExUIixsYXN0V2VlazoiW3dpa2kgaWxpeW9waXRhXSBkZGRkIFtzYWF0XSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToiJXMgYmFhZGF5ZSIscGFzdDoidG9rZWEgJXMiLHM6ImhpdmkgcHVuZGUiLG06ImRha2lrYSBtb2phIixtbToiZGFraWthICVkIixoOiJzYWEgbGltb2phIixoaDoibWFzYWEgJWQiLGQ6InNpa3UgbW9qYSIsZGQ6Im1hc2lrdSAlZCIsTToibXdlemkgbW1vamEiLE1NOiJtaWV6aSAlZCIseToibXdha2EgbW1vamEiLHl5OiJtaWFrYSAlZCJ9LHdlZWs6e2RvdzoxLGRveTo3fX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9ezE6IuCvpyIsMjoi4K+oIiwzOiLgr6kiLDQ6IuCvqiIsNToi4K+rIiw2OiLgr6wiLDc6IuCvrSIsODoi4K+uIiw5OiLgr68iLDA6IuCvpiJ9LGk9eyLgr6ciOiIxIiwi4K+oIjoiMiIsIuCvqSI6IjMiLCLgr6oiOiI0Iiwi4K+rIjoiNSIsIuCvrCI6IjYiLCLgr60iOiI3Iiwi4K+uIjoiOCIsIuCvryI6IjkiLCLgr6YiOiIwIn0sbj10LmRlZmluZUxvY2FsZSgidGEiLHttb250aHM6IuCunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiLgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjSIuc3BsaXQoIl8iKSx3ZWVrZGF5czoi4K6e4K6+4K6v4K6/4K6x4K+N4K6x4K+B4K6V4K+N4K6V4K6/4K604K6u4K+IX+CupOCuv+CumeCvjeCuleCun+CvjeCuleCuv+CutOCuruCviF/grprgr4bgrrXgr43grrXgrr7grq/gr43grpXgrr/grrTgrq7gr4hf4K6q4K+B4K6k4K6p4K+N4K6V4K6/4K604K6u4K+IX+CuteCuv+Cur+CuvuCutOCuleCvjeCuleCuv+CutOCuruCviF/grrXgr4bgrrPgr43grrPgrr/grpXgr43grpXgrr/grrTgrq7gr4hf4K6a4K6p4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IuCunuCuvuCur+Cuv+CuseCvgV/grqTgrr/grpngr43grpXgrrPgr41f4K6a4K+G4K614K+N4K614K6+4K6v4K+NX+CuquCvgeCupOCuqeCvjV/grrXgrr/grq/grr7grrTgrqngr41f4K614K+G4K6z4K+N4K6z4K6/X+CumuCuqeCuvyIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoi4K6e4K6+X+CupOCuv1/grprgr4Zf4K6q4K+BX+CuteCuv1/grrXgr4Zf4K6aIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkREL01NL1lZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSwgSEg6bW0iLExMTEw6ImRkZGQsIEQgTU1NTSBZWVlZLCBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJb4K6H4K6p4K+N4K6x4K+BXSBMVCIsbmV4dERheToiW+CuqOCuvuCus+CviF0gTFQiLG5leHRXZWVrOiJkZGRkLCBMVCIsbGFzdERheToiW+CuqOCvh+CuseCvjeCuseCvgV0gTFQiLGxhc3RXZWVrOiJb4K6V4K6f4K6o4K+N4K6kIOCuteCuvuCusOCuruCvjV0gZGRkZCwgTFQiLHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6IiVzIOCuh+CusuCvjSIscGFzdDoiJXMg4K6u4K+B4K6p4K+NIixzOiLgrpLgrrDgr4Eg4K6a4K6/4K6yIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjSIsbToi4K6S4K6w4K+BIOCuqOCuv+CuruCuv+Cun+CuruCvjSIsbW06IiVkIOCuqOCuv+CuruCuv+Cun+CumeCvjeCuleCus+CvjSIsaDoi4K6S4K6w4K+BIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40iLGhoOiIlZCDgrq7grqPgrr8g4K6o4K+H4K6w4K6u4K+NIixkOiLgrpLgrrDgr4Eg4K6o4K6+4K6z4K+NIixkZDoiJWQg4K6o4K6+4K6f4K+N4K6V4K6z4K+NIixNOiLgrpLgrrDgr4Eg4K6u4K6+4K6k4K6u4K+NIixNTToiJWQg4K6u4K6+4K6k4K6Z4K+N4K6V4K6z4K+NIix5OiLgrpLgrrDgr4Eg4K614K6w4K+B4K6f4K6u4K+NIix5eToiJWQg4K6G4K6j4K+N4K6f4K+B4K6V4K6z4K+NIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ94K614K6k4K+BLyxvcmRpbmFsOmZ1bmN0aW9uKHQpe3JldHVybiB0KyLgrrXgrqTgr4EifSxwcmVwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9b4K+n4K+o4K+p4K+q4K+r4K+s4K+t4K+u4K+v4K+mXS9nLGZ1bmN0aW9uKHQpe3JldHVybiBpW3RdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvXGQvZyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pfSxtZXJpZGllbVBhcnNlOi/grq/grr7grq7grq7gr4184K614K+I4K6V4K6x4K+IfOCuleCuvuCusuCviHzgrqjgrqPgr43grqrgrpXgrrLgr4184K6O4K6x4K+N4K6q4K6+4K6f4K+BfOCuruCuvuCusuCviC8sbWVyaWRpZW06ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0PDI/IiDgrq/grr7grq7grq7gr40iOnQ8Nj8iIOCuteCviOCuleCuseCviCI6dDwxMD8iIOCuleCuvuCusuCviCI6dDwxND8iIOCuqOCuo+CvjeCuquCuleCusuCvjSI6dDwxOD8iIOCujuCuseCvjeCuquCuvuCun+CvgSI6dDwyMj8iIOCuruCuvuCusuCviCI6IiDgrq/grr7grq7grq7gr40ifSxtZXJpZGllbUhvdXI6ZnVuY3Rpb24odCxlKXtyZXR1cm4gMTI9PT10JiYodD0wKSwi4K6v4K6+4K6u4K6u4K+NIj09PWU/dDwyP3Q6dCsxMjoi4K614K+I4K6V4K6x4K+IIj09PWV8fCLgrpXgrr7grrLgr4giPT09ZT90OiLgrqjgrqPgr43grqrgrpXgrrLgr40iPT09ZSYmdD49MTA/dDp0KzEyfSx3ZWVrOntkb3c6MCxkb3k6Nn19KTtyZXR1cm4gbn0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXQuZGVmaW5lTG9jYWxlKCJ0ZSIse21vbnRoczoi4LCc4LCo4LC14LCw4LC/X+Cwq+Cwv+CwrOCxjeCwsOCwteCwsOCwv1/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/4LCy4LGNX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGC4LCy4LGG4LGWX+CwhuCwl+CwuOCxjeCwn+CxgV/gsLjgsYbgsKrgsY3gsJ/gsYbgsILgsKzgsLDgsY1f4LCF4LCV4LGN4LCf4LGL4LCs4LCw4LGNX+CwqOCwteCwguCwrOCwsOCxjV/gsKHgsL/gsLjgsYbgsILgsKzgsLDgsY0iLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6IuCwnOCwqC5f4LCr4LC/4LCs4LGN4LCwLl/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/Ll/gsK7gsYdf4LCc4LGC4LCo4LGNX+CwnOCxguCwsuCxhuCxll/gsIbgsJcuX+CwuOCxhuCwquCxjS5f4LCF4LCV4LGN4LCf4LGLLl/gsKjgsLUuX+CwoeCwv+CwuOCxhi4iLnNwbGl0KCJfIiksd2Vla2RheXM6IuCwhuCwpuCwv+CwteCwvuCwsOCwgl/gsLjgsYvgsK7gsLXgsL7gsLDgsIJf4LCu4LCC4LCX4LCz4LC14LC+4LCw4LCCX+CwrOCxgeCwp+CwteCwvuCwsOCwgl/gsJfgsYHgsLDgsYHgsLXgsL7gsLDgsIJf4LC24LGB4LCV4LGN4LCw4LC14LC+4LCw4LCCX+CwtuCwqOCwv+CwteCwvuCwsOCwgiIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiLgsIbgsKbgsL9f4LC44LGL4LCuX+CwruCwguCwl+Cws1/gsKzgsYHgsKdf4LCX4LGB4LCw4LGBX+CwtuCxgeCwleCxjeCwsF/gsLbgsKjgsL8iLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IuCwhl/gsLjgsYtf4LCu4LCCX+CwrOCxgV/gsJfgsYFf4LC24LGBX+CwtiIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkEgaDptbSIsTFRTOiJBIGg6bW06c3MiLEw6IkREL01NL1lZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSwgQSBoOm1tIixMTExMOiJkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IlvgsKjgsYfgsKHgsYFdIExUIixuZXh0RGF5OiJb4LCw4LGH4LCq4LGBXSBMVCIsbmV4dFdlZWs6ImRkZGQsIExUIixsYXN0RGF5OiJb4LCo4LC/4LCo4LGN4LCoXSBMVCIsbGFzdFdlZWs6IlvgsJfgsKRdIGRkZGQsIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiIlcyDgsLLgsYsiLHBhc3Q6IiVzIOCwleCxjeCwsOCwv+CwpOCwgiIsczoi4LCV4LGK4LCo4LGN4LCo4LC/IOCwleCxjeCwt+Cwo+CwvuCwsuCxgSIsbToi4LCS4LCVIOCwqOCwv+CwruCwv+Cwt+CwgiIsbW06IiVkIOCwqOCwv+CwruCwv+Cwt+CwvuCwsuCxgSIsaDoi4LCS4LCVIOCwl+CwguCwnyIsaGg6IiVkIOCwl+CwguCwn+CwsuCxgSIsZDoi4LCS4LCVIOCwsOCxi+CwnOCxgSIsZGQ6IiVkIOCwsOCxi+CwnOCxgeCwsuCxgSIsTToi4LCS4LCVIOCwqOCxhuCwsiIsTU06IiVkIOCwqOCxhuCwsuCwsuCxgSIseToi4LCS4LCVIOCwuOCwguCwteCwpOCxjeCwuOCwsOCwgiIseXk6IiVkIOCwuOCwguCwteCwpOCxjeCwuOCwsOCwvuCwsuCxgSJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfeCwtS8sb3JkaW5hbDoiJWTgsLUiLG1lcmlkaWVtUGFyc2U6L+CwsOCwvuCwpOCxjeCwsOCwv3zgsIngsKbgsK/gsIJ84LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCfOCwuOCwvuCwr+CwguCwpOCxjeCwsOCwgi8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDEyPT09dCYmKHQ9MCksIuCwsOCwvuCwpOCxjeCwsOCwvyI9PT1lP3Q8ND90OnQrMTI6IuCwieCwpuCwr+CwgiI9PT1lP3Q6IuCwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgiI9PT1lP3Q+PTEwP3Q6dCsxMjoi4LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCIj09PWU/dCsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdDw0PyLgsLDgsL7gsKTgsY3gsLDgsL8iOnQ8MTA/IuCwieCwpuCwr+CwgiI6dDwxNz8i4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCIjp0PDIwPyLgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIIiOiLgsLDgsL7gsKTgsY3gsLDgsL8ifSx3ZWVrOntkb3c6MCxkb3k6Nn19KTtyZXR1cm4gZX0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXQuZGVmaW5lTG9jYWxlKCJ0aCIse21vbnRoczoi4Lih4LiB4Lij4Liy4LiE4LihX+C4geC4uOC4oeC4oOC4suC4nuC4seC4meC4mOC5jF/guKHguLXguJnguLLguITguKFf4LmA4Lih4Lip4Liy4Lii4LiZX+C4nuC4pOC4qeC4oOC4suC4hOC4oV/guKHguLTguJbguLjguJnguLLguKLguJlf4LiB4Lij4LiB4LiO4Liy4LiE4LihX+C4quC4tOC4h+C4q+C4suC4hOC4oV/guIHguLHguJnguKLguLLguKLguJlf4LiV4Li44Lil4Liy4LiE4LihX+C4nuC4pOC4qOC4iOC4tOC4geC4suC4ouC4mV/guJjguLHguJnguKfguLLguITguKEiLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6IuC4oeC4geC4o+C4sl/guIHguLjguKHguKDguLJf4Lih4Li14LiZ4LiyX+C5gOC4oeC4qeC4sl/guJ7guKTguKnguKDguLJf4Lih4Li04LiW4Li44LiZ4LiyX+C4geC4o+C4geC4juC4sl/guKrguLTguIfguKvguLJf4LiB4Lix4LiZ4Lii4LiyX+C4leC4uOC4peC4sl/guJ7guKTguKjguIjguLTguIHguLJf4LiY4Lix4LiZ4Lin4LiyIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiLguK3guLLguJfguLTguJXguKLguYxf4LiI4Lix4LiZ4LiX4Lij4LmMX+C4reC4seC4h+C4hOC4suC4o1/guJ7guLjguJhf4Lie4Lik4Lir4Lix4Liq4Lia4LiU4Li1X+C4qOC4uOC4geC4o+C5jF/guYDguKrguLLguKPguYwiLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoi4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4ql/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiLguK3guLIuX+C4iC5f4LitLl/guJ4uX+C4nuC4pC5f4LioLl/guKouIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSCDguJnguLLguKzguLTguIHguLIgbSDguJnguLLguJfguLUiLExUUzoiSCDguJnguLLguKzguLTguIHguLIgbSDguJnguLLguJfguLUgcyDguKfguLTguJnguLLguJfguLUiLEw6IllZWVkvTU0vREQiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSCDguJnguLLguKzguLTguIHguLIgbSDguJnguLLguJfguLUiLExMTEw6IuC4p+C4seC4mWRkZGTguJfguLXguYggRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEgg4LiZ4Liy4Lis4Li04LiB4LiyIG0g4LiZ4Liy4LiX4Li1In0sbWVyaWRpZW1QYXJzZTov4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHfOC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hy8saXNQTTpmdW5jdGlvbih0KXtyZXR1cm4i4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHIj09PXR9LG1lcmlkaWVtOmZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdDwxMj8i4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHIjoi4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHIn0sY2FsZW5kYXI6e3NhbWVEYXk6IlvguKfguLHguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCIsbmV4dERheToiW+C4nuC4o+C4uOC5iOC4h+C4meC4teC5iSDguYDguKfguKXguLJdIExUIixuZXh0V2VlazoiZGRkZFvguKvguJnguYnguLIg4LmA4Lin4Lil4LiyXSBMVCIsbGFzdERheToiW+C5gOC4oeC4t+C5iOC4reC4p+C4suC4meC4meC4teC5iSDguYDguKfguKXguLJdIExUIixsYXN0V2VlazoiW+C4p+C4seC4mV1kZGRkW+C4l+C4teC5iOC5geC4peC5ieC4pyDguYDguKfguKXguLJdIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiLguK3guLXguIEgJXMiLHBhc3Q6IiVz4LiX4Li14LmI4LmB4Lil4LmJ4LinIixzOiLguYTguKHguYjguIHguLXguYjguKfguLTguJnguLLguJfguLUiLG06IjEg4LiZ4Liy4LiX4Li1IixtbToiJWQg4LiZ4Liy4LiX4Li1IixoOiIxIOC4iuC4seC5iOC4p+C5guC4oeC4hyIsaGg6IiVkIOC4iuC4seC5iOC4p+C5guC4oeC4hyIsZDoiMSDguKfguLHguJkiLGRkOiIlZCDguKfguLHguJkiLE06IjEg4LmA4LiU4Li34Lit4LiZIixNTToiJWQg4LmA4LiU4Li34Lit4LiZIix5OiIxIOC4m+C4tSIseXk6IiVkIOC4m+C4tSJ9fSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLGkpeyFmdW5jdGlvbih0LGUpe2UoaSgzNikpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgZT10LmRlZmluZUxvY2FsZSgidGwtcGgiLHttb250aHM6IkVuZXJvX1BlYnJlcm9fTWFyc29fQWJyaWxfTWF5b19IdW55b19IdWx5b19BZ29zdG9fU2V0eWVtYnJlX09rdHVicmVfTm9ieWVtYnJlX0Rpc3llbWJyZSIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiRW5lX1BlYl9NYXJfQWJyX01heV9IdW5fSHVsX0Fnb19TZXRfT2t0X05vYl9EaXMiLnNwbGl0KCJfIiksd2Vla2RheXM6Ikxpbmdnb19MdW5lc19NYXJ0ZXNfTWl5ZXJrdWxlc19IdXdlYmVzX0JpeWVybmVzX1NhYmFkbyIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJMaW5fTHVuX01hcl9NaXlfSHV3X0JpeV9TYWIiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IkxpX0x1X01hX01pX0h1X0JpX1NhYiIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJNTS9EL1lZWVkiLExMOiJNTU1NIEQsIFlZWVkiLExMTDoiTU1NTSBELCBZWVlZIEhIOm1tIixMTExMOiJkZGRkLCBNTU1NIERELCBZWVlZIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltOZ2F5b24gc2FdIExUIixuZXh0RGF5OiJbQnVrYXMgc2FdIExUIixuZXh0V2VlazoiZGRkZCBbc2FdIExUIixsYXN0RGF5OiJbS2FoYXBvbiBzYV0gTFQiLGxhc3RXZWVrOiJkZGRkIFtodWxpbmcgbGluZ2dvXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToic2EgbG9vYiBuZyAlcyIscGFzdDoiJXMgYW5nIG5ha2FsaXBhcyIsczoiaWxhbmcgc2VndW5kbyIsbToiaXNhbmcgbWludXRvIixtbToiJWQgbWludXRvIixoOiJpc2FuZyBvcmFzIixoaDoiJWQgb3JhcyIsZDoiaXNhbmcgYXJhdyIsZGQ6IiVkIGFyYXciLE06ImlzYW5nIGJ1d2FuIixNTToiJWQgYnV3YW4iLHk6ImlzYW5nIHRhb24iLHl5OiIlZCB0YW9uIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9LyxvcmRpbmFsOmZ1bmN0aW9uKHQpe3JldHVybiB0fSx3ZWVrOntkb3c6MSxkb3k6NH19KTtyZXR1cm4gZX0pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGUodCl7dmFyIGU9dDtyZXR1cm4gZT10LmluZGV4T2YoImphaiIpIT09LTE/ZS5zbGljZSgwLC0zKSsibGVTIjp0LmluZGV4T2YoImphciIpIT09LTE/ZS5zbGljZSgwLC0zKSsid2FRIjp0LmluZGV4T2YoIkRJUyIpIT09LTE/ZS5zbGljZSgwLC0zKSsibmVtIjplKyIgcElxIn1mdW5jdGlvbiBpKHQpe3ZhciBlPXQ7cmV0dXJuIGU9dC5pbmRleE9mKCJqYWoiKSE9PS0xP2Uuc2xpY2UoMCwtMykrIkh14oCZIjp0LmluZGV4T2YoImphciIpIT09LTE/ZS5zbGljZSgwLC0zKSsid2VuIjp0LmluZGV4T2YoIkRJUyIpIT09LTE/ZS5zbGljZSgwLC0zKSsiYmVuIjplKyIgcmV0In1mdW5jdGlvbiBuKHQsZSxpLG4pe3ZhciBzPXIodCk7c3dpdGNoKGkpe2Nhc2UibW0iOnJldHVybiBzKyIgdHVwIjtjYXNlImhoIjpyZXR1cm4gcysiIHJlcCI7Y2FzZSJkZCI6cmV0dXJuIHMrIiBqYWoiO2Nhc2UiTU0iOnJldHVybiBzKyIgamFyIjtjYXNlInl5IjpyZXR1cm4gcysiIERJUyJ9fWZ1bmN0aW9uIHIodCl7dmFyIGU9TWF0aC5mbG9vcih0JTFlMy8xMDApLGk9TWF0aC5mbG9vcih0JTEwMC8xMCksbj10JTEwLHI9IiI7cmV0dXJuIGU+MCYmKHIrPXNbZV0rInZhdGxoIiksaT4wJiYocis9KCIiIT09cj8iICI6IiIpK3NbaV0rIm1hSCIpLG4+MCYmKHIrPSgiIiE9PXI/IiAiOiIiKStzW25dKSwiIj09PXI/InBhZ2giOnJ9dmFyIHM9InBhZ2hfd2HigJlfY2hh4oCZX3dlal9sb1NfdmFnaF9qYXZfU29jaF9jaG9yZ2hfSHV0Ii5zcGxpdCgiXyIpLG89dC5kZWZpbmVMb2NhbGUoInRsaCIse21vbnRoczoidGVyYeKAmSBqYXIgd2HigJlfdGVyYeKAmSBqYXIgY2hh4oCZX3RlcmHigJkgamFyIHdlal90ZXJh4oCZIGphciBsb1NfdGVyYeKAmSBqYXIgdmFnaF90ZXJh4oCZIGphciBqYXZfdGVyYeKAmSBqYXIgU29jaF90ZXJh4oCZIGphciBjaG9yZ2hfdGVyYeKAmSBqYXIgSHV0X3RlcmHigJkgamFyIHdh4oCZbWFIX3RlcmHigJkgamFyIHdh4oCZbWFIIHdh4oCZX3RlcmHigJkgamFyIHdh4oCZbWFIIGNoYeKAmSIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiamFyIHdh4oCZX2phciBjaGHigJlfamFyIHdlal9qYXIgbG9TX2phciB2YWdoX2phciBqYXZfamFyIFNvY2hfamFyIGNob3JnaF9qYXIgSHV0X2phciB3YeKAmW1hSF9qYXIgd2HigJltYUggd2HigJlfamFyIHdh4oCZbWFIIGNoYeKAmSIuc3BsaXQoIl8iKSx3ZWVrZGF5czoibG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWoiLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoibG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWoiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46Imxvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkRELk1NLllZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSBISDptbSIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW0RhSGphal0gTFQiLG5leHREYXk6Ilt3YeKAmWxlU10gTFQiLG5leHRXZWVrOiJMTEwiLGxhc3REYXk6Ilt3YeKAmUh14oCZXSBMVCIsbGFzdFdlZWs6IkxMTCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTplLHBhc3Q6aSxzOiJwdVMgbHVwIixtOiJ3YeKAmSB0dXAiLG1tOm4saDoid2HigJkgcmVwIixoaDpuLGQ6Indh4oCZIGphaiIsZGQ6bixNOiJ3YeKAmSBqYXIiLE1NOm4seToid2HigJkgRElTIix5eTpufSxvcmRpbmFsUGFyc2U6L1xkezEsMn1cLi8sb3JkaW5hbDoiJWQuIix3ZWVrOntkb3c6MSxkb3k6NH19KTtyZXR1cm4gb30pfSxmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKHQsZSl7ZShpKDM2KSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXsxOiInaW5jaSIsNToiJ2luY2kiLDg6IidpbmNpIiw3MDoiJ2luY2kiLDgwOiInaW5jaSIsMjoiJ25jaSIsNzoiJ25jaSIsMjA6IiduY2kiLDUwOiInbmNpIiwzOiInw7xuY8O8Iiw0OiInw7xuY8O8IiwxMDA6IifDvG5jw7wiLDY6IiduY8SxIiw5OiIndW5jdSIsMTA6Iid1bmN1IiwzMDoiJ3VuY3UiLDYwOiInxLFuY8SxIiw5MDoiJ8SxbmPEsSJ9LGk9dC5kZWZpbmVMb2NhbGUoInRyIix7bW9udGhzOiJPY2FrX8WedWJhdF9NYXJ0X05pc2FuX01hecSxc19IYXppcmFuX1RlbW11el9BxJ91c3Rvc19FeWzDvGxfRWtpbV9LYXPEsW1fQXJhbMSxayIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiT2NhX8WedWJfTWFyX05pc19NYXlfSGF6X1RlbV9BxJ91X0V5bF9Fa2lfS2FzX0FyYSIuc3BsaXQoIl8iKSx3ZWVrZGF5czoiUGF6YXJfUGF6YXJ0ZXNpX1NhbMSxX8OHYXLFn2FtYmFfUGVyxZ9lbWJlX0N1bWFfQ3VtYXJ0ZXNpIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IlBhel9QdHNfU2FsX8OHYXJfUGVyX0N1bV9DdHMiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IlB6X1B0X1NhX8OHYV9QZV9DdV9DdCIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJERC5NTS5ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltidWfDvG4gc2FhdF0gTFQiLG5leHREYXk6Ilt5YXLEsW4gc2FhdF0gTFQiLG5leHRXZWVrOiJbaGFmdGF5YV0gZGRkZCBbc2FhdF0gTFQiLGxhc3REYXk6Iltkw7xuXSBMVCIsbGFzdFdlZWs6IltnZcOnZW4gaGFmdGFdIGRkZGQgW3NhYXRdIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiIlcyBzb25yYSIscGFzdDoiJXMgw7ZuY2UiLHM6ImJpcmthw6cgc2FuaXllIixtOiJiaXIgZGFraWthIixtbToiJWQgZGFraWthIixoOiJiaXIgc2FhdCIsaGg6IiVkIHNhYXQiLGQ6ImJpciBnw7xuIixkZDoiJWQgZ8O8biIsTToiYmlyIGF5IixNTToiJWQgYXkiLHk6ImJpciB5xLFsIix5eToiJWQgecSxbCJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfScoaW5jaXxuY2l8w7xuY8O8fG5jxLF8dW5jdXzEsW5jxLEpLyxvcmRpbmFsOmZ1bmN0aW9uKHQpe2lmKDA9PT10KXJldHVybiB0KyInxLFuY8SxIjt2YXIgaT10JTEwLG49dCUxMDAtaSxyPXQ+PTEwMD8xMDA6bnVsbDtyZXR1cm4gdCsoZVtpXXx8ZVtuXXx8ZVtyXSl9LHdlZWs6e2RvdzoxLGRveTo3fX0pO3JldHVybiBpfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gZSh0LGUsaSxuKXt2YXIgcj17czpbInZpZW5zYXMgc2VjdW5kcyIsIidpZW5zYXMgc2VjdW5kcyJdLG06WyInbiBtw611dCIsIidpZW5zIG3DrXV0Il0sbW06W3QrIiBtw611dHMiLCIiK3QrIiBtw611dHMiXSxoOlsiJ24gw75vcmEiLCInaWVuc2Egw75vcmEiXSxoaDpbdCsiIMO+b3JhcyIsIiIrdCsiIMO+b3JhcyJdLGQ6WyInbiB6aXVhIiwiJ2llbnNhIHppdWEiXSxkZDpbdCsiIHppdWFzIiwiIit0KyIgeml1YXMiXSxNOlsiJ24gbWVzIiwiJ2llbnMgbWVzIl0sTU06W3QrIiBtZXNlbiIsIiIrdCsiIG1lc2VuIl0seTpbIiduIGFyIiwiJ2llbnMgYXIiXSx5eTpbdCsiIGFycyIsIiIrdCsiIGFycyJdfTtyZXR1cm4gbj9yW2ldWzBdOmU/cltpXVswXTpyW2ldWzFdfXZhciBpPXQuZGVmaW5lTG9jYWxlKCJ0emwiLHttb250aHM6IkphbnVhcl9GZXZyYWdsaF9NYXLDp19BdnLDr3VfTWFpX0fDvG5fSnVsaWFfR3VzY2h0X1NldGVtdmFyX0xpc3RvcMOkdHNfTm9lbXZhcl9aZWNlbXZhciIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiSmFuX0Zldl9NYXJfQXZyX01haV9Hw7xuX0p1bF9HdXNfU2V0X0xpc19Ob2VfWmVjIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiJTw7psYWRpX0zDum5lw6dpX01haXR6aV9Nw6FyY3VyaV9YaMO6YWRpX1Zpw6luZXLDp2lfU8OhdHVyaSIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJTw7psX0zDum5fTWFpX03DoXJfWGjDul9WacOpX1PDoXQiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IlPDul9Mw7pfTWFfTcOhX1hoX1ZpX1PDoSIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhILm1tIixMVFM6IkhILm1tLnNzIixMOiJERC5NTS5ZWVlZIixMTDoiRC4gTU1NTSBbZGFsbGFzXSBZWVlZIixMTEw6IkQuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbSIsTExMTDoiZGRkZCwgW2xpXSBELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0ifSxtZXJpZGllbVBhcnNlOi9kXCdvfGRcJ2EvaSxpc1BNOmZ1bmN0aW9uKHQpe3JldHVybiJkJ28iPT09dC50b0xvd2VyQ2FzZSgpfSxtZXJpZGllbTpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQ+MTE/aT8iZCdvIjoiRCdPIjppPyJkJ2EiOiJEJ0EifSxjYWxlbmRhcjp7c2FtZURheToiW294aGkgw6BdIExUIixuZXh0RGF5OiJbZGVtw6Agw6BdIExUIixuZXh0V2VlazoiZGRkZCBbw6BdIExUIixsYXN0RGF5OiJbaWVpcmkgw6BdIExUIixsYXN0V2VlazoiW3PDvHIgZWxdIGRkZGQgW2xhc3RldSDDoF0gTFQiLHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6Im9zcHJlaSAlcyIscGFzdDoiamElcyIsczplLG06ZSxtbTplLGg6ZSxoaDplLGQ6ZSxkZDplLE06ZSxNTTplLHk6ZSx5eTplfSxvcmRpbmFsUGFyc2U6L1xkezEsMn1cLi8sCglvcmRpbmFsOiIlZC4iLHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBpfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInR6bSIse21vbnRoczoi4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQiLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6IuK1ieK1j+K1j+K0sOK1ouK1lF/itLHitZXitLDitaLitZVf4rWO4rSw4rWV4rWaX+K1ieK0seK1lOK1ieK1lF/itY7itLDitaLitaLitZNf4rWi4rWT4rWP4rWi4rWTX+K1ouK1k+K1jeK1ouK1k+K1o1/itZbitZPitZvitZxf4rWb4rWT4rWc4rSw4rWP4rSx4rWJ4rWUX+K0veK1n+K1k+K0seK1lV/itY/itZPitaHitLDitY/itLHitYnitZRf4rS34rWT4rWK4rWP4rSx4rWJ4rWUIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiLitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZkiLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoi4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiLitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZkiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJISDptbSIsTFRTOiJISDptbTpzcyIsTDoiREQvTU0vWVlZWSIsTEw6IkQgTU1NTSBZWVlZIixMTEw6IkQgTU1NTSBZWVlZIEhIOm1tIixMTExMOiJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IlvitLDitZnitLfitYUg4rS0XSBMVCIsbmV4dERheToiW+K0sOK1meK0veK0sCDitLRdIExUIixuZXh0V2VlazoiZGRkZCBb4rS0XSBMVCIsbGFzdERheToiW+K0sOK1muK0sOK1j+K1nCDitLRdIExUIixsYXN0V2VlazoiZGRkZCBb4rS0XSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToi4rS34rSw4rS34rWFIOK1mSDitaLitLDitY8gJXMiLHBhc3Q6IuK1ouK0sOK1jyAlcyIsczoi4rWJ4rWO4rWJ4rS9IixtOiLitY7itYnitY/itZPitLoiLG1tOiIlZCDitY7itYnitY/itZPitLoiLGg6IuK1meK0sOK1hOK0sCIsaGg6IiVkIOK1nOK0sOK1meK1meK0sOK1hOK1ieK1jyIsZDoi4rSw4rWZ4rWZIixkZDoiJWQgb+K1meK1meK0sOK1jyIsTToi4rSw4rWib+K1k+K1lCIsTU06IiVkIOK1ieK1ouK1ouK1ieK1lOK1jyIseToi4rSw4rWZ4rSz4rSw4rWZIix5eToiJWQg4rWJ4rWZ4rSz4rSw4rWZ4rWPIn0sd2Vlazp7ZG93OjYsZG95OjEyfX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInR6bS1sYXRuIix7bW9udGhzOiJpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiJpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiJhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6ImFzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46ImFzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJISDptbSIsTFRTOiJISDptbTpzcyIsTDoiREQvTU0vWVlZWSIsTEw6IkQgTU1NTSBZWVlZIixMTEw6IkQgTU1NTSBZWVlZIEhIOm1tIixMTExMOiJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6Ilthc2RraCBnXSBMVCIsbmV4dERheToiW2Fza2EgZ10gTFQiLG5leHRXZWVrOiJkZGRkIFtnXSBMVCIsbGFzdERheToiW2Fzc2FudCBnXSBMVCIsbGFzdFdlZWs6ImRkZGQgW2ddIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiJkYWRraCBzIHlhbiAlcyIscGFzdDoieWFuICVzIixzOiJpbWlrIixtOiJtaW514biNIixtbToiJWQgbWludeG4jSIsaDoic2HJm2EiLGhoOiIlZCB0YXNzYcmbaW4iLGQ6ImFzcyIsZGQ6IiVkIG9zc2FuIixNOiJheW93ciIsTU06IiVkIGl5eWlybiIseToiYXNnYXMiLHl5OiIlZCBpc2dhc24ifSx3ZWVrOntkb3c6Nixkb3k6MTJ9fSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLGkpeyFmdW5jdGlvbih0LGUpe2UoaSgzNikpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKHQsZSl7dmFyIGk9dC5zcGxpdCgiXyIpO3JldHVybiBlJTEwPT09MSYmZSUxMDAhPT0xMT9pWzBdOmUlMTA+PTImJmUlMTA8PTQmJihlJTEwMDwxMHx8ZSUxMDA+PTIwKT9pWzFdOmlbMl19ZnVuY3Rpb24gaSh0LGksbil7dmFyIHI9e21tOmk/ItGF0LLQuNC70LjQvdCwX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvSI6ItGF0LLQuNC70LjQvdGDX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvSIsaGg6aT8i0LPQvtC00LjQvdCwX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9Ijoi0LPQvtC00LjQvdGDX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9IixkZDoi0LTQtdC90Yxf0LTQvdGWX9C00L3RltCyIixNTToi0LzRltGB0Y/RhtGMX9C80ZbRgdGP0YbRll/QvNGW0YHRj9GG0ZbQsiIseXk6ItGA0ZbQul/RgNC+0LrQuF/RgNC+0LrRltCyIn07cmV0dXJuIm0iPT09bj9pPyLRhdCy0LjQu9C40L3QsCI6ItGF0LLQuNC70LjQvdGDIjoiaCI9PT1uP2k/ItCz0L7QtNC40L3QsCI6ItCz0L7QtNC40L3RgyI6dCsiICIrZShyW25dLCt0KX1mdW5jdGlvbiBuKHQsZSl7dmFyIGk9e25vbWluYXRpdmU6ItC90LXQtNGW0LvRj1/Qv9C+0L3QtdC00ZbQu9C+0Lpf0LLRltCy0YLQvtGA0L7Qul/RgdC10YDQtdC00LBf0YfQtdGC0LLQtdGAX9C/4oCZ0Y/RgtC90LjRhtGPX9GB0YPQsdC+0YLQsCIuc3BsaXQoIl8iKSxhY2N1c2F0aXZlOiLQvdC10LTRltC70Y5f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNGDX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRjl/RgdGD0LHQvtGC0YMiLnNwbGl0KCJfIiksZ2VuaXRpdmU6ItC90LXQtNGW0LvRll/Qv9C+0L3QtdC00ZbQu9C60LBf0LLRltCy0YLQvtGA0LrQsF/RgdC10YDQtdC00Lhf0YfQtdGC0LLQtdGA0LPQsF/Qv+KAmdGP0YLQvdC40YbRll/RgdGD0LHQvtGC0LgiLnNwbGl0KCJfIil9LG49LyhcW1vQktCy0KPRg11cXSkgP2RkZGQvLnRlc3QoZSk/ImFjY3VzYXRpdmUiOi9cWz8oPzrQvNC40L3Rg9C70L7Rl3zQvdCw0YHRgtGD0L/QvdC+0ZcpPyA/XF0gP2RkZGQvLnRlc3QoZSk/Imdlbml0aXZlIjoibm9taW5hdGl2ZSI7cmV0dXJuIGlbbl1bdC5kYXkoKV19ZnVuY3Rpb24gcih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCsi0L4iKygxMT09PXRoaXMuaG91cnMoKT8i0LEiOiIiKSsiXSBMVCJ9fXZhciBzPXQuZGVmaW5lTG9jYWxlKCJ1ayIse21vbnRoczp7Zm9ybWF0OiLRgdGW0YfQvdGPX9C70Y7RgtC+0LPQvl/QsdC10YDQtdC30L3Rj1/QutCy0ZbRgtC90Y9f0YLRgNCw0LLQvdGPX9GH0LXRgNCy0L3Rj1/Qu9C40L/QvdGPX9GB0LXRgNC/0L3Rj1/QstC10YDQtdGB0L3Rj1/QttC+0LLRgtC90Y9f0LvQuNGB0YLQvtC/0LDQtNCwX9Cz0YDRg9C00L3RjyIuc3BsaXQoIl8iKSxzdGFuZGFsb25lOiLRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YwiLnNwbGl0KCJfIil9LG1vbnRoc1Nob3J0OiLRgdGW0Ydf0LvRjtGCX9Cx0LXRgF/QutCy0ZbRgl/RgtGA0LDQsl/Rh9C10YDQsl/Qu9C40L9f0YHQtdGA0L9f0LLQtdGAX9C20L7QstGCX9C70LjRgdGCX9Cz0YDRg9C0Ii5zcGxpdCgiXyIpLHdlZWtkYXlzOm4sd2Vla2RheXNTaG9ydDoi0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsSIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoi0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsSIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJERC5NTS5ZWVlZIixMTDoiRCBNTU1NIFlZWVkg0YAuIixMTEw6IkQgTU1NTSBZWVlZINGALiwgSEg6bW0iLExMTEw6ImRkZGQsIEQgTU1NTSBZWVlZINGALiwgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheTpyKCJb0KHRjNC+0LPQvtC00L3RliAiKSxuZXh0RGF5OnIoIlvQl9Cw0LLRgtGA0LAgIiksbGFzdERheTpyKCJb0JLRh9C+0YDQsCAiKSxuZXh0V2VlazpyKCJb0KNdIGRkZGQgWyIpLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpjYXNlIDM6Y2FzZSA1OmNhc2UgNjpyZXR1cm4gcigiW9Cc0LjQvdGD0LvQvtGXXSBkZGRkIFsiKS5jYWxsKHRoaXMpO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiByKCJb0JzQuNC90YPQu9C+0LPQvl0gZGRkZCBbIikuY2FsbCh0aGlzKX19LHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6ItC30LAgJXMiLHBhc3Q6IiVzINGC0L7QvNGDIixzOiLQtNC10LrRltC70YzQutCwINGB0LXQutGD0L3QtCIsbTppLG1tOmksaDoi0LPQvtC00LjQvdGDIixoaDppLGQ6ItC00LXQvdGMIixkZDppLE06ItC80ZbRgdGP0YbRjCIsTU06aSx5OiLRgNGW0LoiLHl5Oml9LG1lcmlkaWVtUGFyc2U6L9C90L7Rh9GWfNGA0LDQvdC60YN80LTQvdGPfNCy0LXRh9C+0YDQsC8saXNQTTpmdW5jdGlvbih0KXtyZXR1cm4vXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QodCl9LG1lcmlkaWVtOmZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdDw0PyLQvdC+0YfRliI6dDwxMj8i0YDQsNC90LrRgyI6dDwxNz8i0LTQvdGPIjoi0LLQtdGH0L7RgNCwIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9LSjQuXzQs9C+KS8sb3JkaW5hbDpmdW5jdGlvbih0LGUpe3N3aXRjaChlKXtjYXNlIk0iOmNhc2UiZCI6Y2FzZSJEREQiOmNhc2UidyI6Y2FzZSJXIjpyZXR1cm4gdCsiLdC5IjtjYXNlIkQiOnJldHVybiB0KyIt0LPQviI7ZGVmYXVsdDpyZXR1cm4gdH19LHdlZWs6e2RvdzoxLGRveTo3fX0pO3JldHVybiBzfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInV6Iix7bW9udGhzOiLRj9C90LLQsNGAX9GE0LXQstGA0LDQu1/QvNCw0YDRgl/QsNC/0YDQtdC7X9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgF/QvtC60YLRj9Cx0YBf0L3QvtGP0LHRgF/QtNC10LrQsNCx0YAiLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6ItGP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Ii5zcGxpdCgiXyIpLHdlZWtkYXlzOiLQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsCIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiLQr9C60Yhf0JTRg9GIX9Ch0LXRiF/Qp9C+0YBf0J/QsNC5X9CW0YPQvF/QqNCw0L0iLnNwbGl0KCJfIiksd2Vla2RheXNNaW46ItCv0Lpf0JTRg1/QodC1X9Cn0L5f0J/QsF/QltGDX9Co0LAiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJISDptbSIsTFRTOiJISDptbTpzcyIsTDoiREQvTU0vWVlZWSIsTEw6IkQgTU1NTSBZWVlZIixMTEw6IkQgTU1NTSBZWVlZIEhIOm1tIixMTExMOiJEIE1NTU0gWVlZWSwgZGRkZCBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJb0JHRg9Cz0YPQvSDRgdC+0LDRgl0gTFQgW9C00LBdIixuZXh0RGF5OiJb0K3RgNGC0LDQs9CwXSBMVCBb0LTQsF0iLG5leHRXZWVrOiJkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdIixsYXN0RGF5OiJb0JrQtdGH0LAg0YHQvtCw0YJdIExUIFvQtNCwXSIsbGFzdFdlZWs6IlvQo9GC0LPQsNC9XSBkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiLQr9C60LjQvSAlcyDQuNGH0LjQtNCwIixwYXN0OiLQkdC40YAg0L3QtdGH0LAgJXMg0L7Qu9C00LjQvSIsczoi0YTRg9GA0YHQsNGCIixtOiLQsdC40YAg0LTQsNC60LjQutCwIixtbToiJWQg0LTQsNC60LjQutCwIixoOiLQsdC40YAg0YHQvtCw0YIiLGhoOiIlZCDRgdC+0LDRgiIsZDoi0LHQuNGAINC60YPQvSIsZGQ6IiVkINC60YPQvSIsTToi0LHQuNGAINC+0LkiLE1NOiIlZCDQvtC5Iix5OiLQsdC40YAg0LnQuNC7Iix5eToiJWQg0LnQuNC7In0sd2Vlazp7ZG93OjEsZG95Ojd9fSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLGkpeyFmdW5jdGlvbih0LGUpe2UoaSgzNikpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgZT10LmRlZmluZUxvY2FsZSgidmkiLHttb250aHM6InRow6FuZyAxX3Row6FuZyAyX3Row6FuZyAzX3Row6FuZyA0X3Row6FuZyA1X3Row6FuZyA2X3Row6FuZyA3X3Row6FuZyA4X3Row6FuZyA5X3Row6FuZyAxMF90aMOhbmcgMTFfdGjDoW5nIDEyIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiJUaDAxX1RoMDJfVGgwM19UaDA0X1RoMDVfVGgwNl9UaDA3X1RoMDhfVGgwOV9UaDEwX1RoMTFfVGgxMiIuc3BsaXQoIl8iKSx3ZWVrZGF5czoiY2jhu6cgbmjhuq10X3Ro4bupIGhhaV90aOG7qSBiYV90aOG7qSB0xrBfdGjhu6kgbsSDbV90aOG7qSBzw6F1X3Ro4bupIGLhuqN5Ii5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IkNOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Ii5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJDTl9UMl9UM19UNF9UNV9UNl9UNyIuc3BsaXQoIl8iKSxtZXJpZGllbVBhcnNlOi9zYXxjaC9pLGlzUE06ZnVuY3Rpb24odCl7cmV0dXJuL15jaCQvaS50ZXN0KHQpfSxtZXJpZGllbTpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQ8MTI/aT8ic2EiOiJTQSI6aT8iY2giOiJDSCJ9LGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkREL01NL1lZWVkiLExMOiJEIE1NTU0gW27Eg21dIFlZWVkiLExMTDoiRCBNTU1NIFtuxINtXSBZWVlZIEhIOm1tIixMTExMOiJkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0iLGw6IkREL00vWVlZWSIsbGw6IkQgTU1NIFlZWVkiLGxsbDoiRCBNTU0gWVlZWSBISDptbSIsbGxsbDoiZGRkLCBEIE1NTSBZWVlZIEhIOm1tIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltIw7RtIG5heSBsw7pjXSBMVCIsbmV4dERheToiW05nw6B5IG1haSBsw7pjXSBMVCIsbmV4dFdlZWs6ImRkZGQgW3R14bqnbiB04bubaSBsw7pjXSBMVCIsbGFzdERheToiW0jDtG0gcXVhIGzDumNdIExUIixsYXN0V2VlazoiZGRkZCBbdHXhuqduIHLhu5NpIGzDumNdIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiIlcyB04bubaSIscGFzdDoiJXMgdHLGsOG7m2MiLHM6InbDoGkgZ2nDonkiLG06Im3hu5l0IHBow7p0IixtbToiJWQgcGjDunQiLGg6Im3hu5l0IGdp4budIixoaDoiJWQgZ2nhu50iLGQ6Im3hu5l0IG5nw6B5IixkZDoiJWQgbmfDoHkiLE06Im3hu5l0IHRow6FuZyIsTU06IiVkIHRow6FuZyIseToibeG7mXQgbsSDbSIseXk6IiVkIG7Eg20ifSxvcmRpbmFsUGFyc2U6L1xkezEsMn0vLG9yZGluYWw6ZnVuY3Rpb24odCl7cmV0dXJuIHR9LHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInpoLWNuIix7bW9udGhzOiLkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgiLnNwbGl0KCJfIiksd2Vla2RheXM6IuaYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrSIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiLlkajml6Vf5ZGo5LiAX+WRqOS6jF/lkajkuIlf5ZGo5ZubX+WRqOS6lF/lkajlha0iLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IuaXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrSIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkFo54K5bW3liIYiLExUUzoiQWjngrlt5YiGc+enkiIsTDoiWVlZWS1NTS1ERCIsTEw6IllZWVnlubRNTU1E5pelIixMTEw6IllZWVnlubRNTU1E5pelQWjngrltbeWIhiIsTExMTDoiWVlZWeW5tE1NTUTml6VkZGRkQWjngrltbeWIhiIsbDoiWVlZWS1NTS1ERCIsbGw6IllZWVnlubRNTU1E5pelIixsbGw6IllZWVnlubRNTU1E5pelQWjngrltbeWIhiIsbGxsbDoiWVlZWeW5tE1NTUTml6VkZGRkQWjngrltbeWIhiJ9LG1lcmlkaWVtUGFyc2U6L+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24odCxlKXtyZXR1cm4gMTI9PT10JiYodD0wKSwi5YeM5pmoIj09PWV8fCLml6nkuIoiPT09ZXx8IuS4iuWNiCI9PT1lP3Q6IuS4i+WNiCI9PT1lfHwi5pma5LiKIj09PWU/dCsxMjp0Pj0xMT90OnQrMTJ9LG1lcmlkaWVtOmZ1bmN0aW9uKHQsZSxpKXt2YXIgbj0xMDAqdCtlO3JldHVybiBuPDYwMD8i5YeM5pmoIjpuPDkwMD8i5pep5LiKIjpuPDExMzA/IuS4iuWNiCI6bjwxMjMwPyLkuK3ljYgiOm48MTgwMD8i5LiL5Y2IIjoi5pma5LiKIn0sY2FsZW5kYXI6e3NhbWVEYXk6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMubWludXRlcygpPyJb5LuK5aSpXUFoW+eCueaVtF0iOiJb5LuK5aSpXUxUIn0sbmV4dERheTpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5taW51dGVzKCk/IlvmmI7lpKldQWhb54K55pW0XSI6IlvmmI7lpKldTFQifSxsYXN0RGF5OmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLm1pbnV0ZXMoKT8iW+aYqOWkqV1BaFvngrnmlbRdIjoiW+aYqOWkqV1MVCJ9LG5leHRXZWVrOmZ1bmN0aW9uKCl7dmFyIGUsaTtyZXR1cm4gZT10KCkuc3RhcnRPZigid2VlayIpLGk9dGhpcy51bml4KCktZS51bml4KCk+PTYwNDgwMD8iW+S4i10iOiJb5pysXSIsMD09PXRoaXMubWludXRlcygpP2krImRkZEFo54K55pW0IjppKyJkZGRBaOeCuW1tIn0sbGFzdFdlZWs6ZnVuY3Rpb24oKXt2YXIgZSxpO3JldHVybiBlPXQoKS5zdGFydE9mKCJ3ZWVrIiksaT10aGlzLnVuaXgoKTxlLnVuaXgoKT8iW+S4il0iOiJb5pysXSIsMD09PXRoaXMubWludXRlcygpP2krImRkZEFo54K55pW0IjppKyJkZGRBaOeCuW1tIn0sc2FtZUVsc2U6IkxMIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9KOaXpXzmnIh85ZGoKS8sb3JkaW5hbDpmdW5jdGlvbih0LGUpe3N3aXRjaChlKXtjYXNlImQiOmNhc2UiRCI6Y2FzZSJEREQiOnJldHVybiB0KyLml6UiO2Nhc2UiTSI6cmV0dXJuIHQrIuaciCI7Y2FzZSJ3IjpjYXNlIlciOnJldHVybiB0KyLlkagiO2RlZmF1bHQ6cmV0dXJuIHR9fSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToiJXPlhoUiLHBhc3Q6IiVz5YmNIixzOiLlh6Dnp5IiLG06IjEg5YiG6ZKfIixtbToiJWQg5YiG6ZKfIixoOiIxIOWwj+aXtiIsaGg6IiVkIOWwj+aXtiIsZDoiMSDlpKkiLGRkOiIlZCDlpKkiLE06IjEg5Liq5pyIIixNTToiJWQg5Liq5pyIIix5OiIxIOW5tCIseXk6IiVkIOW5tCJ9LHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxpKXshZnVuY3Rpb24odCxlKXtlKGkoMzYpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoInpoLXR3Iix7bW9udGhzOiLkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgiLnNwbGl0KCJfIiksd2Vla2RheXM6IuaYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrSIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiLpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0iLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IuaXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrSIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkFo6buebW3liIYiLExUUzoiQWjpu55t5YiGc+enkiIsTDoiWVlZWeW5tE1NTUTml6UiLExMOiJZWVlZ5bm0TU1NROaXpSIsTExMOiJZWVlZ5bm0TU1NROaXpUFo6buebW3liIYiLExMTEw6IllZWVnlubRNTU1E5pelZGRkZEFo6buebW3liIYiLGw6IllZWVnlubRNTU1E5pelIixsbDoiWVlZWeW5tE1NTUTml6UiLGxsbDoiWVlZWeW5tE1NTUTml6VBaOm7nm1t5YiGIixsbGxsOiJZWVlZ5bm0TU1NROaXpWRkZGRBaOm7nm1t5YiGIn0sbWVyaWRpZW1QYXJzZTov5pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDEyPT09dCYmKHQ9MCksIuaXqeS4iiI9PT1lfHwi5LiK5Y2IIj09PWU/dDoi5Lit5Y2IIj09PWU/dD49MTE/dDp0KzEyOiLkuIvljYgiPT09ZXx8IuaZmuS4iiI9PT1lP3QrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbih0LGUsaSl7dmFyIG49MTAwKnQrZTtyZXR1cm4gbjw5MDA/IuaXqeS4iiI6bjwxMTMwPyLkuIrljYgiOm48MTIzMD8i5Lit5Y2IIjpuPDE4MDA/IuS4i+WNiCI6IuaZmuS4iiJ9LGNhbGVuZGFyOntzYW1lRGF5OiJb5LuK5aSpXUxUIixuZXh0RGF5OiJb5piO5aSpXUxUIixuZXh0V2VlazoiW+S4i11kZGRkTFQiLGxhc3REYXk6IlvmmKjlpKldTFQiLGxhc3RXZWVrOiJb5LiKXWRkZGRMVCIsc2FtZUVsc2U6IkwifSxvcmRpbmFsUGFyc2U6L1xkezEsMn0o5pelfOaciHzpgLEpLyxvcmRpbmFsOmZ1bmN0aW9uKHQsZSl7c3dpdGNoKGUpe2Nhc2UiZCI6Y2FzZSJEIjpjYXNlIkRERCI6cmV0dXJuIHQrIuaXpSI7Y2FzZSJNIjpyZXR1cm4gdCsi5pyIIjtjYXNlInciOmNhc2UiVyI6cmV0dXJuIHQrIumAsSI7ZGVmYXVsdDpyZXR1cm4gdH19LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiIlc+WFpyIscGFzdDoiJXPliY0iLHM6IuW5vuenkiIsbToi5LiA5YiG6ZCYIixtbToiJWTliIbpkJgiLGg6IuS4gOWwj+aZgiIsaGg6IiVk5bCP5pmCIixkOiLkuIDlpKkiLGRkOiIlZOWkqSIsTToi5LiA5YCL5pyIIixNTToiJWTlgIvmnIgiLHk6IuS4gOW5tCIseXk6IiVk5bm0In19KTtyZXR1cm4gZX0pfSxmdW5jdGlvbih0LGUsaSl7dmFyIG4scjtuPVtpKDIpLGkoMTM3KV0scj1mdW5jdGlvbih0LGUpe3JldHVybiBlLmV4dGVuZCh7c2VjdXJlSlNPTjohMSxfYnVpbHRJbkxvY2FsUHJvcHM6e19fZWRpdF9fOiJib29sZWFuIixfX3BlbmRpbmdfXzoiYm9vbGVhbiJ9LGNvbnN0cnVjdG9yOmZ1bmN0aW9uKCl7dGhpcy5sb2NhbD10LmRlZmF1bHRzKHt9LHQucmVzdWx0KHRoaXMsImxvY2FsIiksdGhpcy5fYnVpbHRJbkxvY2FsUHJvcHMpLHQucmVzdWx0KHRoaXMsInNlY3VyZUpTT04iKSYmKHRoaXMuc3luYz10LndyYXAodGhpcy5zeW5jLGZ1bmN0aW9uKGUsaSxuLHIpe3JldHVybiBlLmNhbGwodGhpcyxpLG4sdC5leHRlbmQoe2RhdGFUeXBlOiJzZWN1cmVKU09OIn0scikpfSkpLGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pfS5hcHBseShlLG4pLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxpKXt2YXIgbixyLHM7IWZ1bmN0aW9uKG8sYSl7cj1baSgyKSxpKDM1KV0sbj1hLHM9ImZ1bmN0aW9uIj09dHlwZW9mIG4/bi5hcHBseShlLHIpOm4sISh2b2lkIDAhPT1zJiYodC5leHBvcnRzPXMpKX0odGhpcyxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIGkoZSxuLHIscyl7dmFyIG89dC5jb250YWlucyhuLHIpO3JldHVybiBzfHwocz17fSksb3x8IXQuaXNPYmplY3QoZSl8fHQuaXNBcnJheShlKXx8dC5pc0Z1bmN0aW9uKGUpP3ZvaWQgMCE9PXImJihzW3JdPWUpOnQuZWFjaChlLGZ1bmN0aW9uKHQsZSl7aSh0LG4scj9yKyIuIitlOmUscyl9KSxzfWZ1bmN0aW9uIG4oZSl7cmV0dXJuIHQuZWFjaChlLGZ1bmN0aW9uKHQsZSxpKXtpZihlLmluZGV4T2YoIi4iKSE9LTEpe2Zvcih2YXIgbixyPWkscz1lLnNwbGl0KCIuIik7dm9pZCAwIT09KG49cy5zaGlmdCgpKTspcltuXXx8KHJbbl09cy5sZW5ndGg/e306dCkscj1yW25dO2RlbGV0ZSBpW2VdfX0pLGV9ZnVuY3Rpb24gcih0LGUpe3ZhciBpPXt9O3JldHVybiBpW3QubmFtZV09ZSxpfWZ1bmN0aW9uIHMoZSxpKXt2YXIgbjtyZXR1cm4gbj10LmlzU3RyaW5nKGUpP3t0eXBlOmV9OnQuaXNBcnJheShlKT97dHlwZTplWzBdLHJlcXVpcmVkOmVbMV0sdmFsdWU6ZVsyXX06dC5jbG9uZShlKSx0LmRlZmF1bHRzKG4se3JlcXVpcmVkOiExLG5hbWU6aX0pLG59ZnVuY3Rpb24gbyh0KXtyZXR1cm4gdC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xiW2Etel0vZyxmdW5jdGlvbih0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfSl9ZnVuY3Rpb24gYShlLGkpe3JldHVybiB0LmlzQm9vbGVhbihlKT9lOnQuaXNSZWdFeHAoZSk/ZS50ZXN0KGkpOiEhdC5pc0Z1bmN0aW9uKGUpJiZlLmNhbGwodGhpcyxpKX1mdW5jdGlvbiBsKHQsZSxpKXtpZighZS50ZXN0KHQpKXJldHVybiBpfWZ1bmN0aW9uIGModCxlKXt2YXIgaT1mW3QuZm9ybWF0XTtpZih0LmZvcm1hdCYmIWkpdGhyb3cgbmV3IFR5cGVFcnJvcih0LmZvcm1hdCsiIGlzIG5vdCBhIHN1cHBvcnRlZCBzdHJpbmcgZm9ybWF0Iik7cmV0dXJuIGkmJmkoZSl9ZnVuY3Rpb24gdShlLGkpe3ZhciBuPXQucGFydGlhbChyLGUpLHM9YyhlLGkpO3JldHVybiBzP24ocyk6aSYmZS5taW5MZW5ndGgmJmkubGVuZ3RoPGUubWluTGVuZ3RoP24ocC5FUlJPUl9TVFJJTkdfU1RSSU5HX01JTl9MRU5HVEgsaS5sZW5ndGgpOmkmJmUubWF4TGVuZ3RoJiZpLmxlbmd0aD5lLm1heExlbmd0aD9uKHAuRVJST1JfU1RSSU5HX1NUUklOR19NQVhfTEVOR1RILGkubGVuZ3RoKTp2b2lkIDB9ZnVuY3Rpb24gZChlLGkpe3ZhciBuLHMsYT10LnBhcnRpYWwocixlKSxsPSF0LmlzVW5kZWZpbmVkKGkpJiYhdC5pc051bGwoaSk7aWYoZS5yZXF1aXJlZCYmKCFsfHx0LmlzTnVsbChpKXx8IiI9PT1pKSlyZXR1cm4gYShwLkVSUk9SX0JMQU5LKTtpZihuPXRbImlzIitvKGUudHlwZSldLGwmJiJhbnkiIT1lLnR5cGUmJighdC5pc0Z1bmN0aW9uKG4pfHwhbihpKSkpcmV0dXJuIGEocC5FUlJPUl9XUk9OR19UWVBFKTtpZihpJiYic3RyaW5nIj09ZS50eXBlKXt2YXIgYz11KGUsaSk7aWYoYylyZXR1cm4gY31pZihsJiZlLnZhbHVlcyYmIXQuY29udGFpbnMoZS52YWx1ZXMsaSkpcmV0dXJuIGEocC5FUlJPUl9OT1RfQUxMT1dFRCk7aWYodC5pc0Z1bmN0aW9uKGUudmFsaWRhdGUpKXt2YXIgZD1lLnZhbGlkYXRlKGkpO2lmKHQuaXNTdHJpbmcoZCkmJmQpcmV0dXJuIGEoZCk7aWYoZD09PSExKXJldHVybiBhKHAuRVJST1JfSU5WQUxJRCl9cmV0dXJuIGwmJiJhcnJheSI9PWUudHlwZSYmKHM9aChlLGkpKT9hKHMpOnZvaWQgMH1mdW5jdGlvbiBoKGUsaSl7aWYoZS5taW5JdGVtcyYmaS5sZW5ndGg8ZS5taW5JdGVtcylyZXR1cm4ibW9kZWwudmFsaWRhdGlvbi5maWVsZC5hcnJheS5taW5JdGVtcyI7aWYoZS5tYXhJdGVtcyYmaS5sZW5ndGg+ZS5tYXhJdGVtcylyZXR1cm4ibW9kZWwudmFsaWRhdGlvbi5maWVsZC5hcnJheS5tYXhJdGVtcyI7aWYoZS51bmlxdWVJdGVtcyYmaS5sZW5ndGg+dC51bmlxKGkpLmxlbmd0aClyZXR1cm4gcC5FUlJPUl9JQVJSQVlfVU5JUVVFO2lmKGUuaXRlbXMpZm9yKHZhciBuPXMoZS5pdGVtcywicGxhY2Vob2xkZXIiKSxyPTA7cjxpLmxlbmd0aDtyKyspe3ZhciBvPWlbcl0sYT1kKG4sbyk7aWYoYSlyZXR1cm4gYS5wbGFjZWhvbGRlcn19dmFyIHAsZj17ZW1haWw6ZnVuY3Rpb24odCl7dmFyIGU9L14oKFtePD4oKVxbXF1cXC4sOzpcc0AiXSsoXC5bXjw+KClcW1xdXFwuLDs6XHNAIl0rKSopfCgiLisiKSlAKChcW1swLTldezEsM31cLlswLTldezEsM31cLlswLTldezEsM31cLlswLTldezEsM31dKXwoKFthLXpBLVpcLTAtOV0rXC4pK1thLXpBLVpdezIsfSkpJC87cmV0dXJuIGwodCxlLHAuRVJST1JfSU5WQUxJRF9GT1JNQVRfRU1BSUwpfSx1cmk6ZnVuY3Rpb24odCl7dmFyIGU9L14oPzooPzpodHRwcz98ZnRwKTpcL1wvKSg/OlxTKyg/OjpcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcLlxkezEsM30pezN9KSg/ISg/OjE2OVwuMjU0fDE5MlwuMTY4KSg/OlwuXGR7MSwzfSl7Mn0pKD8hMTcyXC4oPzoxWzYtOV18MlxkfDNbMC0xXSkoPzpcLlxkezEsM30pezJ9KSg/OlsxLTldXGQ/fDFcZFxkfDJbMDFdXGR8MjJbMC0zXSkoPzpcLig/OjE/XGR7MSwyfXwyWzAtNF1cZHwyNVswLTVdKSl7Mn0oPzpcLig/OlsxLTldXGQ/fDFcZFxkfDJbMC00XVxkfDI1WzAtNF0pKXwoPzooPzpbYS16XHUwMGExLVx1ZmZmZjAtOV0tKikqW2Etelx1MDBhMS1cdWZmZmYwLTldKykoPzpcLig/OlthLXpcdTAwYTEtXHVmZmZmMC05XS0qKSpbYS16XHUwMGExLVx1ZmZmZjAtOV0rKSooPzpcLig/OlthLXpcdTAwYTEtXHVmZmZmXXsyLH0pKVwuPykoPzo6XGR7Miw1fSk/KD86W1wvPyNdXFMqKT8kL2k7cmV0dXJuIGwodCxlLHAuRVJST1JfSU5WQUxJRF9GT1JNQVRfVVJJKX0saXB2NDpmdW5jdGlvbih0KXt2YXIgZT0vXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJC87cmV0dXJuIGwodCxlLHAuRVJST1JfSU5WQUxJRF9GT1JNQVRfSVBWNCl9LGhvc3RuYW1lOmZ1bmN0aW9uKHQpe3ZhciBlPS9eKChbYS16QS1aMC05XXxbYS16QS1aMC05XVthLXpBLVowLTlcLV0qW2EtekEtWjAtOV0pXC4pKihbQS1aYS16MC05XXxbQS1aYS16MC05XVtBLVphLXowLTlcLV0qW0EtWmEtejAtOV0pJC87cmV0dXJuIGwodCxlLHAuRVJST1JfSU5WQUxJRF9GT1JNQVRfSE9TVE5BTUUpfX07cmV0dXJuIHA9ZS5Nb2RlbC5leHRlbmQoe3Byb3BzOnt9LGRlcml2ZWQ6e30sbG9jYWw6e30sZXh0cmFQcm9wZXJ0aWVzOiExLGZsYXQ6ITAsZGVmYXVsdHM6e30sY29uc3RydWN0b3I6ZnVuY3Rpb24obil7dGhpcy5vcHRpb25zPW58fHt9O3ZhciByPXRoaXMuX19zY2hlbWFfXz17fSxvPVtdO3IuY29tcHV0ZWRQcm9wZXJ0aWVzPXt9LHIuZXh0cmFQcm9wZXJ0aWVzPXRoaXMuZXh0cmFQcm9wZXJ0aWVzLHIucHJvcHM9dC5jbG9uZSh0LnJlc3VsdCh0aGlzLCJwcm9wcyIpfHx7fSksci5kZXJpdmVkPXQuY2xvbmUodC5yZXN1bHQodGhpcywiZGVyaXZlZCIpfHx7fSksci5sb2NhbD10LmNsb25lKHQucmVzdWx0KHRoaXMsImxvY2FsIil8fHt9KTt2YXIgYT17fTtpZih0LmVhY2godC5leHRlbmQoe30sci5wcm9wcyxyLmxvY2FsKSxmdW5jdGlvbihlLGkpe3ZhciBuPXMoZSxpKTt0LmlzVW5kZWZpbmVkKG4udmFsdWUpfHwoYVtpXT1uLnZhbHVlKSwib2JqZWN0Ij09PW4udHlwZSYmby5wdXNoKGkpfSx0aGlzKSx0LnNpemUoYSkpe3ZhciBsPXQucmVzdWx0KHRoaXMsImRlZmF1bHRzIik7dGhpcy5kZWZhdWx0cz1mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHRzKHt9LGEsbCl9fXRoaXMudmFsaWRhdGU9dC53cmFwKHRoaXMudmFsaWRhdGUsZnVuY3Rpb24oZSl7dmFyIGk9dC5yZXN0KGFyZ3VtZW50cyksbj10LmV4dGVuZCh0aGlzLl92YWxpZGF0ZVNjaGVtYS5hcHBseSh0aGlzLGkpLGUuYXBwbHkodGhpcyxpKSk7cmV0dXJuIHQuc2l6ZShuKSYmbnx8dm9pZCAwfSksdGhpcy5wYXJzZT10LndyYXAodGhpcy5wYXJzZSxmdW5jdGlvbihlKXt2YXIgbj1lLmFwcGx5KHRoaXMsdC5yZXN0KGFyZ3VtZW50cykpO3JldHVybiB0aGlzLmZsYXQmJihuPWkobixvKSksbn0pLGUuTW9kZWwuYXBwbHkodGhpcyxhcmd1bWVudHMpLHQuZWFjaChyLmRlcml2ZWQsZnVuY3Rpb24odCxlKXtyLmNvbXB1dGVkUHJvcGVydGllc1tlXT10aGlzLl9fZ2V0RGVyaXZlZFZhbHVlKGUpO3ZhciBpPXQuZGVwc3x8W107aS5sZW5ndGgmJnRoaXMub24oImNhY2hlOmNsZWFyIGNoYW5nZToiK2kuam9pbigiIGNoYW5nZToiKSxmdW5jdGlvbigpe3ZhciB0PXRoaXMuX19nZXREZXJpdmVkVmFsdWUoZSk7dCE9PXIuY29tcHV0ZWRQcm9wZXJ0aWVzW2VdJiYoci5jb21wdXRlZFByb3BlcnRpZXNbZV09dCx0aGlzLnRyaWdnZXIoImNoYW5nZToiK2UsdGhpcyx0KSl9LHRoaXMpfSx0aGlzKSx0aGlzLm9uKCJzeW5jIixmdW5jdGlvbigpe3RoaXMuX19zeW5jZWREYXRhPXRoaXMudG9KU09OKCl9LHRoaXMpfSx2YWxpZGF0ZTpmdW5jdGlvbigpe30sYWxsb3dzOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX19zY2hlbWFfXyxuPXQuZXh0ZW5kKHt9LGkucHJvcHMsaS5sb2NhbCk7cmV0dXJuISF0LmhhcyhuLGUpfHwhIWEuY2FsbCh0aGlzLGkuZXh0cmFQcm9wZXJ0aWVzLGUpfSxnZXRQcm9wZXJ0eVNjaGVtYTpmdW5jdGlvbihlKXt2YXIgaT10aGlzLl9fc2NoZW1hX187cmV0dXJuIHQucmVkdWNlKFtpLnByb3BzLGkubG9jYWxdLGZ1bmN0aW9uKHQsaSl7cmV0dXJuIHR8fHMoaVtlXSxlKX0sbnVsbCl9LHNldDpmdW5jdGlvbihpLG4pe3ZhciByOyJvYmplY3QiPT10eXBlb2YgaT9yPWk6KHI9e30pW2ldPW4sdC5lYWNoKHIsZnVuY3Rpb24oZSxpKXtpZih0Lmhhcyh0aGlzLl9fc2NoZW1hX18uZGVyaXZlZCxpKSl0aHJvdyJvdmVycmlkaW5nIGRlcml2ZWQgcHJvcGVydGllcyBpcyBub3Qgc3VwcG9ydGVkOiAiK2l9LHRoaXMpO3ZhciBzPVtdO2lmKHQuZWFjaChyLGZ1bmN0aW9uKHQsZSl7dGhpcy5hbGxvd3MoZSl8fHMucHVzaChlKX0sdGhpcykscy5sZW5ndGgpdGhyb3ciZmllbGQgbm90IGFsbG93ZWQ6ICIrcy5qb2luKCIsICIpO3JldHVybiBlLk1vZGVsLnByb3RvdHlwZS5zZXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxnZXQ6ZnVuY3Rpb24oaSl7dmFyIG49dGhpcy5fX3NjaGVtYV9fO3JldHVybiB0LmhhcyhuLmRlcml2ZWQsaSk/bi5kZXJpdmVkW2ldLmNhY2hlIT09ITE/bi5jb21wdXRlZFByb3BlcnRpZXNbaV06dGhpcy5fX2dldERlcml2ZWRWYWx1ZShpKTplLk1vZGVsLnByb3RvdHlwZS5nZXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSx0b0pTT046ZnVuY3Rpb24oaSl7aXx8KGk9e30pO3ZhciByPXQuY2xvbmUoZS5Nb2RlbC5wcm90b3R5cGUudG9KU09OLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkscz10aGlzLl9fc2NoZW1hX187cmV0dXJuIGkudmVyYm9zZT90LmVhY2gocy5kZXJpdmVkLGZ1bmN0aW9uKHQsZSl7cltlXT10aGlzLmdldChlKX0sdGhpcyk6cj10Lm9taXQocix0LmtleXMocy5sb2NhbCkpLHRoaXMuZmxhdCYmKHI9bihyKSkscn0scmVzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5jbGVhcihlKSx0aGlzLnNldCh0LnJlc3VsdCh0aGlzLCJkZWZhdWx0cyIpLGUpfSxpc1N5bmNlZDpmdW5jdGlvbigpe3JldHVybiB0LmlzRXF1YWwodGhpcy5fX3N5bmNlZERhdGEsdGhpcy50b0pTT04oKSl9LHZhbGlkYXRlRmllbGQ6ZnVuY3Rpb24odCl7dmFyIGU9dCYmdGhpcy5nZXRQcm9wZXJ0eVNjaGVtYSh0KTtyZXR1cm4gZSYmZChlLHRoaXMuZ2V0KHQpKX0sX3ZhbGlkYXRlU2NoZW1hOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fX3NjaGVtYV9fO3JldHVybiB0LnJlZHVjZSh0LmV4dGVuZCh7fSxlLnByb3BzLGUubG9jYWwpLGZ1bmN0aW9uKGUsaSxuKXtyZXR1cm4gdC5leHRlbmQoZSx0aGlzLnZhbGlkYXRlRmllbGQobil8fHt9KX0se30sdGhpcyl9LF9fZ2V0RGVyaXZlZFZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX19zY2hlbWFfXy5kZXJpdmVkW2VdO2lmKHQuaXNTdHJpbmcoaSkpe3ZhciBuPWk7aT17ZGVwczpbbl0sZm46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXQobil9fX12YXIgcj1pLmRlcHN8fFtdO3JldHVybiBpLmZuLmFwcGx5KHRoaXMsdC5tYXAocix0aGlzLmdldCx0aGlzKSl9fSx7RVJST1JfQkxBTks6Im1vZGVsLnZhbGlkYXRpb24uZmllbGQuYmxhbmsiLEVSUk9SX1dST05HX1RZUEU6Im1vZGVsLnZhbGlkYXRpb24uZmllbGQud3JvbmcudHlwZSIsRVJST1JfTk9UX0FMTE9XRUQ6Im1vZGVsLnZhbGlkYXRpb24uZmllbGQudmFsdWUubm90LmFsbG93ZWQiLEVSUk9SX0lOVkFMSUQ6Im1vZGVsLnZhbGlkYXRpb24uZmllbGQuaW52YWxpZCIsRVJST1JfSUFSUkFZX1VOSVFVRToibW9kZWwudmFsaWRhdGlvbi5maWVsZC5hcnJheS51bmlxdWUiLEVSUk9SX0lOVkFMSURfRk9STUFUX0VNQUlMOiJtb2RlbC52YWxpZGF0aW9uLmZpZWxkLmludmFsaWQuZm9ybWF0LmVtYWlsIixFUlJPUl9JTlZBTElEX0ZPUk1BVF9VUkk6Im1vZGVsLnZhbGlkYXRpb24uZmllbGQuaW52YWxpZC5mb3JtYXQudXJpIixFUlJPUl9JTlZBTElEX0ZPUk1BVF9JUFY0OiJtb2RlbC52YWxpZGF0aW9uLmZpZWxkLmludmFsaWQuZm9ybWF0LmlwdjQiLEVSUk9SX0lOVkFMSURfRk9STUFUX0hPU1ROQU1FOiJtb2RlbC52YWxpZGF0aW9uLmZpZWxkLmludmFsaWQuZm9ybWF0Lmhvc3RuYW1lIixFUlJPUl9TVFJJTkdfU1RSSU5HX01JTl9MRU5HVEg6Im1vZGVsLnZhbGlkYXRpb24uZmllbGQuc3RyaW5nLm1pbkxlbmd0aCIsRVJST1JfU1RSSU5HX1NUUklOR19NQVhfTEVOR1RIOiJtb2RlbC52YWxpZGF0aW9uLmZpZWxkLnN0cmluZy5tYXhMZW5ndGgifSl9KX0sZnVuY3Rpb24odCxlLGkpe3ZhciBuLHI7bj1baSgyKSxpKDEzNildLHI9ZnVuY3Rpb24odCxlKXt2YXIgaT1mdW5jdGlvbihlKXt2YXIgaT10Lm9taXQoZS5sb2NhbCx0LmtleXMoZS5fYnVpbHRJbkxvY2FsUHJvcHMpKTtyZXR1cm4gdC5zaXplKGUucHJvcHMpK3Quc2l6ZShpKT4wfSxuPWUuZXh0ZW5kKHtmbGF0OiExLGNvbnN0cnVjdG9yOmZ1bmN0aW9uKCl7ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5vbigic3luYyIsdGhpcy5fc2V0U3luY2VkKX0sYWxsb3dzOmZ1bmN0aW9uKCl7cmV0dXJuIWkodGhpcyl8fGUucHJvdG90eXBlLmFsbG93cy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHNldDpmdW5jdGlvbihpLG4pe3ZhciByO3JldHVybiJvYmplY3QiPT10eXBlb2YgaT9yPWk6KHI9e30pW2ldPW4sdChyKS5lYWNoKGZ1bmN0aW9uKGUsaSl7ZSYmdC5pc0FycmF5KGUuX19hdHRyaWJ1dGVzKSYmdGhpcy5vbigiY2hhbmdlOiIrZS5fX2F0dHJpYnV0ZXMuam9pbigiIGNoYW5nZToiKSxmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0KGkpO3QhPT10aGlzLl9fc2NoZW1hX18uY29tcHV0ZWRQcm9wZXJ0aWVzW2ldJiYodGhpcy5fX3NjaGVtYV9fLmNvbXB1dGVkUHJvcGVydGllc1tpXT10LHRoaXMudHJpZ2dlcigiY2hhbmdlOiIraSx0KSl9LHRoaXMpfSx0aGlzKSxlLnByb3RvdHlwZS5zZXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxnZXQ6ZnVuY3Rpb24oKXt2YXIgaT1lLnByb3RvdHlwZS5nZXQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB0LmlzRnVuY3Rpb24oaSk/aS5hcHBseSh0aGlzLHQubWFwKGkuX19hdHRyaWJ1dGVzfHxbXSx0aGlzLmdldCx0aGlzKSk6aX0sdG9KU09OOmZ1bmN0aW9uKGkpe2l8fChpPXt9KTt2YXIgbj1lLnByb3RvdHlwZS50b0pTT04uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB0KG4pLmVhY2goZnVuY3Rpb24odCxlKXsiZnVuY3Rpb24iPT10eXBlb2YgdCYmKGkudmVyYm9zZT9uW2VdPXRoaXMuZ2V0KGUpOmRlbGV0ZSBuW2VdKX0sdGhpcyksaS52ZXJib3NlfHx0KG4pLmVhY2goZnVuY3Rpb24odCxlKXsvXl9fXHcrX18kLy50ZXN0KGUpJiZkZWxldGUgbltlXX0pLG59LHNhbml0aXplQXR0cmlidXRlczpmdW5jdGlvbihlKXt2YXIgaT17fTtyZXR1cm4gdC5lYWNoKGUsZnVuY3Rpb24oZSxuKXt0LmlzRnVuY3Rpb24oZSl8fChpW25dPWUpfSksaX0scmVzZXQ6ZnVuY3Rpb24odCl7dGhpcy5jbGVhcih0KSx0aGlzLnNldCh0aGlzLnNhbml0aXplQXR0cmlidXRlcyh0aGlzLmRlZmF1bHRzKSx0KX0sY2xlYXI6ZnVuY3Rpb24oZSl7dmFyIGk9e307cmV0dXJuIHQuZWFjaCh0aGlzLnNhbml0aXplQXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMpLGZ1bmN0aW9uKHQsZSl7aVtlXT12b2lkIDB9KSx0aGlzLnNldChpLHQuZXh0ZW5kKHt9LGUse3Vuc2V0OiEwfSkpfSxfc2V0U3luY2VkOmZ1bmN0aW9uKGUpe3RoaXMuX3N5bmNlZERhdGE9ZSYmdC5pc0Z1bmN0aW9uKGUudG9KU09OKT9lLnRvSlNPTigpOnt9fSxfZ2V0U3luY2VkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N5bmNlZERhdGF9LGlzU3luY2VkOmZ1bmN0aW9uKCl7cmV0dXJuIHQuaXNFcXVhbCh0aGlzLl9nZXRTeW5jZWQoKSx0aGlzLnRvSlNPTigpKX19LHtDb21wdXRlZFByb3BlcnR5OmZ1bmN0aW9uKCl7dmFyIGU9dC50b0FycmF5KGFyZ3VtZW50cyksaT1lLnBvcCgpO3JldHVybiBpLl9fYXR0cmlidXRlcz1lLnBvcCgpLGl9fSk7cmV0dXJuIG59LmFwcGx5KGUsbiksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLGkpe3ZhciBuO249ZnVuY3Rpb24oKXt9LmNhbGwoZSxpLGUsdCksISh2b2lkIDAhPT1uJiYodC5leHBvcnRzPW4pKX0sZnVuY3Rpb24odCxlLGkpe3ZhciBuLHI7bj1baSgxNDEpXSxyPWZ1bmN0aW9uKHQpe3JldHVybntUYWJsZUZhY3Rvcnk6dH19LmFwcGx5KGUsbiksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLGkpe3ZhciBuLHIsczshZnVuY3Rpb24obyxhKXtyPVtpKDIpLGkoMTQyKV0sbj1hLHM9ImZ1bmN0aW9uIj09dHlwZW9mIG4/bi5hcHBseShlLHIpOm4sISh2b2lkIDAhPT1zJiYodC5leHBvcnRzPXMpKX0odGhpcyxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIGkoZSl7cmV0dXJuIHQubWFwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIHQuaXNTdHJpbmcoZSkmJihlPXtuYW1lOmV9KSwhZS5uYW1lJiZlLmZpZWxkJiYoZT10LmV4dGVuZCh7bmFtZTplLmZpZWxkfSxlKSksZX0pfWZ1bmN0aW9uIG4oZSl7dmFyIGk9e307cmV0dXJuIHQuZWFjaChlfHx7fSxmdW5jdGlvbihlLG4pe2lbbl09ZnVuY3Rpb24oaSl7aS5wcmV2ZW50RGVmYXVsdCgpLGkuc3RvcFByb3BhZ2F0aW9uKCksdC5pc0Z1bmN0aW9uKGUpJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LHRoaXMpLGl9cmV0dXJue2NyZWF0ZUhlYWRlcjpmdW5jdGlvbihuKXtyZXR1cm4gZS5leHRlbmQoe3RhZ05hbWU6InRoZWFkIix0ZW1wbGF0ZToiPHRyPjwvdHI+Iixpbml0aWFsaXplOmZ1bmN0aW9uKCl7dC5lYWNoKGkobiksZnVuY3Rpb24odCl7dGhpcy5hZGQoZS5leHRlbmQoe2VsOic8dGggcm9sZT0iY29sdW1uaGVhZGVyIj48L3RoPicsY2hpbGRyZW46dC5oZWFkZXJWaWV3JiZbdC5oZWFkZXJWaWV3XSx0ZW1wbGF0ZTp0LmhlYWRlclZpZXc/bnVsbDp0LmxhYmVsfHwiJm5ic3A7In0pLCJ0ciIpfSx0aGlzKX19KX0sY3JlYXRlUm93OmZ1bmN0aW9uKG4pe3ZhciByPXRoaXM7cmV0dXJuIGUuZXh0ZW5kKHt0YWdOYW1lOiJ0Ym9keSIsdGVtcGxhdGU6Jzx0ciByb2xlPSJyb3ciPjwvdHI+JyxjaGlsZHJlbjp0Lm1hcChpKG4pLGZ1bmN0aW9uKHQpe3JldHVybltyLmNyZWF0ZUNlbGwodCksInRyIl19KX0pfSxjcmVhdGVDZWxsOmZ1bmN0aW9uKGkpe3ZhciByPXQuZXh0ZW5kKHQucGljayhpLCJjbGFzc05hbWUiLCJhdHRyaWJ1dGVzIiwiaW5pdGlhbGl6ZSIpLHt0YWdOYW1lOiJ0ZCIsZXZlbnRzOm4oaS5ldmVudHMpLGNoaWxkcmVuOmkudmlldyYmW2kudmlld10sdGVtcGxhdGU6aS52aWV3P251bGw6aS50ZW1wbGF0ZXx8Int7IitpLm5hbWUrIn19In0pO3JldHVybiBlLmV4dGVuZChyKX0sX19ub3JtYWxpemVGaWVsZHM6aSxfX2NsZWFuRXZlbnRzOm59fSl9LGZ1bmN0aW9uKHQsZSxpKXt2YXIgbixyLHM7IWZ1bmN0aW9uKG8sYSl7cj1baSgyKSxpKDM1KV0sbj1hLHM9ImZ1bmN0aW9uIj09dHlwZW9mIG4/bi5hcHBseShlLHIpOm4sISh2b2lkIDAhPT1zJiYodC5leHBvcnRzPXMpKX0odGhpcyxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIGkodCxlKXtmb3IodmFyIGk9MDtpPHRbb10ubGVuZ3RoO2krKylpZihlLmNpZD09PXRbb11baV0uY2lkKXJldHVybiBpfWZ1bmN0aW9uIG4oKXt9ZnVuY3Rpb24gcih0KXt0W2FdPSEwO3ZhciBlPXQucmVuZGVyVGVtcGxhdGUodC50ZW1wbGF0ZSk7ZT90LiRlbC5odG1sKGUpOnQubGVuZ3RoJiZ0LiRlbC5lbXB0eSgpLHQuZWFjaChmdW5jdGlvbih0KXt0W3VdKCl9KX1mdW5jdGlvbiBzKGUpe3ZhciBpPS9eKD8hKD86ZGVsZWdhdGV8dW5kZWxlZ2F0ZXxfKSkoW2EtekEtWjAtOV0rKSg/OkV2ZW50cykkLzt0LmVhY2godC5hbGxLZXlzKGUpLGZ1bmN0aW9uKG4pe3ZhciByPW4ubWF0Y2goaSk7aWYocil7dmFyIHM9dC5yZXN1bHQoZSxuKSxvPWUub3B0aW9uc1tyWzFdXXx8ZVtyWzFdXTtvJiZ0LmlzT2JqZWN0KHMpJiZ0LmlzRnVuY3Rpb24oby50cmlnZ2VyKSYmdC5lYWNoKHMsZnVuY3Rpb24oaSxuKXt2YXIgcj10LmlzRnVuY3Rpb24oaSk/W2ldOnQucmVkdWNlKGkuc3BsaXQoL1xzKy8pLGZ1bmN0aW9uKGksbil7cmV0dXJuIHQuaXNGdW5jdGlvbihlW25dKSYmaS5wdXNoKGVbbl0pLGl9LFtdKTt0LmVhY2gocixmdW5jdGlvbih0KXtlLmxpc3RlblRvKG8sbix0KX0pfSl9fSl9dmFyIG89Il9fY2hpbGRyZW5fXyIsYT0iX19yZW5kZXJlZF9fIixsPSJfX3BhcmVudF9fIixjPSJfX2NoaWxkcmVuX2RlZmluaXRpb25zX18iLHU9Il9fYWRkX3RvX2NvbnRhaW5lcl9fIixkPWUuVmlldy5leHRlbmQoe2NvbnN0cnVjdG9yOmZ1bmN0aW9uKGkpe3RoaXMub3B0aW9ucz1pfHx7fSx0LmV4dGVuZCh0aGlzLHQucGljayh0aGlzLm9wdGlvbnMsInN0YXRlIiwic2V0dGluZ3MiKSksdGhpc1tvXQ==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("aSA8IGxlbjsgaSsrKSB7CgkJICAgICAgdmFyIG9wY29kZSA9IHRoaXMub3Bjb2Rlc1tpXSwKCQkgICAgICAgICAgb3RoZXJPcGNvZGUgPSBvdGhlci5vcGNvZGVzW2ldOwoJCSAgICAgIGlmIChvcGNvZGUub3Bjb2RlICE9PSBvdGhlck9wY29kZS5vcGNvZGUgfHwgIWFyZ0VxdWFscyhvcGNvZGUuYXJncywgb3RoZXJPcGNvZGUuYXJncykpIHsKCQkgICAgICAgIHJldHVybiBmYWxzZTsKCQkgICAgICB9CgkJICAgIH0KCgkJICAgIC8vIFdlIGtub3cgdGhhdCBsZW5ndGggaXMgdGhlIHNhbWUgYmV0d2VlbiB0aGUgdHdvIGFycmF5cyBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IHRpZWQKCQkgICAgLy8gdG8gdGhlIG9wY29kZSBiZWhhdmlvciBhYm92ZS4KCQkgICAgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7CgkJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKCQkgICAgICBpZiAoIXRoaXMuY2hpbGRyZW5baV0uZXF1YWxzKG90aGVyLmNoaWxkcmVuW2ldKSkgewoJCSAgICAgICAgcmV0dXJuIGZhbHNlOwoJCSAgICAgIH0KCQkgICAgfQoKCQkgICAgcmV0dXJuIHRydWU7CgkJICB9LAoKCQkgIGd1aWQ6IDAsCgoJCSAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZShwcm9ncmFtLCBvcHRpb25zKSB7CgkJICAgIHRoaXMuc291cmNlTm9kZSA9IFtdOwoJCSAgICB0aGlzLm9wY29kZXMgPSBbXTsKCQkgICAgdGhpcy5jaGlsZHJlbiA9IFtdOwoJCSAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwoJCSAgICB0aGlzLnN0cmluZ1BhcmFtcyA9IG9wdGlvbnMuc3RyaW5nUGFyYW1zOwoJCSAgICB0aGlzLnRyYWNrSWRzID0gb3B0aW9ucy50cmFja0lkczsKCgkJICAgIG9wdGlvbnMuYmxvY2tQYXJhbXMgPSBvcHRpb25zLmJsb2NrUGFyYW1zIHx8IFtdOwoKCQkgICAgLy8gVGhlc2UgY2hhbmdlcyB3aWxsIHByb3BhZ2F0ZSB0byB0aGUgb3RoZXIgY29tcGlsZXIgY29tcG9uZW50cwoJCSAgICB2YXIga25vd25IZWxwZXJzID0gb3B0aW9ucy5rbm93bkhlbHBlcnM7CgkJICAgIG9wdGlvbnMua25vd25IZWxwZXJzID0gewoJCSAgICAgICdoZWxwZXJNaXNzaW5nJzogdHJ1ZSwKCQkgICAgICAnYmxvY2tIZWxwZXJNaXNzaW5nJzogdHJ1ZSwKCQkgICAgICAnZWFjaCc6IHRydWUsCgkJICAgICAgJ2lmJzogdHJ1ZSwKCQkgICAgICAndW5sZXNzJzogdHJ1ZSwKCQkgICAgICAnd2l0aCc6IHRydWUsCgkJICAgICAgJ2xvZyc6IHRydWUsCgkJICAgICAgJ2xvb2t1cCc6IHRydWUKCQkgICAgfTsKCQkgICAgaWYgKGtub3duSGVscGVycykgewoJCSAgICAgIGZvciAodmFyIF9uYW1lIGluIGtub3duSGVscGVycykgewoJCSAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KCQkgICAgICAgIGlmIChfbmFtZSBpbiBrbm93bkhlbHBlcnMpIHsKCQkgICAgICAgICAgb3B0aW9ucy5rbm93bkhlbHBlcnNbX25hbWVdID0ga25vd25IZWxwZXJzW19uYW1lXTsKCQkgICAgICAgIH0KCQkgICAgICB9CgkJICAgIH0KCgkJICAgIHJldHVybiB0aGlzLmFjY2VwdChwcm9ncmFtKTsKCQkgIH0sCgoJCSAgY29tcGlsZVByb2dyYW06IGZ1bmN0aW9uIGNvbXBpbGVQcm9ncmFtKHByb2dyYW0pIHsKCQkgICAgdmFyIGNoaWxkQ29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpLAoJCSAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwCgkJICAgIHJlc3VsdCA9IGNoaWxkQ29tcGlsZXIuY29tcGlsZShwcm9ncmFtLCB0aGlzLm9wdGlvbnMpLAoJCSAgICAgICAgZ3VpZCA9IHRoaXMuZ3VpZCsrOwoKCQkgICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsOwoKCQkgICAgdGhpcy5jaGlsZHJlbltndWlkXSA9IHJlc3VsdDsKCQkgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCByZXN1bHQudXNlRGVwdGhzOwoKCQkgICAgcmV0dXJuIGd1aWQ7CgkJICB9LAoKCQkgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KG5vZGUpIHsKCQkgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovCgkJICAgIGlmICghdGhpc1tub2RlLnR5cGVdKSB7CgkJICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1Vua25vd24gdHlwZTogJyArIG5vZGUudHlwZSwgbm9kZSk7CgkJICAgIH0KCgkJICAgIHRoaXMuc291cmNlTm9kZS51bnNoaWZ0KG5vZGUpOwoJCSAgICB2YXIgcmV0ID0gdGhpc1tub2RlLnR5cGVdKG5vZGUpOwoJCSAgICB0aGlzLnNvdXJjZU5vZGUuc2hpZnQoKTsKCQkgICAgcmV0dXJuIHJldDsKCQkgIH0sCgoJCSAgUHJvZ3JhbTogZnVuY3Rpb24gUHJvZ3JhbShwcm9ncmFtKSB7CgkJICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy51bnNoaWZ0KHByb2dyYW0uYmxvY2tQYXJhbXMpOwoKCQkgICAgdmFyIGJvZHkgPSBwcm9ncmFtLmJvZHksCgkJICAgICAgICBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7CgkJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keUxlbmd0aDsgaSsrKSB7CgkJICAgICAgdGhpcy5hY2NlcHQoYm9keVtpXSk7CgkJICAgIH0KCgkJICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5zaGlmdCgpOwoKCQkgICAgdGhpcy5pc1NpbXBsZSA9IGJvZHlMZW5ndGggPT09IDE7CgkJICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBwcm9ncmFtLmJsb2NrUGFyYW1zID8gcHJvZ3JhbS5ibG9ja1BhcmFtcy5sZW5ndGggOiAwOwoKCQkgICAgcmV0dXJuIHRoaXM7CgkJICB9LAoKCQkgIEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiBCbG9ja1N0YXRlbWVudChibG9jaykgewoJCSAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKGJsb2NrKTsKCgkJICAgIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSwKCQkgICAgICAgIGludmVyc2UgPSBibG9jay5pbnZlcnNlOwoKCQkgICAgcHJvZ3JhbSA9IHByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShwcm9ncmFtKTsKCQkgICAgaW52ZXJzZSA9IGludmVyc2UgJiYgdGhpcy5jb21waWxlUHJvZ3JhbShpbnZlcnNlKTsKCgkJICAgIHZhciB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKGJsb2NrKTsKCgkJICAgIGlmICh0eXBlID09PSAnaGVscGVyJykgewoJCSAgICAgIHRoaXMuaGVscGVyU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpOwoJCSAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7CgkJICAgICAgdGhpcy5zaW1wbGVTZXhwcihibG9jayk7CgoJCSAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG8KCQkgICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2AKCQkgICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTsKCQkgICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTsKCQkgICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7CgkJICAgICAgdGhpcy5vcGNvZGUoJ2Jsb2NrVmFsdWUnLCBibG9jay5wYXRoLm9yaWdpbmFsKTsKCQkgICAgfSBlbHNlIHsKCQkgICAgICB0aGlzLmFtYmlndW91c1NleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTsKCgkJICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0bwoJCSAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYAoJCSAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pOwoJCSAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpOwoJCSAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTsKCQkgICAgICB0aGlzLm9wY29kZSgnYW1iaWd1b3VzQmxvY2tWYWx1ZScpOwoJCSAgICB9CgoJCSAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7CgkJICB9LAoKCQkgIERlY29yYXRvckJsb2NrOiBmdW5jdGlvbiBEZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpIHsKCQkgICAgdmFyIHByb2dyYW0gPSBkZWNvcmF0b3IucHJvZ3JhbSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGRlY29yYXRvci5wcm9ncmFtKTsKCQkgICAgdmFyIHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoZGVjb3JhdG9yLCBwcm9ncmFtLCB1bmRlZmluZWQpLAoJCSAgICAgICAgcGF0aCA9IGRlY29yYXRvci5wYXRoOwoKCQkgICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTsKCQkgICAgdGhpcy5vcGNvZGUoJ3JlZ2lzdGVyRGVjb3JhdG9yJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCk7CgkJICB9LAoKCQkgIFBhcnRpYWxTdGF0ZW1lbnQ6IGZ1bmN0aW9uIFBhcnRpYWxTdGF0ZW1lbnQocGFydGlhbCkgewoJCSAgICB0aGlzLnVzZVBhcnRpYWwgPSB0cnVlOwoKCQkgICAgdmFyIHByb2dyYW0gPSBwYXJ0aWFsLnByb2dyYW07CgkJICAgIGlmIChwcm9ncmFtKSB7CgkJICAgICAgcHJvZ3JhbSA9IHRoaXMuY29tcGlsZVByb2dyYW0ocGFydGlhbC5wcm9ncmFtKTsKCQkgICAgfQoKCQkgICAgdmFyIHBhcmFtcyA9IHBhcnRpYWwucGFyYW1zOwoJCSAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHsKCQkgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5zdXBwb3J0ZWQgbnVtYmVyIG9mIHBhcnRpYWwgYXJndW1lbnRzOiAnICsgcGFyYW1zLmxlbmd0aCwgcGFydGlhbCk7CgkJICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5sZW5ndGgpIHsKCQkgICAgICBpZiAodGhpcy5vcHRpb25zLmV4cGxpY2l0UGFydGlhbENvbnRleHQpIHsKCQkgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTsKCQkgICAgICB9IGVsc2UgewoJCSAgICAgICAgcGFyYW1zLnB1c2goeyB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLCBwYXJ0czogW10sIGRlcHRoOiAwIH0pOwoJCSAgICAgIH0KCQkgICAgfQoKCQkgICAgdmFyIHBhcnRpYWxOYW1lID0gcGFydGlhbC5uYW1lLm9yaWdpbmFsLAoJCSAgICAgICAgaXNEeW5hbWljID0gcGFydGlhbC5uYW1lLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJzsKCQkgICAgaWYgKGlzRHluYW1pYykgewoJCSAgICAgIHRoaXMuYWNjZXB0KHBhcnRpYWwubmFtZSk7CgkJICAgIH0KCgkJICAgIHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMocGFydGlhbCwgcHJvZ3JhbSwgdW5kZWZpbmVkLCB0cnVlKTsKCgkJICAgIHZhciBpbmRlbnQgPSBwYXJ0aWFsLmluZGVudCB8fCAnJzsKCQkgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50SW5kZW50ICYmIGluZGVudCkgewoJCSAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgaW5kZW50KTsKCQkgICAgICBpbmRlbnQgPSAnJzsKCQkgICAgfQoKCQkgICAgdGhpcy5vcGNvZGUoJ2ludm9rZVBhcnRpYWwnLCBpc0R5bmFtaWMsIHBhcnRpYWxOYW1lLCBpbmRlbnQpOwoJCSAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7CgkJICB9LAoJCSAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQocGFydGlhbEJsb2NrKSB7CgkJICAgIHRoaXMuUGFydGlhbFN0YXRlbWVudChwYXJ0aWFsQmxvY2spOwoJCSAgfSwKCgkJICBNdXN0YWNoZVN0YXRlbWVudDogZnVuY3Rpb24gTXVzdGFjaGVTdGF0ZW1lbnQobXVzdGFjaGUpIHsKCQkgICAgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKTsKCgkJICAgIGlmIChtdXN0YWNoZS5lc2NhcGVkICYmICF0aGlzLm9wdGlvbnMubm9Fc2NhcGUpIHsKCQkgICAgICB0aGlzLm9wY29kZSgnYXBwZW5kRXNjYXBlZCcpOwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTsKCQkgICAgfQoJCSAgfSwKCQkgIERlY29yYXRvcjogZnVuY3Rpb24gRGVjb3JhdG9yKGRlY29yYXRvcikgewoJCSAgICB0aGlzLkRlY29yYXRvckJsb2NrKGRlY29yYXRvcik7CgkJICB9LAoKCQkgIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uIENvbnRlbnRTdGF0ZW1lbnQoY29udGVudCkgewoJCSAgICBpZiAoY29udGVudC52YWx1ZSkgewoJCSAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgY29udGVudC52YWx1ZSk7CgkJICAgIH0KCQkgIH0sCgoJCSAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29tbWVudFN0YXRlbWVudCgpIHt9LAoKCQkgIFN1YkV4cHJlc3Npb246IGZ1bmN0aW9uIFN1YkV4cHJlc3Npb24oc2V4cHIpIHsKCQkgICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcik7CgkJICAgIHZhciB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKHNleHByKTsKCgkJICAgIGlmICh0eXBlID09PSAnc2ltcGxlJykgewoJCSAgICAgIHRoaXMuc2ltcGxlU2V4cHIoc2V4cHIpOwoJCSAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7CgkJICAgICAgdGhpcy5oZWxwZXJTZXhwcihzZXhwcik7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgdGhpcy5hbWJpZ3VvdXNTZXhwcihzZXhwcik7CgkJICAgIH0KCQkgIH0sCgkJICBhbWJpZ3VvdXNTZXhwcjogZnVuY3Rpb24gYW1iaWd1b3VzU2V4cHIoc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHsKCQkgICAgdmFyIHBhdGggPSBzZXhwci5wYXRoLAoJCSAgICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF0sCgkJICAgICAgICBpc0Jsb2NrID0gcHJvZ3JhbSAhPSBudWxsIHx8IGludmVyc2UgIT0gbnVsbDsKCgkJICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7CgoJCSAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTsKCQkgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7CgoJCSAgICBwYXRoLnN0cmljdCA9IHRydWU7CgkJICAgIHRoaXMuYWNjZXB0KHBhdGgpOwoKCQkgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUFtYmlndW91cycsIG5hbWUsIGlzQmxvY2spOwoJCSAgfSwKCgkJICBzaW1wbGVTZXhwcjogZnVuY3Rpb24gc2ltcGxlU2V4cHIoc2V4cHIpIHsKCQkgICAgdmFyIHBhdGggPSBzZXhwci5wYXRoOwoJCSAgICBwYXRoLnN0cmljdCA9IHRydWU7CgkJICAgIHRoaXMuYWNjZXB0KHBhdGgpOwoJCSAgICB0aGlzLm9wY29kZSgncmVzb2x2ZVBvc3NpYmxlTGFtYmRhJyk7CgkJICB9LAoKCQkgIGhlbHBlclNleHByOiBmdW5jdGlvbiBoZWxwZXJTZXhwcihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkgewoJCSAgICB2YXIgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSksCgkJICAgICAgICBwYXRoID0gc2V4cHIucGF0aCwKCQkgICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdOwoKCQkgICAgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHsKCQkgICAgICB0aGlzLm9wY29kZSgnaW52b2tlS25vd25IZWxwZXInLCBwYXJhbXMubGVuZ3RoLCBuYW1lKTsKCQkgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzT25seSkgewoJCSAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSwgc2V4cHIpOwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTsKCQkgICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTsKCgkJICAgICAgdGhpcy5hY2NlcHQocGF0aCk7CgkJICAgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwsIF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zaW1wbGVJZChwYXRoKSk7CgkJICAgIH0KCQkgIH0sCgoJCSAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uIFBhdGhFeHByZXNzaW9uKHBhdGgpIHsKCQkgICAgdGhpcy5hZGREZXB0aChwYXRoLmRlcHRoKTsKCQkgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTsKCgkJICAgIHZhciBuYW1lID0gcGF0aC5wYXJ0c1swXSwKCQkgICAgICAgIHNjb3BlZCA9IF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zY29wZWRJZChwYXRoKSwKCQkgICAgICAgIGJsb2NrUGFyYW1JZCA9ICFwYXRoLmRlcHRoICYmICFzY29wZWQgJiYgdGhpcy5ibG9ja1BhcmFtSW5kZXgobmFtZSk7CgoJCSAgICBpZiAoYmxvY2tQYXJhbUlkKSB7CgkJICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cEJsb2NrUGFyYW0nLCBibG9ja1BhcmFtSWQsIHBhdGgucGFydHMpOwoJCSAgICB9IGVsc2UgaWYgKCFuYW1lKSB7CgkJICAgICAgLy8gQ29udGV4dCByZWZlcmVuY2UsIGkuZS4gYHt7Zm9vIC59fWAgb3IgYHt7Zm9vIC4ufX1gCgkJICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hDb250ZXh0Jyk7CgkJICAgIH0gZWxzZSBpZiAocGF0aC5kYXRhKSB7CgkJICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0cnVlOwoJCSAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBEYXRhJywgcGF0aC5kZXB0aCwgcGF0aC5wYXJ0cywgcGF0aC5zdHJpY3QpOwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBPbkNvbnRleHQnLCBwYXRoLnBhcnRzLCBwYXRoLmZhbHN5LCBwYXRoLnN0cmljdCwgc2NvcGVkKTsKCQkgICAgfQoJCSAgfSwKCgkJICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKHN0cmluZykgewoJCSAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZycsIHN0cmluZy52YWx1ZSk7CgkJICB9LAoKCQkgIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uIE51bWJlckxpdGVyYWwobnVtYmVyKSB7CgkJICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIG51bWJlci52YWx1ZSk7CgkJICB9LAoKCQkgIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbiBCb29sZWFuTGl0ZXJhbChib29sKSB7CgkJICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIGJvb2wudmFsdWUpOwoJCSAgfSwKCgkJICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbiBVbmRlZmluZWRMaXRlcmFsKCkgewoJCSAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7CgkJICB9LAoKCQkgIE51bGxMaXRlcmFsOiBmdW5jdGlvbiBOdWxsTGl0ZXJhbCgpIHsKCQkgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ251bGwnKTsKCQkgIH0sCgoJCSAgSGFzaDogZnVuY3Rpb24gSGFzaChoYXNoKSB7CgkJICAgIHZhciBwYWlycyA9IGhhc2gucGFpcnMsCgkJICAgICAgICBpID0gMCwKCQkgICAgICAgIGwgPSBwYWlycy5sZW5ndGg7CgoJCSAgICB0aGlzLm9wY29kZSgncHVzaEhhc2gnKTsKCgkJICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7CgkJICAgICAgdGhpcy5wdXNoUGFyYW0ocGFpcnNbaV0udmFsdWUpOwoJCSAgICB9CgkJICAgIHdoaWxlIChpLS0pIHsKCQkgICAgICB0aGlzLm9wY29kZSgnYXNzaWduVG9IYXNoJywgcGFpcnNbaV0ua2V5KTsKCQkgICAgfQoJCSAgICB0aGlzLm9wY29kZSgncG9wSGFzaCcpOwoJCSAgfSwKCgkJICAvLyBIRUxQRVJTCgkJICBvcGNvZGU6IGZ1bmN0aW9uIG9wY29kZShuYW1lKSB7CgkJICAgIHRoaXMub3Bjb2Rlcy5wdXNoKHsgb3Bjb2RlOiBuYW1lLCBhcmdzOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGxvYzogdGhpcy5zb3VyY2VOb2RlWzBdLmxvYyB9KTsKCQkgIH0sCgoJCSAgYWRkRGVwdGg6IGZ1bmN0aW9uIGFkZERlcHRoKGRlcHRoKSB7CgkJICAgIGlmICghZGVwdGgpIHsKCQkgICAgICByZXR1cm47CgkJICAgIH0KCgkJICAgIHRoaXMudXNlRGVwdGhzID0gdHJ1ZTsKCQkgIH0sCgoJCSAgY2xhc3NpZnlTZXhwcjogZnVuY3Rpb24gY2xhc3NpZnlTZXhwcihzZXhwcikgewoJCSAgICB2YXIgaXNTaW1wbGUgPSBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuc2ltcGxlSWQoc2V4cHIucGF0aCk7CgoJCSAgICB2YXIgaXNCbG9ja1BhcmFtID0gaXNTaW1wbGUgJiYgISF0aGlzLmJsb2NrUGFyYW1JbmRleChzZXhwci5wYXRoLnBhcnRzWzBdKTsKCgkJICAgIC8vIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGlmOgoJCSAgICAvLyAqIGl0cyBpZCBpcyBzaW1wbGUgKGEgc2luZ2xlIHBhcnQsIG5vdCBgdGhpc2Agb3IgYC4uYCkKCQkgICAgdmFyIGlzSGVscGVyID0gIWlzQmxvY2tQYXJhbSAmJiBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuaGVscGVyRXhwcmVzc2lvbihzZXhwcik7CgoJCSAgICAvLyBpZiBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBidXQgbm90IGEgZGVmaW5pdGUKCQkgICAgLy8gaGVscGVyLCBpdCBpcyBhbWJpZ3VvdXMsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGluIGEgbGF0ZXIKCQkgICAgLy8gcGFzcyBvciBhdCBydW50aW1lLgoJCSAgICB2YXIgaXNFbGlnaWJsZSA9ICFpc0Jsb2NrUGFyYW0gJiYgKGlzSGVscGVyIHx8IGlzU2ltcGxlKTsKCgkJICAgIC8vIGlmIGFtYmlndW91cywgd2UgY2FuIHBvc3NpYmx5IHJlc29sdmUgdGhlIGFtYmlndWl0eSBub3cKCQkgICAgLy8gQW4gZWxpZ2libGUgaGVscGVyIGlzIG9uZSB0aGF0IGRvZXMgbm90IGhhdmUgYSBjb21wbGV4IHBhdGgsIGkuZS4gYHRoaXMuZm9vYCwgYC4uL2Zvb2AgZXRjLgoJCSAgICBpZiAoaXNFbGlnaWJsZSAmJiAhaXNIZWxwZXIpIHsKCQkgICAgICB2YXIgX25hbWUyID0gc2V4cHIucGF0aC5wYXJ0c1swXSwKCQkgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJICAgICAgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzW19uYW1lMl0pIHsKCQkgICAgICAgIGlzSGVscGVyID0gdHJ1ZTsKCQkgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzT25seSkgewoJCSAgICAgICAgaXNFbGlnaWJsZSA9IGZhbHNlOwoJCSAgICAgIH0KCQkgICAgfQoKCQkgICAgaWYgKGlzSGVscGVyKSB7CgkJICAgICAgcmV0dXJuICdoZWxwZXInOwoJCSAgICB9IGVsc2UgaWYgKGlzRWxpZ2libGUpIHsKCQkgICAgICByZXR1cm4gJ2FtYmlndW91cyc7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgcmV0dXJuICdzaW1wbGUnOwoJCSAgICB9CgkJICB9LAoKCQkgIHB1c2hQYXJhbXM6IGZ1bmN0aW9uIHB1c2hQYXJhbXMocGFyYW1zKSB7CgkJICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCSAgICAgIHRoaXMucHVzaFBhcmFtKHBhcmFtc1tpXSk7CgkJICAgIH0KCQkgIH0sCgoJCSAgcHVzaFBhcmFtOiBmdW5jdGlvbiBwdXNoUGFyYW0odmFsKSB7CgkJICAgIHZhciB2YWx1ZSA9IHZhbC52YWx1ZSAhPSBudWxsID8gdmFsLnZhbHVlIDogdmFsLm9yaWdpbmFsIHx8ICcnOwoKCQkgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7CgkJICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHsKCQkgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXihcLj9cLlwvKSovZywgJycpLnJlcGxhY2UoL1wvL2csICcuJyk7CgkJICAgICAgfQoKCQkgICAgICBpZiAodmFsLmRlcHRoKSB7CgkJICAgICAgICB0aGlzLmFkZERlcHRoKHZhbC5kZXB0aCk7CgkJICAgICAgfQoJCSAgICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgdmFsLmRlcHRoIHx8IDApOwoJCSAgICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nUGFyYW0nLCB2YWx1ZSwgdmFsLnR5cGUpOwoKCQkgICAgICBpZiAodmFsLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykgewoJCSAgICAgICAgLy8gU3ViRXhwcmVzc2lvbnMgZ2V0IGV2YWx1YXRlZCBhbmQgcGFzc2VkIGluCgkJICAgICAgICAvLyBpbiBzdHJpbmcgcGFyYW1zIG1vZGUuCgkJICAgICAgICB0aGlzLmFjY2VwdCh2YWwpOwoJCSAgICAgIH0KCQkgICAgfSBlbHNlIHsKCQkgICAgICBpZiAodGhpcy50cmFja0lkcykgewoJCSAgICAgICAgdmFyIGJsb2NrUGFyYW1JbmRleCA9IHVuZGVmaW5lZDsKCQkgICAgICAgIGlmICh2YWwucGFydHMgJiYgIV9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zY29wZWRJZCh2YWwpICYmICF2YWwuZGVwdGgpIHsKCQkgICAgICAgICAgYmxvY2tQYXJhbUluZGV4ID0gdGhpcy5ibG9ja1BhcmFtSW5kZXgodmFsLnBhcnRzWzBdKTsKCQkgICAgICAgIH0KCQkgICAgICAgIGlmIChibG9ja1BhcmFtSW5kZXgpIHsKCQkgICAgICAgICAgdmFyIGJsb2NrUGFyYW1DaGlsZCA9IHZhbC5wYXJ0cy5zbGljZSgxKS5qb2luKCcuJyk7CgkJICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCAnQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JbmRleCwgYmxvY2tQYXJhbUNoaWxkKTsKCQkgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgIHZhbHVlID0gdmFsLm9yaWdpbmFsIHx8IHZhbHVlOwoJCSAgICAgICAgICBpZiAodmFsdWUucmVwbGFjZSkgewoJCSAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXnRoaXMoPzpcLnwkKS8sICcnKS5yZXBsYWNlKC9eXC5cLy8sICcnKS5yZXBsYWNlKC9eXC4kLywgJycpOwoJCSAgICAgICAgICB9CgoJCSAgICAgICAgICB0aGlzLm9wY29kZSgncHVzaElkJywgdmFsLnR5cGUsIHZhbHVlKTsKCQkgICAgICAgIH0KCQkgICAgICB9CgkJICAgICAgdGhpcy5hY2NlcHQodmFsKTsKCQkgICAgfQoJCSAgfSwKCgkJICBzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtczogZnVuY3Rpb24gc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoc2V4cHIsIHByb2dyYW0sIGludmVyc2UsIG9taXRFbXB0eSkgewoJCSAgICB2YXIgcGFyYW1zID0gc2V4cHIucGFyYW1zOwoJCSAgICB0aGlzLnB1c2hQYXJhbXMocGFyYW1zKTsKCgkJICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pOwoJCSAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTsKCgkJICAgIGlmIChzZXhwci5oYXNoKSB7CgkJICAgICAgdGhpcy5hY2NlcHQoc2V4cHIuaGFzaCk7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcsIG9taXRFbXB0eSk7CgkJICAgIH0KCgkJICAgIHJldHVybiBwYXJhbXM7CgkJICB9LAoKCQkgIGJsb2NrUGFyYW1JbmRleDogZnVuY3Rpb24gYmxvY2tQYXJhbUluZGV4KG5hbWUpIHsKCQkgICAgZm9yICh2YXIgZGVwdGggPSAwLCBsZW4gPSB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMubGVuZ3RoOyBkZXB0aCA8IGxlbjsgZGVwdGgrKykgewoJCSAgICAgIHZhciBibG9ja1BhcmFtcyA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtc1tkZXB0aF0sCgkJICAgICAgICAgIHBhcmFtID0gYmxvY2tQYXJhbXMgJiYgX3V0aWxzLmluZGV4T2YoYmxvY2tQYXJhbXMsIG5hbWUpOwoJCSAgICAgIGlmIChibG9ja1BhcmFtcyAmJiBwYXJhbSA+PSAwKSB7CgkJICAgICAgICByZXR1cm4gW2RlcHRoLCBwYXJhbV07CgkJICAgICAgfQoJCSAgICB9CgkJICB9CgkJfTsKCgkJZnVuY3Rpb24gcHJlY29tcGlsZShpbnB1dCwgb3B0aW9ucywgZW52KSB7CgkJICBpZiAoaW5wdXQgPT0gbnVsbCB8fCB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnICYmIGlucHV0LnR5cGUgIT09ICdQcm9ncmFtJykgewoJCSAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnWW91IG11c3QgcGFzcyBhIHN0cmluZyBvciBIYW5kbGViYXJzIEFTVCB0byBIYW5kbGViYXJzLnByZWNvbXBpbGUuIFlvdSBwYXNzZWQgJyArIGlucHV0KTsKCQkgIH0KCgkJICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCQkgIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkgewoJCSAgICBvcHRpb25zLmRhdGEgPSB0cnVlOwoJCSAgfQoJCSAgaWYgKG9wdGlvbnMuY29tcGF0KSB7CgkJICAgIG9wdGlvbnMudXNlRGVwdGhzID0gdHJ1ZTsKCQkgIH0KCgkJICB2YXIgYXN0ID0gZW52LnBhcnNlKGlucHV0LCBvcHRpb25zKSwKCQkgICAgICBlbnZpcm9ubWVudCA9IG5ldyBlbnYuQ29tcGlsZXIoKS5jb21waWxlKGFzdCwgb3B0aW9ucyk7CgkJICByZXR1cm4gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zKTsKCQl9CgoJCWZ1bmN0aW9uIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGVudikgewoJCSAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9OwoKCQkgIGlmIChpbnB1dCA9PSBudWxsIHx8IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSB7CgkJICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMuY29tcGlsZS4gWW91IHBhc3NlZCAnICsgaW5wdXQpOwoJCSAgfQoKCQkgIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkgewoJCSAgICBvcHRpb25zLmRhdGEgPSB0cnVlOwoJCSAgfQoJCSAgaWYgKG9wdGlvbnMuY29tcGF0KSB7CgkJICAgIG9wdGlvbnMudXNlRGVwdGhzID0gdHJ1ZTsKCQkgIH0KCgkJICB2YXIgY29tcGlsZWQgPSB1bmRlZmluZWQ7CgoJCSAgZnVuY3Rpb24gY29tcGlsZUlucHV0KCkgewoJCSAgICB2YXIgYXN0ID0gZW52LnBhcnNlKGlucHV0LCBvcHRpb25zKSwKCQkgICAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKSwKCQkgICAgICAgIHRlbXBsYXRlU3BlYyA9IG5ldyBlbnYuSmF2YVNjcmlwdENvbXBpbGVyKCkuY29tcGlsZShlbnZpcm9ubWVudCwgb3B0aW9ucywgdW5kZWZpbmVkLCB0cnVlKTsKCQkgICAgcmV0dXJuIGVudi50ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMpOwoJCSAgfQoKCQkgIC8vIFRlbXBsYXRlIGlzIG9ubHkgY29tcGlsZWQgb24gZmlyc3QgdXNlIGFuZCBjYWNoZWQgYWZ0ZXIgdGhhdCBwb2ludC4KCQkgIGZ1bmN0aW9uIHJldChjb250ZXh0LCBleGVjT3B0aW9ucykgewoJCSAgICBpZiAoIWNvbXBpbGVkKSB7CgkJICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTsKCQkgICAgfQoJCSAgICByZXR1cm4gY29tcGlsZWQuY2FsbCh0aGlzLCBjb250ZXh0LCBleGVjT3B0aW9ucyk7CgkJICB9CgkJICByZXQuX3NldHVwID0gZnVuY3Rpb24gKHNldHVwT3B0aW9ucykgewoJCSAgICBpZiAoIWNvbXBpbGVkKSB7CgkJICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTsKCQkgICAgfQoJCSAgICByZXR1cm4gY29tcGlsZWQuX3NldHVwKHNldHVwT3B0aW9ucyk7CgkJICB9OwoJCSAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uIChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7CgkJICAgIGlmICghY29tcGlsZWQpIHsKCQkgICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpOwoJCSAgICB9CgkJICAgIHJldHVybiBjb21waWxlZC5fY2hpbGQoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7CgkJICB9OwoJCSAgcmV0dXJuIHJldDsKCQl9CgoJCWZ1bmN0aW9uIGFyZ0VxdWFscyhhLCBiKSB7CgkJICBpZiAoYSA9PT0gYikgewoJCSAgICByZXR1cm4gdHJ1ZTsKCQkgIH0KCgkJICBpZiAoX3V0aWxzLmlzQXJyYXkoYSkgJiYgX3V0aWxzLmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoKSB7CgkJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgewoJCSAgICAgIGlmICghYXJnRXF1YWxzKGFbaV0sIGJbaV0pKSB7CgkJICAgICAgICByZXR1cm4gZmFsc2U7CgkJICAgICAgfQoJCSAgICB9CgkJICAgIHJldHVybiB0cnVlOwoJCSAgfQoJCX0KCgkJZnVuY3Rpb24gdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcikgewoJCSAgaWYgKCFzZXhwci5wYXRoLnBhcnRzKSB7CgkJICAgIHZhciBsaXRlcmFsID0gc2V4cHIucGF0aDsKCQkgICAgLy8gQ2FzdGluZyB0byBzdHJpbmcgaGVyZSB0byBtYWtlIGZhbHNlIGFuZCAwIGxpdGVyYWwgdmFsdWVzIHBsYXkgbmljZWx5IHdpdGggdGhlIHJlc3QKCQkgICAgLy8gb2YgdGhlIHN5c3RlbS4KCQkgICAgc2V4cHIucGF0aCA9IHsKCQkgICAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLAoJCSAgICAgIGRhdGE6IGZhbHNlLAoJCSAgICAgIGRlcHRoOiAwLAoJCSAgICAgIHBhcnRzOiBbbGl0ZXJhbC5vcmlnaW5hbCArICcnXSwKCQkgICAgICBvcmlnaW5hbDogbGl0ZXJhbC5vcmlnaW5hbCArICcnLAoJCSAgICAgIGxvYzogbGl0ZXJhbC5sb2MKCQkgICAgfTsKCQkgIH0KCQl9CgoJLyoqKi8gfSwKCS8qIDMxICovCgkvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkJJ3VzZSBzdHJpY3QnOwoKCQl2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTsKCgkJZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCgkJdmFyIF9iYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTsKCgkJdmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpOwoKCQl2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pOwoKCQl2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKCgkJdmFyIF9jb2RlR2VuID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7CgoJCXZhciBfY29kZUdlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2RlR2VuKTsKCgkJZnVuY3Rpb24gTGl0ZXJhbCh2YWx1ZSkgewoJCSAgdGhpcy52YWx1ZSA9IHZhbHVlOwoJCX0KCgkJZnVuY3Rpb24gSmF2YVNjcmlwdENvbXBpbGVyKCkge30KCgkJSmF2YVNjcmlwdENvbXBpbGVyLnByb3RvdHlwZSA9IHsKCQkgIC8vIFBVQkxJQyBBUEk6IFlvdSBjYW4gb3ZlcnJpZGUgdGhlc2UgbWV0aG9kcyBpbiBhIHN1YmNsYXNzIHRvIHByb3ZpZGUKCQkgIC8vIGFsdGVybmF0aXZlIGNvbXBpbGVkIGZvcm1zIGZvciBuYW1lIGxvb2t1cCBhbmQgYnVmZmVyaW5nIHNlbWFudGljcwoJCSAgbmFtZUxvb2t1cDogZnVuY3Rpb24gbmFtZUxvb2t1cChwYXJlbnQsIG5hbWUgLyogLCB0eXBlKi8pIHsKCQkgICAgaWYgKEphdmFTY3JpcHRDb21waWxlci5pc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZShuYW1lKSkgewoJCSAgICAgIHJldHVybiBbcGFyZW50LCAnLicsIG5hbWVdOwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHJldHVybiBbcGFyZW50LCAnWycsIEpTT04uc3RyaW5naWZ5KG5hbWUpLCAnXSddOwoJCSAgICB9CgkJICB9LAoJCSAgZGVwdGhlZExvb2t1cDogZnVuY3Rpb24gZGVwdGhlZExvb2t1cChuYW1lKSB7CgkJICAgIHJldHVybiBbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5sb29rdXAnKSwgJyhkZXB0aHMsICInLCBuYW1lLCAnIiknXTsKCQkgIH0sCgoJCSAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbiBjb21waWxlckluZm8oKSB7CgkJICAgIHZhciByZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OLAoJCSAgICAgICAgdmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW3JldmlzaW9uXTsKCQkgICAgcmV0dXJuIFtyZXZpc2lvbiwgdmVyc2lvbnNdOwoJCSAgfSwKCgkJICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24gYXBwZW5kVG9CdWZmZXIoc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHsKCQkgICAgLy8gRm9yY2UgYSBzb3VyY2UgYXMgdGhpcyBzaW1wbGlmaWVzIHRoZSBtZXJnZSBsb2dpYy4KCQkgICAgaWYgKCFfdXRpbHMuaXNBcnJheShzb3VyY2UpKSB7CgkJICAgICAgc291cmNlID0gW3NvdXJjZV07CgkJICAgIH0KCQkgICAgc291cmNlID0gdGhpcy5zb3VyY2Uud3JhcChzb3VyY2UsIGxvY2F0aW9uKTsKCgkJICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7CgkJICAgICAgcmV0dXJuIFsncmV0dXJuICcsIHNvdXJjZSwgJzsnXTsKCQkgICAgfSBlbHNlIGlmIChleHBsaWNpdCkgewoJCSAgICAgIC8vIFRoaXMgaXMgYSBjYXNlIHdoZXJlIHRoZSBidWZmZXIgb3BlcmF0aW9uIG9jY3VycyBhcyBhIGNoaWxkIG9mIGFub3RoZXIKCQkgICAgICAvLyBjb25zdHJ1Y3QsIGdlbmVyYWxseSBicmFjZXMuIFdlIGhhdmUgdG8gZXhwbGljaXRseSBvdXRwdXQgdGhlc2UgYnVmZmVyCgkJICAgICAgLy8gb3BlcmF0aW9ucyB0byBlbnN1cmUgdGhhdCB0aGUgZW1pdHRlZCBjb2RlIGdvZXMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uCgkJICAgICAgcmV0dXJuIFsnYnVmZmVyICs9ICcsIHNvdXJjZSwgJzsnXTsKCQkgICAgfSBlbHNlIHsKCQkgICAgICBzb3VyY2UuYXBwZW5kVG9CdWZmZXIgPSB0cnVlOwoJCSAgICAgIHJldHVybiBzb3VyY2U7CgkJICAgIH0KCQkgIH0sCgoJCSAgaW5pdGlhbGl6ZUJ1ZmZlcjogZnVuY3Rpb24gaW5pdGlhbGl6ZUJ1ZmZlcigpIHsKCQkgICAgcmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCcnKTsKCQkgIH0sCgkJICAvLyBFTkQgUFVCTElDIEFQSQoKCQkgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIGNvbnRleHQsIGFzT2JqZWN0KSB7CgkJICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDsKCQkgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKCQkgICAgdGhpcy5zdHJpbmdQYXJhbXMgPSB0aGlzLm9wdGlvbnMuc3RyaW5nUGFyYW1zOwoJCSAgICB0aGlzLnRyYWNrSWRzID0gdGhpcy5vcHRpb25zLnRyYWNrSWRzOwoJCSAgICB0aGlzLnByZWNvbXBpbGUgPSAhYXNPYmplY3Q7CgoJCSAgICB0aGlzLm5hbWUgPSB0aGlzLmVudmlyb25tZW50Lm5hbWU7CgkJICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDsKCQkgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCB8fCB7CgkJICAgICAgZGVjb3JhdG9yczogW10sCgkJICAgICAgcHJvZ3JhbXM6IFtdLAoJCSAgICAgIGVudmlyb25tZW50czogW10KCQkgICAgfTsKCgkJICAgIHRoaXMucHJlYW1ibGUoKTsKCgkJICAgIHRoaXMuc3RhY2tTbG90ID0gMDsKCQkgICAgdGhpcy5zdGFja1ZhcnMgPSBbXTsKCQkgICAgdGhpcy5hbGlhc2VzID0ge307CgkJICAgIHRoaXMucmVnaXN0ZXJzID0geyBsaXN0OiBbXSB9OwoJCSAgICB0aGlzLmhhc2hlcyA9IFtdOwoJCSAgICB0aGlzLmNvbXBpbGVTdGFjayA9IFtdOwoJCSAgICB0aGlzLmlubGluZVN0YWNrID0gW107CgkJICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBbXTsKCgkJICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTsKCgkJICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVwdGhzIHx8IGVudmlyb25tZW50LnVzZURlY29yYXRvcnMgfHwgdGhpcy5vcHRpb25zLmNvbXBhdDsKCQkgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZW52aXJvbm1lbnQudXNlQmxvY2tQYXJhbXM7CgoJCSAgICB2YXIgb3Bjb2RlcyA9IGVudmlyb25tZW50Lm9wY29kZXMsCgkJICAgICAgICBvcGNvZGUgPSB1bmRlZmluZWQsCgkJICAgICAgICBmaXJzdExvYyA9IHVuZGVmaW5lZCwKCQkgICAgICAgIGkgPSB1bmRlZmluZWQsCgkJICAgICAgICBsID0gdW5kZWZpbmVkOwoKCQkgICAgZm9yIChpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkJICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTsKCgkJICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gb3Bjb2RlLmxvYzsKCQkgICAgICBmaXJzdExvYyA9IGZpcnN0TG9jIHx8IG9wY29kZS5sb2M7CgkJICAgICAgdGhpc1tvcGNvZGUub3Bjb2RlXS5hcHBseSh0aGlzLCBvcGNvZGUuYXJncyk7CgkJICAgIH0KCgkJICAgIC8vIEZsdXNoIGFueSB0cmFpbGluZyBjb250ZW50IHRoYXQgbWlnaHQgYmUgcGVuZGluZy4KCQkgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gZmlyc3RMb2M7CgkJICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7CgoJCSAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoJCSAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7CgkJICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0NvbXBpbGUgY29tcGxldGVkIHdpdGggY29udGVudCBsZWZ0IG9uIHN0YWNrJyk7CgkJICAgIH0KCgkJICAgIGlmICghdGhpcy5kZWNvcmF0b3JzLmlzRW1wdHkoKSkgewoJCSAgICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7CgoJCSAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCd2YXIgZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5kZWNvcmF0b3JzO1xuJyk7CgkJICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ3JldHVybiBmbjsnKTsKCgkJICAgICAgaWYgKGFzT2JqZWN0KSB7CgkJICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSBGdW5jdGlvbi5hcHBseSh0aGlzLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsICdkZXB0aDAnLCAnZGF0YScsICdibG9ja1BhcmFtcycsICdkZXB0aHMnLCB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKV0pOwoJCSAgICAgIH0gZWxzZSB7CgkJICAgICAgICB0aGlzLmRlY29yYXRvcnMucHJlcGVuZCgnZnVuY3Rpb24oZm4sIHByb3BzLCBjb250YWluZXIsIGRlcHRoMCwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuJyk7CgkJICAgICAgICB0aGlzLmRlY29yYXRvcnMucHVzaCgnfVxuJyk7CgkJICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKTsKCQkgICAgICB9CgkJICAgIH0gZWxzZSB7CgkJICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdW5kZWZpbmVkOwoJCSAgICB9CgoJCSAgICB2YXIgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7CgkJICAgIGlmICghdGhpcy5pc0NoaWxkKSB7CgkJICAgICAgdmFyIHJldCA9IHsKCQkgICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLAoJCSAgICAgICAgbWFpbjogZm4KCQkgICAgICB9OwoKCQkgICAgICBpZiAodGhpcy5kZWNvcmF0b3JzKSB7CgkJICAgICAgICByZXQubWFpbl9kID0gdGhpcy5kZWNvcmF0b3JzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZQoJCSAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlOwoJCSAgICAgIH0KCgkJICAgICAgdmFyIF9jb250ZXh0ID0gdGhpcy5jb250ZXh0OwoJCSAgICAgIHZhciBwcm9ncmFtcyA9IF9jb250ZXh0LnByb2dyYW1zOwoJCSAgICAgIHZhciBkZWNvcmF0b3JzID0gX2NvbnRleHQuZGVjb3JhdG9yczsKCgkJICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCSAgICAgICAgaWYgKHByb2dyYW1zW2ldKSB7CgkJICAgICAgICAgIHJldFtpXSA9IHByb2dyYW1zW2ldOwoJCSAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkgewoJCSAgICAgICAgICAgIHJldFtpICsgJ19kJ10gPSBkZWNvcmF0b3JzW2ldOwoJCSAgICAgICAgICAgIHJldC51c2VEZWNvcmF0b3JzID0gdHJ1ZTsKCQkgICAgICAgICAgfQoJCSAgICAgICAgfQoJCSAgICAgIH0KCgkJICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQudXNlUGFydGlhbCkgewoJCSAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlOwoJCSAgICAgIH0KCQkgICAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHsKCQkgICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTsKCQkgICAgICB9CgkJICAgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7CgkJICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTsKCQkgICAgICB9CgkJICAgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHsKCQkgICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7CgkJICAgICAgfQoJCSAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7CgkJICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTsKCQkgICAgICB9CgoJCSAgICAgIGlmICghYXNPYmplY3QpIHsKCQkgICAgICAgIHJldC5jb21waWxlciA9IEpTT04uc3RyaW5naWZ5KHJldC5jb21waWxlcik7CgoJCSAgICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0geyBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSB9OwoJCSAgICAgICAgcmV0ID0gdGhpcy5vYmplY3RMaXRlcmFsKHJldCk7CgoJCSAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkgewoJCSAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmdXaXRoU291cmNlTWFwKHsgZmlsZTogb3B0aW9ucy5kZXN0TmFtZSB9KTsKCQkgICAgICAgICAgcmV0Lm1hcCA9IHJldC5tYXAgJiYgcmV0Lm1hcC50b1N0cmluZygpOwoJCSAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nKCk7CgkJICAgICAgICB9CgkJICAgICAgfSBlbHNlIHsKCQkgICAgICAgIHJldC5jb21waWxlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgkJICAgICAgfQoKCQkgICAgICByZXR1cm4gcmV0OwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHJldHVybiBmbjsKCQkgICAgfQoJCSAgfSwKCgkJICBwcmVhbWJsZTogZnVuY3Rpb24gcHJlYW1ibGUoKSB7CgkJICAgIC8vIHRyYWNrIHRoZSBsYXN0IGNvbnRleHQgcHVzaGVkIGludG8gcGxhY2UgdG8gYWxsb3cgc2tpcHBpbmcgdGhlCgkJICAgIC8vIGdldENvbnRleHQgb3Bjb2RlIHdoZW4gaXQgd291bGQgYmUgYSBub29wCgkJICAgIHRoaXMubGFzdENvbnRleHQgPSAwOwoJCSAgICB0aGlzLnNvdXJjZSA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7CgkJICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7CgkJICB9LAoKCQkgIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dDogZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db250ZXh0KGFzT2JqZWN0KSB7CgkJICAgIHZhciB2YXJEZWNsYXJhdGlvbnMgPSAnJzsKCgkJICAgIHZhciBsb2NhbHMgPSB0aGlzLnN0YWNrVmFycy5jb25jYXQodGhpcy5yZWdpc3RlcnMubGlzdCk7CgkJICAgIGlmIChsb2NhbHMubGVuZ3RoID4gMCkgewoJCSAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7CgkJICAgIH0KCgkJICAgIC8vIEdlbmVyYXRlIG1pbmltaXplciBhbGlhcyBtYXBwaW5ncwoJCSAgICAvLwoJCSAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzCgkJICAgIC8vIGFzIHRoZSBzb3VyY2Ugbm9kZXMgYXJlIHJldXNlZCBpbiBzaXR1LiBGb3IgdGhlIG5vbi1zb3VyY2Ugbm9kZSBjb21waWxhdGlvbiBtb2RlLAoJCSAgICAvLyBhbGlhc2VzIHdpbGwgbm90IGJlIHVzZWQsIGJ1dCB0aGlzIGNhc2UgaXMgYWxyZWFkeSBiZWluZyBydW4gb24gdGhlIGNsaWVudCBhbmQKCQkgICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS4KCQkgICAgdmFyIGFsaWFzQ291bnQgPSAwOwoJCSAgICBmb3IgKHZhciBhbGlhcyBpbiB0aGlzLmFsaWFzZXMpIHsKCQkgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pbgoJCSAgICAgIHZhciBub2RlID0gdGhpcy5hbGlhc2VzW2FsaWFzXTsKCgkJICAgICAgaWYgKHRoaXMuYWxpYXNlcy5oYXNPd25Qcm9wZXJ0eShhbGlhcykgJiYgbm9kZS5jaGlsZHJlbiAmJiBub2RlLnJlZmVyZW5jZUNvdW50ID4gMSkgewoJCSAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICsrYWxpYXNDb3VudCArICc9JyArIGFsaWFzOwoJCSAgICAgICAgbm9kZS5jaGlsZHJlblswXSA9ICdhbGlhcycgKyBhbGlhc0NvdW50OwoJCSAgICAgIH0KCQkgICAgfQoKCQkgICAgdmFyIHBhcmFtcyA9IFsnY29udGFpbmVyJywgJ2RlcHRoMCcsICdoZWxwZXJzJywgJ3BhcnRpYWxzJywgJ2RhdGEnXTsKCgkJICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7CgkJICAgICAgcGFyYW1zLnB1c2goJ2Jsb2NrUGFyYW1zJyk7CgkJICAgIH0KCQkgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7CgkJICAgICAgcGFyYW1zLnB1c2goJ2RlcHRocycpOwoJCSAgICB9CgoJCSAgICAvLyBQZXJmb3JtIGEgc2Vjb25kIHBhc3Mgb3ZlciB0aGUgb3V0cHV0IHRvIG1lcmdlIGNvbnRlbnQgd2hlbiBwb3NzaWJsZQoJCSAgICB2YXIgc291cmNlID0gdGhpcy5tZXJnZVNvdXJjZSh2YXJEZWNsYXJhdGlvbnMpOwoKCQkgICAgaWYgKGFzT2JqZWN0KSB7CgkJICAgICAgcGFyYW1zLnB1c2goc291cmNlKTsKCgkJICAgICAgcmV0dXJuIEZ1bmN0aW9uLmFwcGx5KHRoaXMsIHBhcmFtcyk7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoWydmdW5jdGlvbignLCBwYXJhbXMuam9pbignLCcpLCAnKSB7XG4gICcsIHNvdXJjZSwgJ30nXSk7CgkJICAgIH0KCQkgIH0sCgkJICBtZXJnZVNvdXJjZTogZnVuY3Rpb24gbWVyZ2VTb3VyY2UodmFyRGVjbGFyYXRpb25zKSB7CgkJICAgIHZhciBpc1NpbXBsZSA9IHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUsCgkJICAgICAgICBhcHBlbmRPbmx5ID0gIXRoaXMuZm9yY2VCdWZmZXIsCgkJICAgICAgICBhcHBlbmRGaXJzdCA9IHVuZGVmaW5lZCwKCQkgICAgICAgIHNvdXJjZVNlZW4gPSB1bmRlZmluZWQsCgkJICAgICAgICBidWZmZXJTdGFydCA9IHVuZGVmaW5lZCwKCQkgICAgICAgIGJ1ZmZlckVuZCA9IHVuZGVmaW5lZDsKCQkgICAgdGhpcy5zb3VyY2UuZWFjaChmdW5jdGlvbiAobGluZSkgewoJCSAgICAgIGlmIChsaW5lLmFwcGVuZFRvQnVmZmVyKSB7CgkJICAgICAgICBpZiAoYnVmZmVyU3RhcnQpIHsKCQkgICAgICAgICAgbGluZS5wcmVwZW5kKCcgICsgJyk7CgkJICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICBidWZmZXJTdGFydCA9IGxpbmU7CgkJICAgICAgICB9CgkJICAgICAgICBidWZmZXJFbmQgPSBsaW5lOwoJCSAgICAgIH0gZWxzZSB7CgkJICAgICAgICBpZiAoYnVmZmVyU3RhcnQpIHsKCQkgICAgICAgICAgaWYgKCFzb3VyY2VTZWVuKSB7CgkJICAgICAgICAgICAgYXBwZW5kRmlyc3QgPSB0cnVlOwoJCSAgICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ2J1ZmZlciArPSAnKTsKCQkgICAgICAgICAgfQoJCSAgICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7CgkJICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gYnVmZmVyRW5kID0gdW5kZWZpbmVkOwoJCSAgICAgICAgfQoKCQkgICAgICAgIHNvdXJjZVNlZW4gPSB0cnVlOwoJCSAgICAgICAgaWYgKCFpc1NpbXBsZSkgewoJCSAgICAgICAgICBhcHBlbmRPbmx5ID0gZmFsc2U7CgkJICAgICAgICB9CgkJICAgICAgfQoJCSAgICB9KTsKCgkJICAgIGlmIChhcHBlbmRPbmx5KSB7CgkJICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7CgkJICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gJyk7CgkJICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7CgkJICAgICAgfSBlbHNlIGlmICghc291cmNlU2VlbikgewoJCSAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuICIiOycpOwoJCSAgICAgIH0KCQkgICAgfSBlbHNlIHsKCQkgICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgYnVmZmVyID0gJyArIChhcHBlbmRGaXJzdCA/ICcnIDogdGhpcy5pbml0aWFsaXplQnVmZmVyKCkpOwoKCQkgICAgICBpZiAoYnVmZmVyU3RhcnQpIHsKCQkgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ3JldHVybiBidWZmZXIgKyAnKTsKCQkgICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTsKCQkgICAgICB9IGVsc2UgewoJCSAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIGJ1ZmZlcjsnKTsKCQkgICAgICB9CgkJICAgIH0KCgkJICAgIGlmICh2YXJEZWNsYXJhdGlvbnMpIHsKCQkgICAgICB0aGlzLnNvdXJjZS5wcmVwZW5kKCd2YXIgJyArIHZhckRlY2xhcmF0aW9ucy5zdWJzdHJpbmcoMikgKyAoYXBwZW5kRmlyc3QgPyAnJyA6ICc7XG4nKSk7CgkJICAgIH0KCgkJICAgIHJldHVybiB0aGlzLnNvdXJjZS5tZXJnZSgpOwoJCSAgfSwKCgkJICAvLyBbYmxvY2tWYWx1ZV0KCQkgIC8vCgkJICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCB2YWx1ZQoJCSAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXR1cm4gdmFsdWUgb2YgYmxvY2tIZWxwZXJNaXNzaW5nCgkJICAvLwoJCSAgLy8gVGhlIHB1cnBvc2Ugb2YgdGhpcyBvcGNvZGUgaXMgdG8gdGFrZSBhIGJsb2NrIG9mIHRoZSBmb3JtCgkJICAvLyBge3sjdGhpcy5mb299fS4uLnt7L3RoaXMuZm9vfX1gLCByZXNvbHZlIHRoZSB2YWx1ZSBvZiBgZm9vYCwgYW5kCgkJICAvLyByZXBsYWNlIGl0IG9uIHRoZSBzdGFjayB3aXRoIHRoZSByZXN1bHQgb2YgcHJvcGVybHkKCQkgIC8vIGludm9raW5nIGJsb2NrSGVscGVyTWlzc2luZy4KCQkgIGJsb2NrVmFsdWU6IGZ1bmN0aW9uIGJsb2NrVmFsdWUobmFtZSkgewoJCSAgICB2YXIgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuYmxvY2tIZWxwZXJNaXNzaW5nJyksCgkJICAgICAgICBwYXJhbXMgPSBbdGhpcy5jb250ZXh0TmFtZSgwKV07CgkJICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIDAsIHBhcmFtcyk7CgoJCSAgICB2YXIgYmxvY2tOYW1lID0gdGhpcy5wb3BTdGFjaygpOwoJCSAgICBwYXJhbXMuc3BsaWNlKDEsIDAsIGJsb2NrTmFtZSk7CgoJCSAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGJsb2NrSGVscGVyTWlzc2luZywgJ2NhbGwnLCBwYXJhbXMpKTsKCQkgIH0sCgoJCSAgLy8gW2FtYmlndW91c0Jsb2NrVmFsdWVdCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWUKCQkgIC8vIENvbXBpbGVyIHZhbHVlLCBiZWZvcmU6IGxhc3RIZWxwZXI9dmFsdWUgb2YgbGFzdCBmb3VuZCBoZWxwZXIsIGlmIGFueQoJCSAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBubyBsYXN0SGVscGVyOiBzYW1lIGFzIFtibG9ja1ZhbHVlXQoJCSAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBsYXN0SGVscGVyOiB2YWx1ZQoJCSAgYW1iaWd1b3VzQmxvY2tWYWx1ZTogZnVuY3Rpb24gYW1iaWd1b3VzQmxvY2tWYWx1ZSgpIHsKCQkgICAgLy8gV2UncmUgYmVpbmcgYSBiaXQgY2hlZWt5IGFuZCByZXVzaW5nIHRoZSBvcHRpb25zIHZhbHVlIGZyb20gdGhlIHByaW9yIGV4ZWMKCQkgICAgdmFyIGJsb2NrSGVscGVyTWlzc2luZyA9IHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmJsb2NrSGVscGVyTWlzc2luZycpLAoJCSAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldOwoJCSAgICB0aGlzLnNldHVwSGVscGVyQXJncygnJywgMCwgcGFyYW1zLCB0cnVlKTsKCgkJICAgIHRoaXMuZmx1c2hJbmxpbmUoKTsKCgkJICAgIHZhciBjdXJyZW50ID0gdGhpcy50b3BTdGFjaygpOwoJCSAgICBwYXJhbXMuc3BsaWNlKDEsIDAsIGN1cnJlbnQpOwoKCQkgICAgdGhpcy5wdXNoU291cmNlKFsnaWYgKCEnLCB0aGlzLmxhc3RIZWxwZXIsICcpIHsgJywgY3VycmVudCwgJyA9ICcsIHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChibG9ja0hlbHBlck1pc3NpbmcsICdjYWxsJywgcGFyYW1zKSwgJ30nXSk7CgkJICB9LAoKCQkgIC8vIFthcHBlbmRDb250ZW50XQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLgoJCSAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi4KCQkgIC8vCgkJICAvLyBBcHBlbmRzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYGNvbnRlbnRgIHRvIHRoZSBjdXJyZW50IGJ1ZmZlcgoJCSAgYXBwZW5kQ29udGVudDogZnVuY3Rpb24gYXBwZW5kQ29udGVudChjb250ZW50KSB7CgkJICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7CgkJICAgICAgY29udGVudCA9IHRoaXMucGVuZGluZ0NvbnRlbnQgKyBjb250ZW50OwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHRoaXMucGVuZGluZ0xvY2F0aW9uID0gdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uOwoJCSAgICB9CgoJCSAgICB0aGlzLnBlbmRpbmdDb250ZW50ID0gY29udGVudDsKCQkgIH0sCgoJCSAgLy8gW2FwcGVuZF0KCQkgIC8vCgkJICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLgoJCSAgLy8KCQkgIC8vIENvZXJjZXMgYHZhbHVlYCB0byBhIFN0cmluZyBhbmQgYXBwZW5kcyBpdCB0byB0aGUgY3VycmVudCBidWZmZXIuCgkJICAvLwoJCSAgLy8gSWYgYHZhbHVlYCBpcyB0cnV0aHksIG9yIDAsIGl0IGlzIGNvZXJjZWQgaW50byBhIHN0cmluZyBhbmQgYXBwZW5kZWQKCQkgIC8vIE90aGVyd2lzZSwgdGhlIGVtcHR5IHN0cmluZyBpcyBhcHBlbmRlZAoJCSAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQoKSB7CgkJICAgIGlmICh0aGlzLmlzSW5saW5lKCkpIHsKCQkgICAgICB0aGlzLnJlcGxhY2VTdGFjayhmdW5jdGlvbiAoY3VycmVudCkgewoJCSAgICAgICAgcmV0dXJuIFsnICE9IG51bGwgPyAnLCBjdXJyZW50LCAnIDogIiInXTsKCQkgICAgICB9KTsKCgkJICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgdmFyIGxvY2FsID0gdGhpcy5wb3BTdGFjaygpOwoJCSAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTsKCQkgICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkgewoJCSAgICAgICAgdGhpcy5wdXNoU291cmNlKFsnZWxzZSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIoIicnIiwgdW5kZWZpbmVkLCB0cnVlKSwgJyB9J10pOwoJCSAgICAgIH0KCQkgICAgfQoJCSAgfSwKCgkJICAvLyBbYXBwZW5kRXNjYXBlZF0KCQkgIC8vCgkJICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLgoJCSAgLy8KCQkgIC8vIEVzY2FwZSBgdmFsdWVgIGFuZCBhcHBlbmQgaXQgdG8gdGhlIGJ1ZmZlcgoJCSAgYXBwZW5kRXNjYXBlZDogZnVuY3Rpb24gYXBwZW5kRXNjYXBlZCgpIHsKCQkgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIoW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbicpLCAnKCcsIHRoaXMucG9wU3RhY2soKSwgJyknXSkpOwoJCSAgfSwKCgkJICAvLyBbZ2V0Q29udGV4dF0KCQkgIC8vCgkJICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi4KCQkgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uCgkJICAvLyBDb21waWxlciB2YWx1ZSwgYWZ0ZXI6IGxhc3RDb250ZXh0PWRlcHRoCgkJICAvLwoJCSAgLy8gU2V0IHRoZSB2YWx1ZSBvZiB0aGUgYGxhc3RDb250ZXh0YCBjb21waWxlciB2YWx1ZSB0byB0aGUgZGVwdGgKCQkgIGdldENvbnRleHQ6IGZ1bmN0aW9uIGdldENvbnRleHQoZGVwdGgpIHsKCQkgICAgdGhpcy5sYXN0Q29udGV4dCA9IGRlcHRoOwoJCSAgfSwKCgkJICAvLyBbcHVzaENvbnRleHRdCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGN1cnJlbnRDb250ZXh0LCAuLi4KCQkgIC8vCgkJICAvLyBQdXNoZXMgdGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50IGNvbnRleHQgb250byB0aGUgc3RhY2suCgkJICBwdXNoQ29udGV4dDogZnVuY3Rpb24gcHVzaENvbnRleHQoKSB7CgkJICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLmNvbnRleHROYW1lKHRoaXMubGFzdENvbnRleHQpKTsKCQkgIH0sCgoJCSAgLy8gW2xvb2t1cE9uQ29udGV4dF0KCQkgIC8vCgkJICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi4KCQkgIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHRbbmFtZV0sIC4uLgoJCSAgLy8KCQkgIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgbmFtZWAgb24gdGhlIGN1cnJlbnQgY29udGV4dCBhbmQgcHVzaGVzCgkJICAvLyBpdCBvbnRvIHRoZSBzdGFjay4KCQkgIGxvb2t1cE9uQ29udGV4dDogZnVuY3Rpb24gbG9va3VwT25Db250ZXh0KHBhcnRzLCBmYWxzeSwgc3RyaWN0LCBzY29wZWQpIHsKCQkgICAgdmFyIGkgPSAwOwoKCQkgICAgaWYgKCFzY29wZWQgJiYgdGhpcy5vcHRpb25zLmNvbXBhdCAmJiAhdGhpcy5sYXN0Q29udGV4dCkgewoJCSAgICAgIC8vIFRoZSBkZXB0aGVkIHF1ZXJ5IGlzIGV4cGVjdGVkIHRvIGhhbmRsZSB0aGUgdW5kZWZpbmVkIGxvZ2ljIGZvciB0aGUgcm9vdCBsZXZlbCB0aGF0CgkJICAgICAgLy8gaXMgaW1wbGVtZW50ZWQgYmVsb3csIHNvIHdlIGV2YWx1YXRlIHRoYXQgZGlyZWN0bHkgaW4gY29tcGF0IG1vZGUKCQkgICAgICB0aGlzLnB1c2godGhpcy5kZXB0aGVkTG9va3VwKHBhcnRzW2krK10pKTsKCQkgICAgfSBlbHNlIHsKCQkgICAgICB0aGlzLnB1c2hDb250ZXh0KCk7CgkJICAgIH0KCgkJICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2NvbnRleHQnLCBwYXJ0cywgaSwgZmFsc3ksIHN0cmljdCk7CgkJICB9LAoKCQkgIC8vIFtsb29rdXBCbG9ja1BhcmFtXQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLgoJCSAgLy8gT24gc3RhY2ssIGFmdGVyOiBibG9ja1BhcmFtW25hbWVdLCAuLi4KCQkgIC8vCgkJICAvLyBMb29rcyB1cCB0aGUgdmFsdWUgb2YgYHBhcnRzYCBvbiB0aGUgZ2l2ZW4gYmxvY2sgcGFyYW0gYW5kIHB1c2hlcwoJCSAgLy8gaXQgb250byB0aGUgc3RhY2suCgkJICBsb29rdXBCbG9ja1BhcmFtOiBmdW5jdGlvbiBsb29rdXBCbG9ja1BhcmFtKGJsb2NrUGFyYW1JZCwgcGFydHMpIHsKCQkgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRydWU7CgoJCSAgICB0aGlzLnB1c2goWydibG9ja1BhcmFtc1snLCBibG9ja1BhcmFtSWRbMF0sICddWycsIGJsb2NrUGFyYW1JZFsxXSwgJ10nXSk7CgkJICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2NvbnRleHQnLCBwYXJ0cywgMSk7CgkJICB9LAoKCQkgIC8vIFtsb29rdXBEYXRhXQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLgoJCSAgLy8gT24gc3RhY2ssIGFmdGVyOiBkYXRhLCAuLi4KCQkgIC8vCgkJICAvLyBQdXNoIHRoZSBkYXRhIGxvb2t1cCBvcGVyYXRvcgoJCSAgbG9va3VwRGF0YTogZnVuY3Rpb24gbG9va3VwRGF0YShkZXB0aCwgcGFydHMsIHN0cmljdCkgewoJCSAgICBpZiAoIWRlcHRoKSB7CgkJICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdkYXRhJyk7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdjb250YWluZXIuZGF0YShkYXRhLCAnICsgZGVwdGggKyAnKScpOwoJCSAgICB9CgoJCSAgICB0aGlzLnJlc29sdmVQYXRoKCdkYXRhJywgcGFydHMsIDAsIHRydWUsIHN0cmljdCk7CgkJICB9LAoKCQkgIHJlc29sdmVQYXRoOiBmdW5jdGlvbiByZXNvbHZlUGF0aCh0eXBlLCBwYXJ0cywgaSwgZmFsc3ksIHN0cmljdCkgewoJCSAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dAoKCQkgICAgdmFyIF90aGlzID0gdGhpczsKCgkJICAgIGlmICh0aGlzLm9wdGlvbnMuc3RyaWN0IHx8IHRoaXMub3B0aW9ucy5hc3N1bWVPYmplY3RzKSB7CgkJICAgICAgdGhpcy5wdXNoKHN0cmljdExvb2t1cCh0aGlzLm9wdGlvbnMuc3RyaWN0ICYmIHN0cmljdCwgdGhpcywgcGFydHMsIHR5cGUpKTsKCQkgICAgICByZXR1cm47CgkJICAgIH0KCgkJICAgIHZhciBsZW4gPSBwYXJ0cy5sZW5ndGg7CgkJICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHsKCQkgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi8KCQkgICAgICB0aGlzLnJlcGxhY2VTdGFjayhmdW5jdGlvbiAoY3VycmVudCkgewoJCSAgICAgICAgdmFyIGxvb2t1cCA9IF90aGlzLm5hbWVMb29rdXAoY3VycmVudCwgcGFydHNbaV0sIHR5cGUpOwoJCSAgICAgICAgLy8gV2Ugd2FudCB0byBlbnN1cmUgdGhhdCB6ZXJvIGFuZCBmYWxzZSBhcmUgaGFuZGxlZCBwcm9wZXJseSBpZiB0aGUgY29udGV4dCAoZmFsc3kgZmxhZykKCQkgICAgICAgIC8vIG5lZWRzIHRvIGhhdmUgdGhlIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHRoZXNlIHZhbHVlcy4KCQkgICAgICAgIGlmICghZmFsc3kpIHsKCQkgICAgICAgICAgcmV0dXJuIFsnICE9IG51bGwgPyAnLCBsb29rdXAsICcgOiAnLCBjdXJyZW50XTsKCQkgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW4gdXNlIGdlbmVyaWMgZmFsc3kgaGFuZGxpbmcKCQkgICAgICAgICAgcmV0dXJuIFsnICYmICcsIGxvb2t1cF07CgkJICAgICAgICB9CgkJICAgICAgfSk7CgkJICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi8KCQkgICAgfQoJCSAgfSwKCgkJICAvLyBbcmVzb2x2ZVBvc3NpYmxlTGFtYmRhXQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi4KCQkgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzb2x2ZWQgdmFsdWUsIC4uLgoJCSAgLy8KCQkgIC8vIElmIHRoZSBgdmFsdWVgIGlzIGEgbGFtYmRhLCByZXBsYWNlIGl0IG9uIHRoZSBzdGFjayBieQoJCSAgLy8gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbGFtYmRhCgkJICByZXNvbHZlUG9zc2libGVMYW1iZGE6IGZ1bmN0aW9uIHJlc29sdmVQb3NzaWJsZUxhbWJkYSgpIHsKCQkgICAgdGhpcy5wdXNoKFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxhbWJkYScpLCAnKCcsIHRoaXMucG9wU3RhY2soKSwgJywgJywgdGhpcy5jb250ZXh0TmFtZSgwKSwgJyknXSk7CgkJICB9LAoKCQkgIC8vIFtwdXNoU3RyaW5nUGFyYW1dCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHN0cmluZywgY3VycmVudENvbnRleHQsIC4uLgoJCSAgLy8KCQkgIC8vIFRoaXMgb3Bjb2RlIGlzIGRlc2lnbmVkIGZvciB1c2UgaW4gc3RyaW5nIG1vZGUsIHdoaWNoCgkJICAvLyBwcm92aWRlcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGEgcGFyYW1ldGVyIGFsb25nIHdpdGggaXRzCgkJICAvLyBkZXB0aCByYXRoZXIgdGhhbiByZXNvbHZpbmcgaXQgaW1tZWRpYXRlbHkuCgkJICBwdXNoU3RyaW5nUGFyYW06IGZ1bmN0aW9uIHB1c2hTdHJpbmdQYXJhbShzdHJpbmcsIHR5cGUpIHsKCQkgICAgdGhpcy5wdXNoQ29udGV4dCgpOwoJCSAgICB0aGlzLnB1c2hTdHJpbmcodHlwZSk7CgoJCSAgICAvLyBJZiBpdCdzIGEgc3ViZXhwcmVzc2lvbiwgdGhlIHN0cmluZyByZXN1bHQKCQkgICAgLy8gd2lsbCBiZSBwdXNoZWQgYWZ0ZXIgdGhpcyBvcGNvZGUuCgkJICAgIGlmICh0eXBlICE9PSAnU3ViRXhwcmVzc2lvbicpIHsKCQkgICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycpIHsKCQkgICAgICAgIHRoaXMucHVzaFN0cmluZyhzdHJpbmcpOwoJCSAgICAgIH0gZWxzZSB7CgkJICAgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoc3RyaW5nKTsKCQkgICAgICB9CgkJICAgIH0KCQkgIH0sCgoJCSAgZW1wdHlIYXNoOiBmdW5jdGlvbiBlbXB0eUhhc2gob21pdEVtcHR5KSB7CgkJICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7CgkJICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoSWRzCgkJICAgIH0KCQkgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7CgkJICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoQ29udGV4dHMKCQkgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hUeXBlcwoJCSAgICB9CgkJICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChvbWl0RW1wdHkgPyAndW5kZWZpbmVkJyA6ICd7fScpOwoJCSAgfSwKCQkgIHB1c2hIYXNoOiBmdW5jdGlvbiBwdXNoSGFzaCgpIHsKCQkgICAgaWYgKHRoaXMuaGFzaCkgewoJCSAgICAgIHRoaXMuaGFzaGVzLnB1c2godGhpcy5oYXNoKTsKCQkgICAgfQoJCSAgICB0aGlzLmhhc2ggPSB7IHZhbHVlczogW10sIHR5cGVzOiBbXSwgY29udGV4dHM6IFtdLCBpZHM6IFtdIH07CgkJICB9LAoJCSAgcG9wSGFzaDogZnVuY3Rpb24gcG9wSGFzaCgpIHsKCQkgICAgdmFyIGhhc2ggPSB0aGlzLmhhc2g7CgkJICAgIHRoaXMuaGFzaCA9IHRoaXMuaGFzaGVzLnBvcCgpOwoKCQkgICAgaWYgKHRoaXMudHJhY2tJZHMpIHsKCQkgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guaWRzKSk7CgkJICAgIH0KCQkgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7CgkJICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmNvbnRleHRzKSk7CgkJICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnR5cGVzKSk7CgkJICAgIH0KCgkJICAgIHRoaXMucHVzaCh0aGlzLm9iamVjdExpdGVyYWwoaGFzaC52YWx1ZXMpKTsKCQkgIH0sCgoJCSAgLy8gW3B1c2hTdHJpbmddCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHF1b3RlZFN0cmluZyhzdHJpbmcpLCAuLi4KCQkgIC8vCgkJICAvLyBQdXNoIGEgcXVvdGVkIHZlcnNpb24gb2YgYHN0cmluZ2Agb250byB0aGUgc3RhY2sKCQkgIHB1c2hTdHJpbmc6IGZ1bmN0aW9uIHB1c2hTdHJpbmcoc3RyaW5nKSB7CgkJICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLnF1b3RlZFN0cmluZyhzdHJpbmcpKTsKCQkgIH0sCgoJCSAgLy8gW3B1c2hMaXRlcmFsXQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLgoJCSAgLy8gT24gc3RhY2ssIGFmdGVyOiB2YWx1ZSwgLi4uCgkJICAvLwoJCSAgLy8gUHVzaGVzIGEgdmFsdWUgb250byB0aGUgc3RhY2suIFRoaXMgb3BlcmF0aW9uIHByZXZlbnRzCgkJICAvLyB0aGUgY29tcGlsZXIgZnJvbSBjcmVhdGluZyBhIHRlbXBvcmFyeSB2YXJpYWJsZSB0byBob2xkCgkJICAvLyBpdC4KCQkgIHB1c2hMaXRlcmFsOiBmdW5jdGlvbiBwdXNoTGl0ZXJhbCh2YWx1ZSkgewoJCSAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodmFsdWUpOwoJCSAgfSwKCgkJICAvLyBbcHVzaFByb2dyYW1dCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHByb2dyYW0oZ3VpZCksIC4uLgoJCSAgLy8KCQkgIC8vIFB1c2ggYSBwcm9ncmFtIGV4cHJlc3Npb24gb250byB0aGUgc3RhY2suIFRoaXMgdGFrZXMKCQkgIC8vIGEgY29tcGlsZS10aW1lIGd1aWQgYW5kIGNvbnZlcnRzIGl0IGludG8gYSBydW50aW1lLWFjY2Vzc2libGUKCQkgIC8vIGV4cHJlc3Npb24uCgkJICBwdXNoUHJvZ3JhbTogZnVuY3Rpb24gcHVzaFByb2dyYW0oZ3VpZCkgewoJCSAgICBpZiAoZ3VpZCAhPSBudWxsKSB7CgkJICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkpOwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChudWxsKTsKCQkgICAgfQoJCSAgfSwKCgkJICAvLyBbcmVnaXN0ZXJEZWNvcmF0b3JdCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi4KCQkgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uCgkJICAvLwoJCSAgLy8gUG9wcyBvZmYgdGhlIGRlY29yYXRvcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGRlY29yYXRvciwKCQkgIC8vIGFuZCBpbnNlcnRzIHRoZSBkZWNvcmF0b3IgaW50byB0aGUgZGVjb3JhdG9ycyBsaXN0LgoJCSAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjb3JhdG9yKHBhcmFtU2l6ZSwgbmFtZSkgewoJCSAgICB2YXIgZm91bmREZWNvcmF0b3IgPSB0aGlzLm5hbWVMb29rdXAoJ2RlY29yYXRvcnMnLCBuYW1lLCAnZGVjb3JhdG9yJyksCgkJICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgcGFyYW1TaXplKTsKCgkJICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKFsnZm4gPSAnLCB0aGlzLmRlY29yYXRvcnMuZnVuY3Rpb25DYWxsKGZvdW5kRGVjb3JhdG9yLCAnJywgWydmbicsICdwcm9wcycsICdjb250YWluZXInLCBvcHRpb25zXSksICcgfHwgZm47J10pOwoJCSAgfSwKCgkJICAvLyBbaW52b2tlSGVscGVyXQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBoZWxwZXIgaW52b2NhdGlvbgoJCSAgLy8KCQkgIC8vIFBvcHMgb2ZmIHRoZSBoZWxwZXIncyBwYXJhbWV0ZXJzLCBpbnZva2VzIHRoZSBoZWxwZXIsCgkJICAvLyBhbmQgcHVzaGVzIHRoZSBoZWxwZXIncyByZXR1cm4gdmFsdWUgb250byB0aGUgc3RhY2suCgkJICAvLwoJCSAgLy8gSWYgdGhlIGhlbHBlciBpcyBub3QgZm91bmQsIGBoZWxwZXJNaXNzaW5nYCBpcyBjYWxsZWQuCgkJICBpbnZva2VIZWxwZXI6IGZ1bmN0aW9uIGludm9rZUhlbHBlcihwYXJhbVNpemUsIG5hbWUsIGlzU2ltcGxlKSB7CgkJICAgIHZhciBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCksCgkJICAgICAgICBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSksCgkJICAgICAgICBzaW1wbGUgPSBpc1NpbXBsZSA/IFtoZWxwZXIubmFtZSwgJyB8fCAnXSA6ICcnOwoKCQkgICAgdmFyIGxvb2t1cCA9IFsnKCddLmNvbmNhdChzaW1wbGUsIG5vbkhlbHBlcik7CgkJICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkgewoJCSAgICAgIGxvb2t1cC5wdXNoKCcgfHwgJywgdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuaGVscGVyTWlzc2luZycpKTsKCQkgICAgfQoJCSAgICBsb29rdXAucHVzaCgnKScpOwoKCQkgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChsb29rdXAsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTsKCQkgIH0sCgoJCSAgLy8gW2ludm9rZUtub3duSGVscGVyXQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBoZWxwZXIgaW52b2NhdGlvbgoJCSAgLy8KCQkgIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiB0aGUgaGVscGVyIGlzIGtub3duIHRvIGV4aXN0LAoJCSAgLy8gc28gYSBgaGVscGVyTWlzc2luZ2AgZmFsbGJhY2sgaXMgbm90IHJlcXVpcmVkLgoJCSAgaW52b2tlS25vd25IZWxwZXI6IGZ1bmN0aW9uIGludm9rZUtub3duSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSkgewoJCSAgICB2YXIgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpOwoJCSAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGhlbHBlci5uYW1lLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSk7CgkJICB9LAoKCQkgIC8vIFtpbnZva2VBbWJpZ3VvdXNdCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi4KCQkgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGRpc2FtYmlndWF0aW9uCgkJICAvLwoJCSAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIGFuIGV4cHJlc3Npb24gbGlrZSBge3tmb299fWAKCQkgIC8vIGlzIHByb3ZpZGVkLCBidXQgd2UgZG9uJ3Qga25vdyBhdCBjb21waWxlLXRpbWUgd2hldGhlciBpdAoJCSAgLy8gaXMgYSBoZWxwZXIgb3IgYSBwYXRoLgoJCSAgLy8KCQkgIC8vIFRoaXMgb3BlcmF0aW9uIGVtaXRzIG1vcmUgY29kZSB0aGFuIHRoZSBvdGhlciBvcHRpb25zLAoJCSAgLy8gYW5kIGNhbiBiZSBhdm9pZGVkIGJ5IHBhc3NpbmcgdGhlIGBrbm93bkhlbHBlcnNgIGFuZAoJCSAgLy8gYGtub3duSGVscGVyc09ubHlgIGZsYWdzIGF0IGNvbXBpbGUtdGltZS4KCQkgIGludm9rZUFtYmlndW91czogZnVuY3Rpb24gaW52b2tlQW1iaWd1b3VzKG5hbWUsIGhlbHBlckNhbGwpIHsKCQkgICAgdGhpcy51c2VSZWdpc3RlcignaGVscGVyJyk7CgoJCSAgICB2YXIgbm9uSGVscGVyID0gdGhpcy5wb3BTdGFjaygpOwoKCQkgICAgdGhpcy5lbXB0eUhhc2goKTsKCQkgICAgdmFyIGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIoMCwgbmFtZSwgaGVscGVyQ2FsbCk7CgoJCSAgICB2YXIgaGVscGVyTmFtZSA9IHRoaXMubGFzdEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKTsKCgkJICAgIHZhciBsb29rdXAgPSBbJygnLCAnKGhlbHBlciA9ICcsIGhlbHBlck5hbWUsICcgfHwgJywgbm9uSGVscGVyLCAnKSddOwoJCSAgICBpZiAoIXRoaXMub3B0aW9ucy5zdHJpY3QpIHsKCQkgICAgICBsb29rdXBbMF0gPSAnKGhlbHBlciA9ICc7CgkJICAgICAgbG9va3VwLnB1c2goJyAhPSBudWxsID8gaGVscGVyIDogJywgdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuaGVscGVyTWlzc2luZycpKTsKCQkgICAgfQoKCQkgICAgdGhpcy5wdXNoKFsnKCcsIGxvb2t1cCwgaGVscGVyLnBhcmFtc0luaXQgPyBbJyksKCcsIGhlbHBlci5wYXJhbXNJbml0XSA6IFtdLCAnKSwnLCAnKHR5cGVvZiBoZWxwZXIgPT09ICcsIHRoaXMuYWxpYXNhYmxlKCciZnVuY3Rpb24iJyksICcgPyAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoJ2hlbHBlcicsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpLCAnIDogaGVscGVyKSknXSk7CgkJICB9LAoKCQkgIC8vIFtpbnZva2VQYXJ0aWFsXQoJCSAgLy8KCQkgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGNvbnRleHQsIC4uLgoJCSAgLy8gT24gc3RhY2sgYWZ0ZXI6IHJlc3VsdCBvZiBwYXJ0aWFsIGludm9jYXRpb24KCQkgIC8vCgkJICAvLyBUaGlzIG9wZXJhdGlvbiBwb3BzIG9mZiBhIGNvbnRleHQsIGludm9rZXMgYSBwYXJ0aWFsIHdpdGggdGhhdCBjb250ZXh0LAoJCSAgLy8gYW5kIHB1c2hlcyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZvY2F0aW9uIGJhY2suCgkJICBpbnZva2VQYXJ0aWFsOiBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsKGlzRHluYW1pYywgbmFtZSwgaW5kZW50KSB7CgkJICAgIHZhciBwYXJhbXMgPSBbXSwKCQkgICAgICAgIG9wdGlvbnMgPSB0aGlzLnNldHVwUGFyYW1zKG5hbWUsIDEsIHBhcmFtcyk7CgoJCSAgICBpZiAoaXNEeW5hbWljKSB7CgkJICAgICAgbmFtZSA9IHRoaXMucG9wU3RhY2soKTsKCQkgICAgICBkZWxldGUgb3B0aW9ucy5uYW1lOwoJCSAgICB9CgoJCSAgICBpZiAoaW5kZW50KSB7CgkJICAgICAgb3B0aW9ucy5pbmRlbnQgPSBKU09OLnN0cmluZ2lmeShpbmRlbnQpOwoJCSAgICB9CgkJICAgIG9wdGlvbnMuaGVscGVycyA9ICdoZWxwZXJzJzsKCQkgICAgb3B0aW9ucy5wYXJ0aWFscyA9ICdwYXJ0aWFscyc7CgkJICAgIG9wdGlvbnMuZGVjb3JhdG9ycyA9ICdjb250YWluZXIuZGVjb3JhdG9ycyc7CgoJCSAgICBpZiAoIWlzRHluYW1pYykgewoJCSAgICAgIHBhcmFtcy51bnNoaWZ0KHRoaXMubmFtZUxvb2t1cCgncGFydGlhbHMnLCBuYW1lLCAncGFydGlhbCcpKTsKCQkgICAgfSBlbHNlIHsKCQkgICAgICBwYXJhbXMudW5zaGlmdChuYW1lKTsKCQkgICAgfQoKCQkgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXQpIHsKCQkgICAgICBvcHRpb25zLmRlcHRocyA9ICdkZXB0aHMnOwoJCSAgICB9CgkJICAgIG9wdGlvbnMgPSB0aGlzLm9iamVjdExpdGVyYWwob3B0aW9ucyk7CgkJICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpOwoKCQkgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnY29udGFpbmVyLmludm9rZVBhcnRpYWwnLCAnJywgcGFyYW1zKSk7CgkJICB9LAoKCQkgIC8vIFthc3NpZ25Ub0hhc2hdCgkJICAvLwoJCSAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLiwgaGFzaCwgLi4uCgkJICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLiwgaGFzaCwgLi4uCgkJICAvLwoJCSAgLy8gUG9wcyBhIHZhbHVlIG9mZiB0aGUgc3RhY2sgYW5kIGFzc2lnbnMgaXQgdG8gdGhlIGN1cnJlbnQgaGFzaAoJCSAgYXNzaWduVG9IYXNoOiBmdW5jdGlvbiBhc3NpZ25Ub0hhc2goa2V5KSB7CgkJICAgIHZhciB2YWx1ZSA9IHRoaXMucG9wU3RhY2soKSwKCQkgICAgICAgIGNvbnRleHQgPSB1bmRlZmluZWQsCgkJICAgICAgICB0eXBlID0gdW5kZWZpbmVkLAoJCSAgICAgICAgaWQgPSB1bmRlZmluZWQ7CgoJCSAgICBpZiAodGhpcy50cmFja0lkcykgewoJCSAgICAgIGlkID0gdGhpcy5wb3BTdGFjaygpOwoJCSAgICB9CgkJICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykgewoJCSAgICAgIHR5cGUgPSB0aGlzLnBvcFN0YWNrKCk7CgkJICAgICAgY29udGV4dCA9IHRoaXMucG9wU3RhY2soKTsKCQkgICAgfQoKCQkgICAgdmFyIGhhc2ggPSB0aGlzLmhhc2g7CgkJICAgIGlmIChjb250ZXh0KSB7CgkJICAgICAgaGFzaC5jb250ZXh0c1trZXldID0gY29udGV4dDsKCQkgICAgfQoJCSAgICBpZiAodHlwZSkgewoJCSAgICAgIGhhc2gudHlwZXNba2V5XSA9IHR5cGU7CgkJICAgIH0KCQkgICAgaWYgKGlkKSB7CgkJICAgICAgaGFzaC5pZHNba2V5XSA9IGlkOwoJCSAgICB9CgkJICAgIGhhc2gudmFsdWVzW2tleV0gPSB2YWx1ZTsKCQkgIH0sCgoJCSAgcHVzaElkOiBmdW5jdGlvbiBwdXNoSWQodHlwZSwgbmFtZSwgY2hpbGQpIHsKCQkgICAgaWYgKHR5cGUgPT09ICdCbG9ja1BhcmFtJykgewoJCSAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnYmxvY2tQYXJhbXNbJyArIG5hbWVbMF0gKyAnXS5wYXRoWycgKyBuYW1lWzFdICsgJ10nICsgKGNoaWxkID8gJyArICcgKyBKU09OLnN0cmluZ2lmeSgnLicgKyBjaGlsZCkgOiAnJykpOwoJCSAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdQYXRoRXhwcmVzc2lvbicpIHsKCQkgICAgICB0aGlzLnB1c2hTdHJpbmcobmFtZSk7CgkJICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7CgkJICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCd0cnVlJyk7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdudWxsJyk7CgkJICAgIH0KCQkgIH0sCgoJCSAgLy8gSEVMUEVSUwoKCQkgIGNvbXBpbGVyOiBKYXZhU2NyaXB0Q29tcGlsZXIsCgoJCSAgY29tcGlsZUNoaWxkcmVuOiBmdW5jdGlvbiBjb21waWxlQ2hpbGRyZW4oZW52aXJvbm1lbnQsIG9wdGlvbnMpIHsKCQkgICAgdmFyIGNoaWxkcmVuID0gZW52aXJvbm1lbnQuY2hpbGRyZW4sCgkJICAgICAgICBjaGlsZCA9IHVuZGVmaW5lZCwKCQkgICAgICAgIGNvbXBpbGVyID0gdW5kZWZpbmVkOwoKCQkgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldOwoJCSAgICAgIGNvbXBpbGVyID0gbmV3IHRoaXMuY29tcGlsZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwCgoJCSAgICAgIHZhciBleGlzdGluZyA9IHRoaXMubWF0Y2hFeGlzdGluZ1Byb2dyYW0oY2hpbGQpOwoKCQkgICAgICBpZiAoZXhpc3RpbmcgPT0gbnVsbCkgewoJCSAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zLnB1c2goJycpOyAvLyBQbGFjZWhvbGRlciB0byBwcmV2ZW50IG5hbWUgY29uZmxpY3RzIGZvciBuZXN0ZWQgY2hpbGRyZW4KCQkgICAgICAgIHZhciBpbmRleCA9IHRoaXMuY29udGV4dC5wcm9ncmFtcy5sZW5ndGg7CgkJICAgICAgICBjaGlsZC5pbmRleCA9IGluZGV4OwoJCSAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4OwoJCSAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zW2luZGV4XSA9IGNvbXBpbGVyLmNvbXBpbGUoY2hpbGQsIG9wdGlvbnMsIHRoaXMuY29udGV4dCwgIXRoaXMucHJlY29tcGlsZSk7CgkJICAgICAgICB0aGlzLmNvbnRleHQuZGVjb3JhdG9yc1tpbmRleF0gPSBjb21waWxlci5kZWNvcmF0b3JzOwoJCSAgICAgICAgdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpbmRleF0gPSBjaGlsZDsKCgkJICAgICAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IGNvbXBpbGVyLnVzZURlcHRoczsKCQkgICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGNvbXBpbGVyLnVzZUJsb2NrUGFyYW1zOwoJCSAgICAgICAgY2hpbGQudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHM7CgkJICAgICAgICBjaGlsZC51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXM7CgkJICAgICAgfSBlbHNlIHsKCQkgICAgICAgIGNoaWxkLmluZGV4ID0gZXhpc3RpbmcuaW5kZXg7CgkJICAgICAgICBjaGlsZC5uYW1lID0gJ3Byb2dyYW0nICsgZXhpc3RpbmcuaW5kZXg7CgoJCSAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBleGlzdGluZy51c2VEZXB0aHM7CgkJICAgICAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBleGlzdGluZy51c2VCbG9ja1BhcmFtczsKCQkgICAgICB9CgkJICAgIH0KCQkgIH0sCgkJICBtYXRjaEV4aXN0aW5nUHJvZ3JhbTogZnVuY3Rpb24gbWF0Y2hFeGlzdGluZ1Byb2dyYW0oY2hpbGQpIHsKCQkgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKCQkgICAgICB2YXIgZW52aXJvbm1lbnQgPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzW2ldOwoJCSAgICAgIGlmIChlbnZpcm9ubWVudCAmJiBlbnZpcm9ubWVudC5lcXVhbHMoY2hpbGQpKSB7CgkJICAgICAgICByZXR1cm4gZW52aXJvbm1lbnQ7CgkJICAgICAgfQoJCSAgICB9CgkJICB9LAoKCQkgIHByb2dyYW1FeHByZXNzaW9uOiBmdW5jdGlvbiBwcm9ncmFtRXhwcmVzc2lvbihndWlkKSB7CgkJICAgIHZhciBjaGlsZCA9IHRoaXMuZW52aXJvbm1lbnQuY2hpbGRyZW5bZ3VpZF0sCgkJICAgICAgICBwcm9ncmFtUGFyYW1zID0gW2NoaWxkLmluZGV4LCAnZGF0YScsIGNoaWxkLmJsb2NrUGFyYW1zXTsKCgkJICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7CgkJICAgICAgcHJvZ3JhbVBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpOwoJCSAgICB9CgkJICAgIGlmICh0aGlzLnVzZURlcHRocykgewoJCSAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnZGVwdGhzJyk7CgkJICAgIH0KCgkJICAgIHJldHVybiAnY29udGFpbmVyLnByb2dyYW0oJyArIHByb2dyYW1QYXJhbXMuam9pbignLCAnKSArICcpJzsKCQkgIH0sCgoJCSAgdXNlUmVnaXN0ZXI6IGZ1bmN0aW9uIHVzZVJlZ2lzdGVyKG5hbWUpIHsKCQkgICAgaWYgKCF0aGlzLnJlZ2lzdGVyc1tuYW1lXSkgewoJCSAgICAgIHRoaXMucmVnaXN0ZXJzW25hbWVdID0gdHJ1ZTsKCQkgICAgICB0aGlzLnJlZ2lzdGVycy5saXN0LnB1c2gobmFtZSk7CgkJICAgIH0KCQkgIH0sCgoJCSAgcHVzaDogZnVuY3Rpb24gcHVzaChleHByKSB7CgkJICAgIGlmICghKGV4cHIgaW5zdGFuY2VvZiBMaXRlcmFsKSkgewoJCSAgICAgIGV4cHIgPSB0aGlzLnNvdXJjZS53cmFwKGV4cHIpOwoJCSAgICB9CgoJCSAgICB0aGlzLmlubGluZVN0YWNrLnB1c2goZXhwcik7CgkJICAgIHJldHVybiBleHByOwoJCSAgfSwKCgkJICBwdXNoU3RhY2tMaXRlcmFsOiBmdW5jdGlvbiBwdXNoU3RhY2tMaXRlcmFsKGl0ZW0pIHsKCQkgICAgdGhpcy5wdXNoKG5ldyBMaXRlcmFsKGl0ZW0pKTsKCQkgIH0sCgoJCSAgcHVzaFNvdXJjZTogZnVuY3Rpb24gcHVzaFNvdXJjZShzb3VyY2UpIHsKCQkgICAgaWYgKHRoaXMucGVuZGluZ0NvbnRlbnQpIHsKCQkgICAgICB0aGlzLnNvdXJjZS5wdXNoKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHRoaXMucGVuZGluZ0NvbnRlbnQpLCB0aGlzLnBlbmRpbmdMb2NhdGlvbikpOwoJCSAgICAgIHRoaXMucGVuZGluZ0NvbnRlbnQgPSB1bmRlZmluZWQ7CgkJICAgIH0KCgkJICAgIGlmIChzb3VyY2UpIHsKCQkgICAgICB0aGlzLnNvdXJjZS5wdXNoKHNvdXJjZSk7CgkJICAgIH0KCQkgIH0sCgoJCSAgcmVwbGFjZVN0YWNrOiBmdW5jdGlvbiByZXBsYWNlU3RhY2soY2FsbGJhY2spIHsKCQkgICAgdmFyIHByZWZpeCA9IFsnKCddLAoJCSAgICAgICAgc3RhY2sgPSB1bmRlZmluZWQsCgkJICAgICAgICBjcmVhdGVkU3RhY2sgPSB1bmRlZmluZWQsCgkJICAgICAgICB1c2VkTGl0ZXJhbCA9IHVuZGVmaW5lZDsKCgkJICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgkJICAgIGlmICghdGhpcy5pc0lubGluZSgpKSB7CgkJICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ3JlcGxhY2VTdGFjayBvbiBub24taW5saW5lJyk7CgkJICAgIH0KCgkJICAgIC8vIFdlIHdhbnQgdG8gbWVyZ2UgdGhlIGlubGluZSBzdGF0ZW1lbnQgaW50byB0aGUgcmVwbGFjZW1lbnQgc3RhdGVtZW50IHZpYSAnLCcKCQkgICAgdmFyIHRvcCA9IHRoaXMucG9wU3RhY2sodHJ1ZSk7CgoJCSAgICBpZiAodG9wIGluc3RhbmNlb2YgTGl0ZXJhbCkgewoJCSAgICAgIC8vIExpdGVyYWxzIGRvIG5vdCBuZWVkIHRvIGJlIGlubGluZWQKCQkgICAgICBzdGFjayA9IFt0b3AudmFsdWVdOwoJCSAgICAgIHByZWZpeCA9IFsnKCcsIHN0YWNrXTsKCQkgICAgICB1c2VkTGl0ZXJhbCA9IHRydWU7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgY3VycmVudCBzdGFjayBuYW1lIGZvciB1c2UgYnkgdGhlIGlubGluZQoJCSAgICAgIGNyZWF0ZWRTdGFjayA9IHRydWU7CgkJICAgICAgdmFyIF9uYW1lID0gdGhpcy5pbmNyU3RhY2soKTsKCgkJICAgICAgcHJlZml4ID0gWycoKCcsIHRoaXMucHVzaChfbmFtZSksICcgPSAnLCB0b3AsICcpJ107CgkJICAgICAgc3RhY2sgPSB0aGlzLnRvcFN0YWNrKCk7CgkJICAgIH0KCgkJICAgIHZhciBpdGVtID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdGFjayk7CgoJCSAgICBpZiAoIXVzZWRMaXRlcmFsKSB7CgkJICAgICAgdGhpcy5wb3BTdGFjaygpOwoJCSAgICB9CgkJICAgIGlmIChjcmVhdGVkU3RhY2spIHsKCQkgICAgICB0aGlzLnN0YWNrU2xvdC0tOwoJCSAgICB9CgkJICAgIHRoaXMucHVzaChwcmVmaXguY29uY2F0KGl0ZW0sICcpJykpOwoJCSAgfSwKCgkJICBpbmNyU3RhY2s6IGZ1bmN0aW9uIGluY3JTdGFjaygpIHsKCQkgICAgdGhpcy5zdGFja1Nsb3QrKzsKCQkgICAgaWYgKHRoaXMuc3RhY2tTbG90ID4gdGhpcy5zdGFja1ZhcnMubGVuZ3RoKSB7CgkJICAgICAgdGhpcy5zdGFja1ZhcnMucHVzaCgnc3RhY2snICsgdGhpcy5zdGFja1Nsb3QpOwoJCSAgICB9CgkJICAgIHJldHVybiB0aGlzLnRvcFN0YWNrTmFtZSgpOwoJCSAgfSwKCQkgIHRvcFN0YWNrTmFtZTogZnVuY3Rpb24gdG9wU3RhY2tOYW1lKCkgewoJCSAgICByZXR1cm4gJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90OwoJCSAgfSwKCQkgIGZsdXNoSW5saW5lOiBmdW5jdGlvbiBmbHVzaElubGluZSgpIHsKCQkgICAgdmFyIGlubGluZVN0YWNrID0gdGhpcy5pbmxpbmVTdGFjazsKCQkgICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdOwoJCSAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW5saW5lU3RhY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKCQkgICAgICB2YXIgZW50cnkgPSBpbmxpbmVTdGFja1tpXTsKCQkgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KCQkgICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiBMaXRlcmFsKSB7CgkJICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKGVudHJ5KTsKCQkgICAgICB9IGVsc2UgewoJCSAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5pbmNyU3RhY2soKTsKCQkgICAgICAgIHRoaXMucHVzaFNvdXJjZShbc3RhY2ssICcgPSAnLCBlbnRyeSwgJzsnXSk7CgkJICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKHN0YWNrKTsKCQkgICAgICB9CgkJICAgIH0KCQkgIH0sCgkJICBpc0lubGluZTogZnVuY3Rpb24gaXNJbmxpbmUoKSB7CgkJICAgIHJldHVybiB0aGlzLmlubGluZVN0YWNrLmxlbmd0aDsKCQkgIH0sCgoJCSAgcG9wU3RhY2s6IGZ1bmN0aW9uIHBvcFN0YWNrKHdyYXBwZWQpIHsKCQkgICAgdmFyIGlubGluZSA9IHRoaXMuaXNJbmxpbmUoKSwKCQkgICAgICAgIGl0ZW0gPSAoaW5saW5lID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrKS5wb3AoKTsKCgkJICAgIGlmICghd3JhcHBlZCAmJiBpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkgewoJCSAgICAgIHJldHVybiBpdGVtLnZhbHVlOwoJCSAgICB9IGVsc2UgewoJCSAgICAgIGlmICghaW5saW5lKSB7CgkJICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoJCSAgICAgICAgaWYgKCF0aGlzLnN0YWNrU2xvdCkgewoJCSAgICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnSW52YWxpZCBzdGFjayBwb3AnKTsKCQkgICAgICAgIH0KCQkgICAgICAgIHRoaXMuc3RhY2tTbG90LS07CgkJICAgICAgfQoJCSAgICAgIHJldHVybiBpdGVtOwoJCSAgICB9CgkJICB9LAoKCQkgIHRvcFN0YWNrOiBmdW5jdGlvbiB0b3BTdGFjaygpIHsKCQkgICAgdmFyIHN0YWNrID0gdGhpcy5pc0lubGluZSgpID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrLAoJCSAgICAgICAgaXRlbSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdOwoKCQkgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCgkJICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkgewoJCSAgICAgIHJldHVybiBpdGVtLnZhbHVlOwoJCSAgICB9IGVsc2UgewoJCSAgICAgIHJldHVybiBpdGVtOwoJCSAgICB9CgkJICB9LAoKCQkgIGNvbnRleHROYW1lOiBmdW5jdGlvbiBjb250ZXh0TmFtZShjb250ZXh0KSB7CgkJICAgIGlmICh0aGlzLnVzZURlcHRocyAmJiBjb250ZXh0KSB7CgkJICAgICAgcmV0dXJuICdkZXB0aHNbJyArIGNvbnRleHQgKyAnXSc7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgcmV0dXJuICdkZXB0aCcgKyBjb250ZXh0OwoJCSAgICB9CgkJICB9LAoKCQkgIHF1b3RlZFN0cmluZzogZnVuY3Rpb24gcXVvdGVkU3RyaW5nKHN0cikgewoJCSAgICByZXR1cm4gdGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHN0cik7CgkJICB9LAoKCQkgIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uIG9iamVjdExpdGVyYWwob2JqKSB7CgkJICAgIHJldHVybiB0aGlzLnNvdXJjZS5vYmplY3RMaXRlcmFsKG9iaik7CgkJICB9LAoKCQkgIGFsaWFzYWJsZTogZnVuY3Rpb24gYWxpYXNhYmxlKG5hbWUpIHsKCQkgICAgdmFyIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXTsKCQkgICAgaWYgKHJldCkgewoJCSAgICAgIHJldC5yZWZlcmVuY2VDb3VudCsrOwoJCSAgICAgIHJldHVybiByZXQ7CgkJICAgIH0KCgkJICAgIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXSA9IHRoaXMuc291cmNlLndyYXAobmFtZSk7CgkJICAgIHJldC5hbGlhc2FibGUgPSB0cnVlOwoJCSAgICByZXQucmVmZXJlbmNlQ291bnQgPSAxOwoKCQkgICAgcmV0dXJuIHJldDsKCQkgIH0sCgoJCSAgc2V0dXBIZWxwZXI6IGZ1bmN0aW9uIHNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSwgYmxvY2tIZWxwZXIpIHsKCQkgICAgdmFyIHBhcmFtcyA9IFtdLAoJCSAgICAgICAgcGFyYW1zSW5pdCA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSwgcGFyYW1zLCBibG9ja0hlbHBlcik7CgkJICAgIHZhciBmb3VuZEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKSwKCQkgICAgICAgIGNhbGxDb250ZXh0ID0gdGhpcy5hbGlhc2FibGUodGhpcy5jb250ZXh0TmFtZSgwKSArICcgIT0gbnVsbCA/ICcgKyB0aGlzLmNvbnRleHROYW1lKDApICsgJyA6IHt9Jyk7CgoJCSAgICByZXR1cm4gewoJCSAgICAgIHBhcmFtczogcGFyYW1zLAoJCSAgICAgIHBhcmFtc0luaXQ6IHBhcmFtc0luaXQsCgkJICAgICAgbmFtZTogZm91bmRIZWxwZXIsCgkJICAgICAgY2FsbFBhcmFtczogW2NhbGxDb250ZXh0XS5jb25jYXQocGFyYW1zKQoJCSAgICB9OwoJCSAgfSwKCgkJICBzZXR1cFBhcmFtczogZnVuY3Rpb24gc2V0dXBQYXJhbXMoaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcykgewoJCSAgICB2YXIgb3B0aW9ucyA9IHt9LAoJCSAgICAgICAgY29udGV4dHMgPSBbXSwKCQkgICAgICAgIHR5cGVzID0gW10sCgkJICAgICAgICBpZHMgPSBbXSwKCQkgICAgICAgIG9iamVjdEFyZ3MgPSAhcGFyYW1zLAoJCSAgICAgICAgcGFyYW0gPSB1bmRlZmluZWQ7CgoJCSAgICBpZiAob2JqZWN0QXJncykgewoJCSAgICAgIHBhcmFtcyA9IFtdOwoJCSAgICB9CgoJCSAgICBvcHRpb25zLm5hbWUgPSB0aGlzLnF1b3RlZFN0cmluZyhoZWxwZXIpOwoJCSAgICBvcHRpb25zLmhhc2ggPSB0aGlzLnBvcFN0YWNrKCk7CgoJCSAgICBpZiAodGhpcy50cmFja0lkcykgewoJCSAgICAgIG9wdGlvbnMuaGFzaElkcyA9IHRoaXMucG9wU3RhY2soKTsKCQkgICAgfQoJCSAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHsKCQkgICAgICBvcHRpb25zLmhhc2hUeXBlcyA9IHRoaXMucG9wU3RhY2soKTsKCQkgICAgICBvcHRpb25zLmhhc2hDb250ZXh0cyA9IHRoaXMucG9wU3RhY2soKTsKCQkgICAgfQoKCQkgICAgdmFyIGludmVyc2UgPSB0aGlzLnBvcFN0YWNrKCksCgkJICAgICAgICBwcm9ncmFtID0gdGhpcy5wb3BTdGFjaygpOwoKCQkgICAgLy8gQXZvaWQgc2V0dGluZyBmbiBhbmQgaW52ZXJzZSBpZiBuZWl0aGVyIGFyZSBzZXQuIFRoaXMgYWxsb3dzCgkJICAgIC8vIGhlbHBlcnMgdG8gZG8gYSBjaGVjayBmb3IgYGlmIChvcHRpb25zLmZuKWAKCQkgICAgaWYgKHByb2dyYW0gfHwgaW52ZXJzZSkgewoJCSAgICAgIG9wdGlvbnMuZm4gPSBwcm9ncmFtIHx8ICdjb250YWluZXIubm9vcCc7CgkJICAgICAgb3B0aW9ucy5pbnZlcnNlID0gaW52ZXJzZSB8fCAnY29udGFpbmVyLm5vb3AnOwoJCSAgICB9CgoJCSAgICAvLyBUaGUgcGFyYW1ldGVycyBnbyBvbiB0byB0aGUgc3RhY2sgaW4gb3JkZXIgKG1ha2luZyBzdXJlIHRoYXQgdGhleSBhcmUgZXZhbHVhdGVkIGluIG9yZGVyKQoJCSAgICAvLyBzbyB3ZSBuZWVkIHRvIHBvcCB0aGVtIG9mZiB0aGUgc3RhY2sgaW4gcmV2ZXJzZSBvcmRlcgoJCSAgICB2YXIgaSA9IHBhcmFtU2l6ZTsKCQkgICAgd2hpbGUgKGktLSkgewoJCSAgICAgIHBhcmFtID0gdGhpcy5wb3BTdGFjaygpOwoJCSAgICAgIHBhcmFtc1tpXSA9IHBhcmFtOwoKCQkgICAgICBpZiAodGhpcy50cmFja0lkcykgewoJCSAgICAgICAgaWRzW2ldID0gdGhpcy5wb3BTdGFjaygpOwoJCSAgICAgIH0KCQkgICAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHsKCQkgICAgICAgIHR5cGVzW2ldID0gdGhpcy5wb3BTdGFjaygpOwoJCSAgICAgICAgY29udGV4dHNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7CgkJICAgICAgfQoJCSAgICB9CgoJCSAgICBpZiAob2JqZWN0QXJncykgewoJCSAgICAgIG9wdGlvbnMuYXJncyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkocGFyYW1zKTsKCQkgICAgfQoKCQkgICAgaWYgKHRoaXMudHJhY2tJZHMpIHsKCQkgICAgICBvcHRpb25zLmlkcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoaWRzKTsKCQkgICAgfQoJCSAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHsKCQkgICAgICBvcHRpb25zLnR5cGVzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheSh0eXBlcyk7CgkJICAgICAgb3B0aW9ucy5jb250ZXh0cyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoY29udGV4dHMpOwoJCSAgICB9CgoJCSAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHsKCQkgICAgICBvcHRpb25zLmRhdGEgPSAnZGF0YSc7CgkJICAgIH0KCQkgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHsKCQkgICAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gJ2Jsb2NrUGFyYW1zJzsKCQkgICAgfQoJCSAgICByZXR1cm4gb3B0aW9uczsKCQkgIH0sCgoJCSAgc2V0dXBIZWxwZXJBcmdzOiBmdW5jdGlvbiBzZXR1cEhlbHBlckFyZ3MoaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcywgdXNlUmVnaXN0ZXIpIHsKCQkgICAgdmFyIG9wdGlvbnMgPSB0aGlzLnNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpOwoJCSAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpOwoJCSAgICBpZiAodXNlUmVnaXN0ZXIpIHsKCQkgICAgICB0aGlzLnVzZVJlZ2lzdGVyKCdvcHRpb25zJyk7CgkJICAgICAgcGFyYW1zLnB1c2goJ29wdGlvbnMnKTsKCQkgICAgICByZXR1cm4gWydvcHRpb25zPScsIG9wdGlvbnNdOwoJCSAgICB9IGVsc2UgaWYgKHBhcmFtcykgewoJCSAgICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpOwoJCSAgICAgIHJldHVybiAnJzsKCQkgICAgfSBlbHNlIHsKCQkgICAgICByZXR1cm4gb3B0aW9uczsKCQkgICAgfQoJCSAgfQoJCX07CgoJCShmdW5jdGlvbiAoKSB7CgkJICB2YXIgcmVzZXJ2ZWRXb3JkcyA9ICgnYnJlYWsgZWxzZSBuZXcgdmFyJyArICcgY2FzZSBmaW5hbGx5IHJldHVybiB2b2lkJyArICcgY2F0Y2ggZm9yIHN3aXRjaCB3aGlsZScgKyAnIGNvbnRpbnVlIGZ1bmN0aW9uIHRoaXMgd2l0aCcgKyAnIGRlZmF1bHQgaWYgdGhyb3cnICsgJyBkZWxldGUgaW4gdHJ5JyArICcgZG8gaW5zdGFuY2VvZiB0eXBlb2YnICsgJyBhYnN0cmFjdCBlbnVtIGludCBzaG9ydCcgKyAnIGJvb2xlYW4gZXhwb3J0IGludGVyZmFjZSBzdGF0aWMnICsgJyBieXRlIGV4dGVuZHMgbG9uZyBzdXBlcicgKyAnIGNoYXIgZmluYWwgbmF0aXZlIHN5bmNocm9uaXplZCcgKyAnIGNsYXNzIGZsb2F0IHBhY2thZ2UgdGhyb3dzJyArICcgY29uc3QgZ290byBwcml2YXRlIHRyYW5zaWVudCcgKyAnIGRlYnVnZ2VyIGltcGxlbWVudHMgcHJvdGVjdGVkIHZvbGF0aWxlJyArICcgZG91YmxlIGltcG9ydCBwdWJsaWMgbGV0IHlpZWxkIGF3YWl0JyArICcgbnVsbCB0cnVlIGZhbHNlJykuc3BsaXQoJyAnKTsKCgkJICB2YXIgY29tcGlsZXJXb3JkcyA9IEphdmFTY3JpcHRDb21waWxlci5SRVNFUlZFRF9XT1JEUyA9IHt9OwoKCQkgIGZvciAodmFyIGkgPSAwLCBsID0gcmVzZXJ2ZWRXb3Jkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkgICAgY29tcGlsZXJXb3Jkc1tyZXNlcnZlZFdvcmRzW2ldXSA9IHRydWU7CgkJICB9CgkJfSkoKTsKCgkJSmF2YVNjcmlwdENvbXBpbGVyLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHsKCQkgIHJldHVybiAhSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTW25hbWVdICYmIC9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC8udGVzdChuYW1lKTsKCQl9OwoKCQlmdW5jdGlvbiBzdHJpY3RMb29rdXAocmVxdWlyZVRlcm1pbmFsLCBjb21waWxlciwgcGFydHMsIHR5cGUpIHsKCQkgIHZhciBzdGFjayA9IGNvbXBpbGVyLnBvcFN0YWNrKCksCgkJICAgICAgaSA9IDAsCgkJICAgICAgbGVuID0gcGFydHMubGVuZ3RoOwoJCSAgaWYgKHJlcXVpcmVUZXJtaW5hbCkgewoJCSAgICBsZW4tLTsKCQkgIH0KCgkJICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7CgkJICAgIHN0YWNrID0gY29tcGlsZXIubmFtZUxvb2t1cChzdGFjaywgcGFydHNbaV0sIHR5cGUpOwoJCSAgfQoKCQkgIGlmIChyZXF1aXJlVGVybWluYWwpIHsKCQkgICAgcmV0dXJuIFtjb21waWxlci5hbGlhc2FibGUoJ2NvbnRhaW5lci5zdHJpY3QnKSwgJygnLCBzdGFjaywgJywgJywgY29tcGlsZXIucXVvdGVkU3RyaW5nKHBhcnRzW2ldKSwgJyknXTsKCQkgIH0gZWxzZSB7CgkJICAgIHJldHVybiBzdGFjazsKCQkgIH0KCQl9CgoJCWV4cG9ydHNbJ2RlZmF1bHQnXSA9IEphdmFTY3JpcHRDb21waWxlcjsKCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCgkvKioqLyB9LAoJLyogMzIgKi8KCS8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCQkvKiBnbG9iYWwgZGVmaW5lICovCgkJJ3VzZSBzdHJpY3QnOwoKCQlleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKCQl2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKCgkJdmFyIFNvdXJjZU5vZGUgPSB1bmRlZmluZWQ7CgoJCXRyeSB7CgkJICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoJCSAgaWYgKGZhbHNlKSB7CgkJICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgdGhpcyBpbiBBTUQgZW52aXJvbm1lbnRzLiBGb3IgdGhlc2UgZW52aXJvbm1lbnRzLCB3ZSBhc3VzbWUgdGhhdAoJCSAgICAvLyB0aGV5IGFyZSBydW5uaW5nIG9uIHRoZSBicm93c2VyIGFuZCB0aHVzIGhhdmUgbm8gbmVlZCBmb3IgdGhlIHNvdXJjZS1tYXAgbGlicmFyeS4KCQkgICAgdmFyIFNvdXJjZU1hcCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTsKCQkgICAgU291cmNlTm9kZSA9IFNvdXJjZU1hcC5Tb3VyY2VOb2RlOwoJCSAgfQoJCX0gY2F0Y2ggKGVycikge30KCQkvKiBOT1AgKi8KCgkJLyogaXN0YW5idWwgaWdub3JlIGlmOiB0ZXN0ZWQgYnV0IG5vdCBjb3ZlcmVkIGluIGlzdGFuYnVsIGR1ZSB0byBkaXN0IGJ1aWxkICAqLwoJCWlmICghU291cmNlTm9kZSkgewoJCSAgU291cmNlTm9kZSA9IGZ1bmN0aW9uIChsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykgewoJCSAgICB0aGlzLnNyYyA9ICcnOwoJCSAgICBpZiAoY2h1bmtzKSB7CgkJICAgICAgdGhpcy5hZGQoY2h1bmtzKTsKCQkgICAgfQoJCSAgfTsKCQkgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgkJICBTb3VyY2VOb2RlLnByb3RvdHlwZSA9IHsKCQkgICAgYWRkOiBmdW5jdGlvbiBhZGQoY2h1bmtzKSB7CgkJICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNodW5rcykpIHsKCQkgICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTsKCQkgICAgICB9CgkJICAgICAgdGhpcy5zcmMgKz0gY2h1bmtzOwoJCSAgICB9LAoJCSAgICBwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKGNodW5rcykgewoJCSAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjaHVua3MpKSB7CgkJICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7CgkJICAgICAgfQoJCSAgICAgIHRoaXMuc3JjID0gY2h1bmtzICsgdGhpcy5zcmM7CgkJICAgIH0sCgkJICAgIHRvU3RyaW5nV2l0aFNvdXJjZU1hcDogZnVuY3Rpb24gdG9TdHJpbmdXaXRoU291cmNlTWFwKCkgewoJCSAgICAgIHJldHVybiB7IGNvZGU6IHRoaXMudG9TdHJpbmcoKSB9OwoJCSAgICB9LAoJCSAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CgkJICAgICAgcmV0dXJuIHRoaXMuc3JjOwoJCSAgICB9CgkJICB9OwoJCX0KCgkJZnVuY3Rpb24gY2FzdENodW5rKGNodW5rLCBjb2RlR2VuLCBsb2MpIHsKCQkgIGlmIChfdXRpbHMuaXNBcnJheShjaHVuaykpIHsKCQkgICAgdmFyIHJldCA9IFtdOwoKCQkgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CgkJICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTsKCQkgICAgfQoJCSAgICByZXR1cm4gcmV0OwoJCSAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7CgkJICAgIC8vIEhhbmRsZSBwcmltaXRpdmVzIHRoYXQgdGhlIFNvdXJjZU5vZGUgd2lsbCB0aHJvdyB1cCBvbgoJCSAgICByZXR1cm4gY2h1bmsgKyAnJzsKCQkgIH0KCQkgIHJldHVybiBjaHVuazsKCQl9CgoJCWZ1bmN0aW9uIENvZGVHZW4oc3JjRmlsZSkgewoJCSAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTsKCQkgIHRoaXMuc291cmNlID0gW107CgkJfQoKCQlDb2RlR2VuLnByb3RvdHlwZSA9IHsKCQkgIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7CgkJICAgIHJldHVybiAhdGhpcy5zb3VyY2UubGVuZ3RoOwoJCSAgfSwKCQkgIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoc291cmNlLCBsb2MpIHsKCQkgICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTsKCQkgIH0sCgkJICBwdXNoOiBmdW5jdGlvbiBwdXNoKHNvdXJjZSwgbG9jKSB7CgkJICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7CgkJICB9LAoKCQkgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZSgpIHsKCQkgICAgdmFyIHNvdXJjZSA9IHRoaXMuZW1wdHkoKTsKCQkgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChsaW5lKSB7CgkJICAgICAgc291cmNlLmFkZChbJyAgJywgbGluZSwgJ1xuJ10pOwoJCSAgICB9KTsKCQkgICAgcmV0dXJuIHNvdXJjZTsKCQkgIH0sCgoJCSAgZWFjaDogZnVuY3Rpb24gZWFjaChpdGVyKSB7CgkJICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLnNvdXJjZS5sZW5ndGg7IGkgPCBsZW47IGkrKykgewoJCSAgICAgIGl0ZXIodGhpcy5zb3VyY2VbaV0pOwoJCSAgICB9CgkJICB9LAoKCQkgIGVtcHR5OiBmdW5jdGlvbiBlbXB0eSgpIHsKCQkgICAgdmFyIGxvYyA9IHRoaXMuY3VycmVudExvY2F0aW9uIHx8IHsgc3RhcnQ6IHt9IH07CgkJICAgIHJldHVybiBuZXcgU291cmNlTm9kZShsb2Muc3RhcnQubGluZSwgbG9jLnN0YXJ0LmNvbHVtbiwgdGhpcy5zcmNGaWxlKTsKCQkgIH0sCgkJICB3cmFwOiBmdW5jdGlvbiB3cmFwKGNodW5rKSB7CgkJICAgIHZhciBsb2MgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7IHN0YXJ0OiB7fSB9IDogYXJndW1lbnRzWzFdOwoKCQkgICAgaWYgKGNodW5rIGluc3RhbmNlb2YgU291cmNlTm9kZSkgewoJCSAgICAgIHJldHVybiBjaHVuazsKCQkgICAgfQoKCQkgICAgY2h1bmsgPSBjYXN0Q2h1bmsoY2h1bmssIHRoaXMsIGxvYyk7CgoJCSAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSwgY2h1bmspOwoJCSAgfSwKCgkJICBmdW5jdGlvbkNhbGw6IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbChmbiwgdHlwZSwgcGFyYW1zKSB7CgkJICAgIHBhcmFtcyA9IHRoaXMuZ2VuZXJhdGVMaXN0KHBhcmFtcyk7CgkJICAgIHJldHVybiB0aGlzLndyYXAoW2ZuLCB0eXBlID8gJy4nICsgdHlwZSArICcoJyA6ICcoJywgcGFyYW1zLCAnKSddKTsKCQkgIH0sCgoJCSAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbiBxdW90ZWRTdHJpbmcoc3RyKSB7CgkJICAgIHJldHVybiAnIicgKyAoc3RyICsgJycpLnJlcGxhY2UoL1xcL2csICdcXFxcJykucmVwbGFjZSgvIi9nLCAnXFwiJykucmVwbGFjZSgvXG4vZywgJ1xcbicpLnJlcGxhY2UoL1xyL2csICdcXHInKS5yZXBsYWNlKC9cdTIwMjgvZywgJ1xcdTIwMjgnKSAvLyBQZXIgRWNtYS0yNjIgNy4zICsgNy44LjQKCQkgICAgLnJlcGxhY2UoL1x1MjAyOS9nLCAnXFx1MjAyOScpICsgJyInOwoJCSAgfSwKCgkJICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbiBvYmplY3RMaXRlcmFsKG9iaikgewoJCSAgICB2YXIgcGFpcnMgPSBbXTsKCgkJICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKCQkgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHsKCQkgICAgICAgIHZhciB2YWx1ZSA9IGNhc3RDaHVuayhvYmpba2V5XSwgdGhpcyk7CgkJICAgICAgICBpZiAodmFsdWUgIT09ICd1bmRlZmluZWQnKSB7CgkJICAgICAgICAgIHBhaXJzLnB1c2goW3RoaXMucXVvdGVkU3RyaW5nKGtleSksICc6JywgdmFsdWVdKTsKCQkgICAgICAgIH0KCQkgICAgICB9CgkJICAgIH0KCgkJICAgIHZhciByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChwYWlycyk7CgkJICAgIHJldC5wcmVwZW5kKCd7Jyk7CgkJICAgIHJldC5hZGQoJ30nKTsKCQkgICAgcmV0dXJuIHJldDsKCQkgIH0sCgoJCSAgZ2VuZXJhdGVMaXN0OiBmdW5jdGlvbiBnZW5lcmF0ZUxpc3QoZW50cmllcykgewoJCSAgICB2YXIgcmV0ID0gdGhpcy5lbXB0eSgpOwoKCQkgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKCQkgICAgICBpZiAoaSkgewoJCSAgICAgICAgcmV0LmFkZCgnLCcpOwoJCSAgICAgIH0KCgkJICAgICAgcmV0LmFkZChjYXN0Q2h1bmsoZW50cmllc1tpXSwgdGhpcykpOwoJCSAgICB9CgoJCSAgICByZXR1cm4gcmV0OwoJCSAgfSwKCgkJICBnZW5lcmF0ZUFycmF5OiBmdW5jdGlvbiBnZW5lcmF0ZUFycmF5KGVudHJpZXMpIHsKCQkgICAgdmFyIHJldCA9IHRoaXMuZ2VuZXJhdGVMaXN0KGVudHJpZXMpOwoJCSAgICByZXQucHJlcGVuZCgnWycpOwoJCSAgICByZXQuYWRkKCddJyk7CgoJCSAgICByZXR1cm4gcmV0OwoJCSAgfQoJCX07CgoJCWV4cG9ydHNbJ2RlZmF1bHQnXSA9IENvZGVHZW47CgkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgoJLyoqKi8gfQoJLyoqKioqKi8gXSkKCX0pOwoJOwoKLyoqKi8gfSwKLyogNiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187J3VzZSBzdHJpY3QnOwoKCSEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBmdW5jdGlvbiAoXywgQ29va2llKSB7CgoJICB2YXIgU0VDVVJFRF9DT09LSUUgPSAvXmh0dHBzLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKTsKCgkgIHJldHVybiB7CgkgICAgc2V0Q29va2llOiBmdW5jdGlvbiBzZXRDb29raWUobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHsKCSAgICAgIENvb2tpZS5zZXQobmFtZSwgdmFsdWUsIF8uZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwgewoJICAgICAgICBzZWN1cmU6IFNFQ1VSRURfQ09PS0lFLAoJICAgICAgICBwYXRoOiAnLycKCSAgICAgIH0pKTsKCSAgICB9LAoKCSAgICBnZXRDb29raWU6IGZ1bmN0aW9uIGdldENvb2tpZSgpIHsKCSAgICAgIHJldHVybiBDb29raWUuZ2V0LmFwcGx5KENvb2tpZSwgYXJndW1lbnRzKTsKCSAgICB9LAoKCSAgICByZW1vdmVDb29raWU6IGZ1bmN0aW9uIHJlbW92ZUNvb2tpZSgpIHsKCSAgICAgIHJldHVybiBDb29raWUucmVtb3ZlLmFwcGx5KENvb2tpZSwgYXJndW1lbnRzKTsKCSAgICB9CgkgIH07Cgl9LmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7CgovKioqLyB9LAovKiA3ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsndXNlIHN0cmljdCc7CgoJLyogZXNsaW50IG9rdGEvZW5mb3JjZS1yZXF1aXJlanMtbmFtZXM6IDAsIG9rdGEvbm8tc3BlY2lmaWMtbWV0aG9kczogMCwgb2t0YS9uby1zcGVjaWZpYy1tb2R1bGVzOiAwICovCgkhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbX193ZWJwYWNrX3JlcXVpcmVfXyg4KSwgX193ZWJwYWNrX3JlcXVpcmVfXyg1KV0sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24gKHVuZGVyc2NvcmUsIEhhbmRsZWJhcnMpIHsKCgkgIHZhciBfID0gdW5kZXJzY29yZS5ub0NvbmZsaWN0KCk7CgoJICBfLm1peGluKHsKCgkgICAgcmVzdWx0Q3R4OiBmdW5jdGlvbiByZXN1bHRDdHgob2JqZWN0LCBwcm9wZXJ0eSwgY29udGV4dCwgZGVmYXVsdFZhbHVlKSB7CgkgICAgICB2YXIgdmFsdWUgPSBfLmlzT2JqZWN0KG9iamVjdCkgPyBvYmplY3RbcHJvcGVydHldIDogdm9pZCAwOwoJICAgICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHsKCSAgICAgICAgdmFsdWUgPSB2YWx1ZS5jYWxsKGNvbnRleHQgfHwgb2JqZWN0KTsKCSAgICAgIH0KCSAgICAgIGlmICh2YWx1ZSkgewoJICAgICAgICByZXR1cm4gdmFsdWU7CgkgICAgICB9IGVsc2UgewoJICAgICAgICByZXR1cm4gIV8uaXNVbmRlZmluZWQoZGVmYXVsdFZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlOwoJICAgICAgfQoJICAgIH0sCgoJICAgIGlzSW50ZWdlcjogZnVuY3Rpb24gaXNJbnRlZ2VyKHgpIHsKCSAgICAgIHJldHVybiBfLmlzTnVtYmVyKHgpICYmIHggJSAxID09PSAwOwoJICAgIH0sCgoJICAgIHRlbXBsYXRlOiBmdW5jdGlvbiB0ZW1wbGF0ZShzb3VyY2UsIGRhdGEpIHsKCSAgICAgIHZhciB0ZW1wbGF0ZSA9IEhhbmRsZWJhcnMuY29tcGlsZShzb3VyY2UpOwoJICAgICAgcmV0dXJuIGRhdGEgPyB0ZW1wbGF0ZShkYXRhKSA6IGZ1bmN0aW9uIChkYXRhKSB7CgkgICAgICAgIHJldHVybiB0ZW1wbGF0ZShkYXRhKTsKCSAgICAgIH07CgkgICAgfQoKCSAgfSk7CgoJICByZXR1cm4gXzsKCX0uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsKCi8qKiovIH0sCi8qIDggKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8vICAgICBVbmRlcnNjb3JlLmpzIDEuOC4zCgkvLyAgICAgaHR0cDovL3VuZGVyc2NvcmVqcy5vcmcKCS8vICAgICAoYykgMjAwOS0yMDE1IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzCgkvLyAgICAgVW5kZXJzY29yZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KCgkoZnVuY3Rpb24oKSB7CgoJICAvLyBCYXNlbGluZSBzZXR1cAoJICAvLyAtLS0tLS0tLS0tLS0tLQoKCSAgLy8gRXN0YWJsaXNoIHRoZSByb290IG9iamVjdCwgYHdpbmRvd2AgaW4gdGhlIGJyb3dzZXIsIG9yIGBleHBvcnRzYCBvbiB0aGUgc2VydmVyLgoJICB2YXIgcm9vdCA9IHRoaXM7CgoJICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYF9gIHZhcmlhYmxlLgoJICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fOwoKCSAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjoKCSAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlOwoKCSAgLy8gQ3JlYXRlIHF1aWNrIHJlZmVyZW5jZSB2YXJpYWJsZXMgZm9yIHNwZWVkIGFjY2VzcyB0byBjb3JlIHByb3RvdHlwZXMuCgkgIHZhcgoJICAgIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsCgkgICAgc2xpY2UgICAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2UsCgkgICAgdG9TdHJpbmcgICAgICAgICA9IE9ialByb3RvLnRvU3RyaW5nLAoJICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTsKCgkgIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZQoJICAvLyBhcmUgZGVjbGFyZWQgaGVyZS4KCSAgdmFyCgkgICAgbmF0aXZlSXNBcnJheSAgICAgID0gQXJyYXkuaXNBcnJheSwKCSAgICBuYXRpdmVLZXlzICAgICAgICAgPSBPYmplY3Qua2V5cywKCSAgICBuYXRpdmVCaW5kICAgICAgICAgPSBGdW5jUHJvdG8uYmluZCwKCSAgICBuYXRpdmVDcmVhdGUgICAgICAgPSBPYmplY3QuY3JlYXRlOwoKCSAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLgoJICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTsKCgkgIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LgoJICB2YXIgXyA9IGZ1bmN0aW9uKG9iaikgewoJICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqOwoJICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBfKSkgcmV0dXJuIG5ldyBfKG9iaik7CgkgICAgdGhpcy5fd3JhcHBlZCA9IG9iajsKCSAgfTsKCgkgIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoCgkgIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW4KCSAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0LgoJICBpZiAodHJ1ZSkgewoJICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgewoJICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXzsKCSAgICB9CgkgICAgZXhwb3J0cy5fID0gXzsKCSAgfSBlbHNlIHsKCSAgICByb290Ll8gPSBfOwoJICB9CgoJICAvLyBDdXJyZW50IHZlcnNpb24uCgkgIF8uVkVSU0lPTiA9ICcxLjguMyc7CgoJICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uCgkgIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlCgkgIC8vIGZ1bmN0aW9ucy4KCSAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkgewoJICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jOwoJICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkgewoJICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHsKCSAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7CgkgICAgICB9OwoJICAgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7CgkgICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTsKCSAgICAgIH07CgkgICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKCSAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pOwoJICAgICAgfTsKCSAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKCSAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTsKCSAgICAgIH07CgkgICAgfQoJICAgIHJldHVybiBmdW5jdGlvbigpIHsKCSAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7CgkgICAgfTsKCSAgfTsKCgkgIC8vIEEgbW9zdGx5LWludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSBhcHBsaWVkCgkgIC8vIHRvIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24sIHJldHVybmluZyB0aGUgZGVzaXJlZCByZXN1bHQg4oCUIGVpdGhlcgoJICAvLyBpZGVudGl0eSwgYW4gYXJiaXRyYXJ5IGNhbGxiYWNrLCBhIHByb3BlcnR5IG1hdGNoZXIsIG9yIGEgcHJvcGVydHkgYWNjZXNzb3IuCgkgIHZhciBjYiA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkgewoJICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gXy5pZGVudGl0eTsKCSAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuIG9wdGltaXplQ2IodmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KTsKCSAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkpIHJldHVybiBfLm1hdGNoZXIodmFsdWUpOwoJICAgIHJldHVybiBfLnByb3BlcnR5KHZhbHVlKTsKCSAgfTsKCSAgXy5pdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0KSB7CgkgICAgcmV0dXJuIGNiKHZhbHVlLCBjb250ZXh0LCBJbmZpbml0eSk7CgkgIH07CgoJICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYXNzaWduZXIgZnVuY3Rpb25zLgoJICB2YXIgY3JlYXRlQXNzaWduZXIgPSBmdW5jdGlvbihrZXlzRnVuYywgdW5kZWZpbmVkT25seSkgewoJICAgIHJldHVybiBmdW5jdGlvbihvYmopIHsKCSAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwoJICAgICAgaWYgKGxlbmd0aCA8IDIgfHwgb2JqID09IG51bGwpIHJldHVybiBvYmo7CgkgICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CgkgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdLAoJICAgICAgICAgICAga2V5cyA9IGtleXNGdW5jKHNvdXJjZSksCgkgICAgICAgICAgICBsID0ga2V5cy5sZW5ndGg7CgkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7CgkgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07CgkgICAgICAgICAgaWYgKCF1bmRlZmluZWRPbmx5IHx8IG9ialtrZXldID09PSB2b2lkIDApIG9ialtrZXldID0gc291cmNlW2tleV07CgkgICAgICAgIH0KCSAgICAgIH0KCSAgICAgIHJldHVybiBvYmo7CgkgICAgfTsKCSAgfTsKCgkgIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuCgkgIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7CgkgICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTsKCSAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7CgkgICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7CgkgICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yOwoJICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDsKCSAgICByZXR1cm4gcmVzdWx0OwoJICB9OwoKCSAgdmFyIHByb3BlcnR5ID0gZnVuY3Rpb24oa2V5KSB7CgkgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikgewoJICAgICAgcmV0dXJuIG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW2tleV07CgkgICAgfTsKCSAgfTsKCgkgIC8vIEhlbHBlciBmb3IgY29sbGVjdGlvbiBtZXRob2RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29sbGVjdGlvbgoJICAvLyBzaG91bGQgYmUgaXRlcmF0ZWQgYXMgYW4gYXJyYXkgb3IgYXMgYW4gb2JqZWN0CgkgIC8vIFJlbGF0ZWQ6IGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvbGVuZ3RoCgkgIC8vIEF2b2lkcyBhIHZlcnkgbmFzdHkgaU9TIDggSklUIGJ1ZyBvbiBBUk0tNjQuICMyMDk0CgkgIHZhciBNQVhfQVJSQVlfSU5ERVggPSBNYXRoLnBvdygyLCA1MykgLSAxOwoJICB2YXIgZ2V0TGVuZ3RoID0gcHJvcGVydHkoJ2xlbmd0aCcpOwoJICB2YXIgaXNBcnJheUxpa2UgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7CgkgICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChjb2xsZWN0aW9uKTsKCSAgICByZXR1cm4gdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyAmJiBsZW5ndGggPj0gMCAmJiBsZW5ndGggPD0gTUFYX0FSUkFZX0lOREVYOwoJICB9OwoKCSAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnMKCSAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgkgIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLgoJICAvLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsCgkgIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuCgkgIF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHsKCSAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQpOwoJICAgIHZhciBpLCBsZW5ndGg7CgkgICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHsKCSAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewoJICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7CgkgICAgICB9CgkgICAgfSBlbHNlIHsKCSAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7CgkgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CgkgICAgICAgIGl0ZXJhdGVlKG9ialtrZXlzW2ldXSwga2V5c1tpXSwgb2JqKTsKCSAgICAgIH0KCSAgICB9CgkgICAgcmV0dXJuIG9iajsKCSAgfTsKCgkgIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50LgoJICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHsKCSAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTsKCSAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLAoJICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCwKCSAgICAgICAgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7CgkgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewoJICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDsKCSAgICAgIHJlc3VsdHNbaW5kZXhdID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopOwoJICAgIH0KCSAgICByZXR1cm4gcmVzdWx0czsKCSAgfTsKCgkgIC8vIENyZWF0ZSBhIHJlZHVjaW5nIGZ1bmN0aW9uIGl0ZXJhdGluZyBsZWZ0IG9yIHJpZ2h0LgoJICBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7CgkgICAgLy8gT3B0aW1pemVkIGl0ZXJhdG9yIGZ1bmN0aW9uIGFzIHVzaW5nIGFyZ3VtZW50cy5sZW5ndGgKCSAgICAvLyBpbiB0aGUgbWFpbiBmdW5jdGlvbiB3aWxsIGRlb3B0aW1pemUgdGhlLCBzZWUgIzE5OTEuCgkgICAgZnVuY3Rpb24gaXRlcmF0b3Iob2JqLCBpdGVyYXRlZSwgbWVtbywga2V5cywgaW5kZXgsIGxlbmd0aCkgewoJICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikgewoJICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4OwoJICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopOwoJICAgICAgfQoJICAgICAgcmV0dXJuIG1lbW87CgkgICAgfQoKCSAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkgewoJICAgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCA0KTsKCSAgICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksCgkgICAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsCgkgICAgICAgICAgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7CgkgICAgICAvLyBEZXRlcm1pbmUgdGhlIGluaXRpYWwgdmFsdWUgaWYgbm9uZSBpcyBwcm92aWRlZC4KCSAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgewoJICAgICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4XTsKCSAgICAgICAgaW5kZXggKz0gZGlyOwoJICAgICAgfQoJICAgICAgcmV0dXJuIGl0ZXJhdG9yKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGtleXMsIGluZGV4LCBsZW5ndGgpOwoJICAgIH07CgkgIH0KCgkgIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCwKCSAgLy8gb3IgYGZvbGRsYC4KCSAgXy5yZWR1Y2UgPSBfLmZvbGRsID0gXy5pbmplY3QgPSBjcmVhdGVSZWR1Y2UoMSk7CgoJICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZQ==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.end();

  return __filename;
};
